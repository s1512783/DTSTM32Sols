
obj/ff_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005ea4  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  20000000  08005ea4  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001a94  20000004  08005ea8  00020004  2**2
                  ALLOC
  3 .stack        00000000  20001a98  20001a98  00020008  2**3
                  CONTENTS
  4 .comment      00000042  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  5 .ARM.attributes 00000033  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000188  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000bb99  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001801  00000000  00000000  0002bd9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000024d4  00000000  00000000  0002d59f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000d34  00000000  00000000  0002fa74  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000012e9  00000000  00000000  000307a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008c97  00000000  00000000  00031a91  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004f0  00000000  00000000  0003a728  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <vector>:
 8000000:	00 20 00 20 2f 12 00 08 29 12 00 08 29 12 00 08     . . /...)...)...
 8000010:	29 12 00 08 29 12 00 08 29 12 00 08 00 00 00 00     )...)...).......
	...
 800002c:	2d 12 00 08 29 12 00 08 00 00 00 00 29 12 00 08     -...).......)...
 800003c:	e5 01 00 08 2b 12 00 08 2b 12 00 08 2b 12 00 08     ....+...+...+...
 800004c:	2b 12 00 08 2b 12 00 08 2b 12 00 08 2b 12 00 08     +...+...+...+...
 800005c:	2b 12 00 08 2b 12 00 08 2b 12 00 08 2b 12 00 08     +...+...+...+...
 800006c:	2b 12 00 08 2b 12 00 08 2b 12 00 08 2b 12 00 08     +...+...+...+...
 800007c:	2b 12 00 08 2b 12 00 08 2b 12 00 08 2b 12 00 08     +...+...+...+...
	...
 800009c:	2b 12 00 08 2b 12 00 08 2b 12 00 08 2b 12 00 08     +...+...+...+...
 80000ac:	2b 12 00 08 2b 12 00 08 2b 12 00 08 2b 12 00 08     +...+...+...+...
 80000bc:	2b 12 00 08 2b 12 00 08 2b 12 00 08 2b 12 00 08     +...+...+...+...
 80000cc:	2b 12 00 08 2b 12 00 08 a5 12 00 08 2b 12 00 08     +...+.......+...
 80000dc:	2b 12 00 08 2b 12 00 08 2b 12 00 08 2b 12 00 08     +...+...+...+...
 80000ec:	2b 12 00 08 2b 12 00 08 2b 12 00 08 00 00 00 00     +...+...+.......
 80000fc:	00 00 00 00 2b 12 00 08 00 00 00 00 2b 12 00 08     ....+.......+...
 800010c:	2b 12 00 08 2b 12 00 08 2b 12 00 08 2b 12 00 08     +...+...+...+...
 800011c:	2b 12 00 08 2b 12 00 08 2b 12 00 08 2b 12 00 08     +...+...+...+...
 800012c:	2b 12 00 08 2b 12 00 08                             +...+...

08000134 <put_rc>:



static
void put_rc (FRESULT rc)
{
 8000134:	4601      	mov	r1, r0
		"INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
		"INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0"
		"LOCKED\0" "NOT_ENOUGH_CORE\0" "TOO_MANY_OPEN_FILES\0" "INVALID_PARAMETER\0";
	FRESULT i;

	for (i = 0; i != rc && *str; i++) {
 8000136:	2300      	movs	r3, #0
	const char *str =
 8000138:	4a07      	ldr	r2, [pc, #28]	; (8000158 <put_rc+0x24>)
	for (i = 0; i != rc && *str; i++) {
 800013a:	b2d8      	uxtb	r0, r3
 800013c:	4281      	cmp	r1, r0
 800013e:	d102      	bne.n	8000146 <put_rc+0x12>
		while (*str++) ;
	}
	xprintf("rc=%u FR_%s\n", (UINT)rc, str);
 8000140:	4806      	ldr	r0, [pc, #24]	; (800015c <put_rc+0x28>)
 8000142:	f001 ba7d 	b.w	8001640 <xprintf>
	for (i = 0; i != rc && *str; i++) {
 8000146:	7810      	ldrb	r0, [r2, #0]
 8000148:	2800      	cmp	r0, #0
 800014a:	d0f9      	beq.n	8000140 <put_rc+0xc>
		while (*str++) ;
 800014c:	f812 0b01 	ldrb.w	r0, [r2], #1
 8000150:	2800      	cmp	r0, #0
 8000152:	d1fb      	bne.n	800014c <put_rc+0x18>
 8000154:	3301      	adds	r3, #1
 8000156:	e7f0      	b.n	800013a <put_rc+0x6>
 8000158:	08004f0c 	.word	0x08004f0c
 800015c:	080055a8 	.word	0x080055a8

08000160 <scan_files>:
{
 8000160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000164:	b08c      	sub	sp, #48	; 0x30
 8000166:	4604      	mov	r4, r0
	if ((res = f_opendir(&dirs, path)) == FR_OK) {
 8000168:	4601      	mov	r1, r0
 800016a:	4668      	mov	r0, sp
 800016c:	f003 fe9a 	bl	8003ea4 <f_opendir>
 8000170:	bb18      	cbnz	r0, 80001ba <scan_files+0x5a>
		i = strlen(path);
 8000172:	4620      	mov	r0, r4
 8000174:	f004 fe9c 	bl	8004eb0 <strlen>
 8000178:	b2c6      	uxtb	r6, r0
				*(path+i) = '/'; strcpy(path+i+1, Finfo.fname);
 800017a:	1c77      	adds	r7, r6, #1
 800017c:	4427      	add	r7, r4
		while (((res = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0]) {
 800017e:	4d15      	ldr	r5, [pc, #84]	; (80001d4 <scan_files+0x74>)
 8000180:	4668      	mov	r0, sp
 8000182:	4629      	mov	r1, r5
 8000184:	f003 fecb 	bl	8003f1e <f_readdir>
 8000188:	4680      	mov	r8, r0
 800018a:	b9b0      	cbnz	r0, 80001ba <scan_files+0x5a>
 800018c:	7dab      	ldrb	r3, [r5, #22]
 800018e:	b1a3      	cbz	r3, 80001ba <scan_files+0x5a>
			if (Finfo.fattrib & AM_DIR) {
 8000190:	7a2b      	ldrb	r3, [r5, #8]
 8000192:	06db      	lsls	r3, r3, #27
 8000194:	d514      	bpl.n	80001c0 <scan_files+0x60>
				AccDirs++;
 8000196:	4a10      	ldr	r2, [pc, #64]	; (80001d8 <scan_files+0x78>)
				*(path+i) = '/'; strcpy(path+i+1, Finfo.fname);
 8000198:	f105 0116 	add.w	r1, r5, #22
				AccDirs++;
 800019c:	8813      	ldrh	r3, [r2, #0]
				*(path+i) = '/'; strcpy(path+i+1, Finfo.fname);
 800019e:	4638      	mov	r0, r7
				AccDirs++;
 80001a0:	3301      	adds	r3, #1
 80001a2:	8013      	strh	r3, [r2, #0]
				*(path+i) = '/'; strcpy(path+i+1, Finfo.fname);
 80001a4:	232f      	movs	r3, #47	; 0x2f
 80001a6:	55a3      	strb	r3, [r4, r6]
 80001a8:	f004 fe24 	bl	8004df4 <strcpy>
				res = scan_files(path);
 80001ac:	4620      	mov	r0, r4
 80001ae:	f7ff ffd7 	bl	8000160 <scan_files>
				*(path+i) = '\0';
 80001b2:	f804 8006 	strb.w	r8, [r4, r6]
				if (res != FR_OK) break;
 80001b6:	2800      	cmp	r0, #0
 80001b8:	d0e1      	beq.n	800017e <scan_files+0x1e>
}
 80001ba:	b00c      	add	sp, #48	; 0x30
 80001bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				AccFiles++;
 80001c0:	4a06      	ldr	r2, [pc, #24]	; (80001dc <scan_files+0x7c>)
 80001c2:	8813      	ldrh	r3, [r2, #0]
 80001c4:	3301      	adds	r3, #1
 80001c6:	8013      	strh	r3, [r2, #0]
				AccSize += Finfo.fsize;
 80001c8:	4a05      	ldr	r2, [pc, #20]	; (80001e0 <scan_files+0x80>)
 80001ca:	682b      	ldr	r3, [r5, #0]
 80001cc:	6811      	ldr	r1, [r2, #0]
 80001ce:	440b      	add	r3, r1
 80001d0:	6013      	str	r3, [r2, #0]
 80001d2:	e7d4      	b.n	800017e <scan_files+0x1e>
 80001d4:	2000046c 	.word	0x2000046c
 80001d8:	20001a8c 	.word	0x20001a8c
 80001dc:	20001a8e 	.word	0x20001a8e
 80001e0:	20000958 	.word	0x20000958

080001e4 <SysTick_Handler>:
	Timer++;	/* Increment performance counter */
 80001e4:	4a0a      	ldr	r2, [pc, #40]	; (8000210 <SysTick_Handler+0x2c>)
 80001e6:	6813      	ldr	r3, [r2, #0]
 80001e8:	3301      	adds	r3, #1
 80001ea:	6013      	str	r3, [r2, #0]
	if (++led >= 500) {
 80001ec:	4a09      	ldr	r2, [pc, #36]	; (8000214 <SysTick_Handler+0x30>)
 80001ee:	8813      	ldrh	r3, [r2, #0]
 80001f0:	3301      	adds	r3, #1
 80001f2:	b29b      	uxth	r3, r3
 80001f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
		led = 0;
 80001f8:	bf23      	ittte	cs
 80001fa:	2300      	movcs	r3, #0
 80001fc:	8013      	strhcs	r3, [r2, #0]
		GPIOC_ODR ^= _BV(9)|_BV(8);		/* Flip Green/Blue LED state */
 80001fe:	4a06      	ldrcs	r2, [pc, #24]	; (8000218 <SysTick_Handler+0x34>)
	if (++led >= 500) {
 8000200:	8013      	strhcc	r3, [r2, #0]
		GPIOC_ODR ^= _BV(9)|_BV(8);		/* Flip Green/Blue LED state */
 8000202:	bf22      	ittt	cs
 8000204:	6813      	ldrcs	r3, [r2, #0]
 8000206:	f483 7340 	eorcs.w	r3, r3, #768	; 0x300
 800020a:	6013      	strcs	r3, [r2, #0]
	disk_timerproc();	/* Disk timer process */
 800020c:	f002 b844 	b.w	8002298 <disk_timerproc>
 8000210:	20000954 	.word	0x20000954
 8000214:	20000004 	.word	0x20000004
 8000218:	4001100c 	.word	0x4001100c

0800021c <get_fattime>:
{
 800021c:	b507      	push	{r0, r1, r2, lr}
	if (!rtc_gettime(&rtc)) return 0;
 800021e:	4668      	mov	r0, sp
 8000220:	f001 fbdc 	bl	80019dc <rtc_gettime>
 8000224:	b1c0      	cbz	r0, 8000258 <get_fattime+0x3c>
			| ((DWORD)rtc.mday << 16)
 8000226:	f89d 0003 	ldrb.w	r0, [sp, #3]
			| ((DWORD)rtc.month << 21)
 800022a:	f89d 3002 	ldrb.w	r3, [sp, #2]
			| ((DWORD)rtc.mday << 16)
 800022e:	0400      	lsls	r0, r0, #16
			| ((DWORD)rtc.sec >> 1);
 8000230:	ea40 5043 	orr.w	r0, r0, r3, lsl #21
			| ((DWORD)rtc.hour << 11)
 8000234:	f89d 3004 	ldrb.w	r3, [sp, #4]
			| ((DWORD)rtc.sec >> 1);
 8000238:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
			| ((DWORD)rtc.min << 5)
 800023c:	f89d 3005 	ldrb.w	r3, [sp, #5]
			| ((DWORD)rtc.sec >> 1);
 8000240:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
 8000244:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000248:	ea40 0053 	orr.w	r0, r0, r3, lsr #1
	return	  ((DWORD)(rtc.year - 1980) << 25)
 800024c:	f8bd 3000 	ldrh.w	r3, [sp]
 8000250:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
			| ((DWORD)rtc.sec >> 1);
 8000254:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
}
 8000258:	b003      	add	sp, #12
 800025a:	f85d fb04 	ldr.w	pc, [sp], #4
 800025e:	bf00      	nop

08000260 <main>:
	DWORD ofs = 0, sect = 0, blk[2];
	FATFS *fs;
	RTCTIME rtc;

	/* Enable LED indicators on the STM32VL Discovery board */
	__enable_peripheral(IOPCEN);
 8000260:	4aab      	ldr	r2, [pc, #684]	; (8000510 <main+0x2b0>)
{
 8000262:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__enable_peripheral(IOPCEN);
 8000266:	6813      	ldr	r3, [r2, #0]
{
 8000268:	b09b      	sub	sp, #108	; 0x6c
	__enable_peripheral(IOPCEN);
 800026a:	f043 0310 	orr.w	r3, r3, #16
 800026e:	6013      	str	r3, [r2, #0]
	__gpio_conf_bit(GPIOC, 8, OUT_PP);	/* PC8:Blue LED */
 8000270:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8000274:	3a14      	subs	r2, #20
 8000276:	6813      	ldr	r3, [r2, #0]
	SYST_RVR = 24000000 / 1000 - 1;
	SYST_CVR = 24000000 / 1000 - 1;
	SYST_CSR = 0x07;

	/* Enable UART1 and attach it to xprintf module for console */
	uart1_init(115200);
 8000278:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
	__gpio_conf_bit(GPIOC, 8, OUT_PP);	/* PC8:Blue LED */
 800027c:	f023 030f 	bic.w	r3, r3, #15
 8000280:	f043 0303 	orr.w	r3, r3, #3
 8000284:	6013      	str	r3, [r2, #0]
	__gpio_conf_bit(GPIOC, 9, OUT_PP);	/* PC9:Green LED */
 8000286:	6813      	ldr	r3, [r2, #0]
 8000288:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800028c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000290:	6013      	str	r3, [r2, #0]
	GPIOC_BSRR = _BV(8);				/* Blue LED on */
 8000292:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000296:	4b9f      	ldr	r3, [pc, #636]	; (8000514 <main+0x2b4>)
 8000298:	601a      	str	r2, [r3, #0]
	SYST_RVR = 24000000 / 1000 - 1;
 800029a:	f645 53bf 	movw	r3, #23999	; 0x5dbf
 800029e:	4a9e      	ldr	r2, [pc, #632]	; (8000518 <main+0x2b8>)
 80002a0:	6013      	str	r3, [r2, #0]
	SYST_CVR = 24000000 / 1000 - 1;
 80002a2:	6053      	str	r3, [r2, #4]
	SYST_CSR = 0x07;
 80002a4:	2207      	movs	r2, #7
 80002a6:	4b9d      	ldr	r3, [pc, #628]	; (800051c <main+0x2bc>)
 80002a8:	601a      	str	r2, [r3, #0]
	uart1_init(115200);
 80002aa:	f001 f873 	bl	8001394 <uart1_init>
	xdev_out(uart1_putc);
 80002ae:	4b9c      	ldr	r3, [pc, #624]	; (8000520 <main+0x2c0>)
 80002b0:	4a9c      	ldr	r2, [pc, #624]	; (8000524 <main+0x2c4>)
	xdev_in(uart1_getc);
	xputs("STM32F100 test monitor\n");
 80002b2:	489d      	ldr	r0, [pc, #628]	; (8000528 <main+0x2c8>)
	xdev_out(uart1_putc);
 80002b4:	601a      	str	r2, [r3, #0]
	xdev_in(uart1_getc);
 80002b6:	4b9d      	ldr	r3, [pc, #628]	; (800052c <main+0x2cc>)
 80002b8:	4a9d      	ldr	r2, [pc, #628]	; (8000530 <main+0x2d0>)
 80002ba:	601a      	str	r2, [r3, #0]
	xputs("STM32F100 test monitor\n");
 80002bc:	f001 f8cc 	bl	8001458 <xputs>
	xputs(FF_USE_LFN ? "LFN Enabled" : "LFN Disabled");
 80002c0:	489c      	ldr	r0, [pc, #624]	; (8000534 <main+0x2d4>)
 80002c2:	f001 f8c9 	bl	8001458 <xputs>
	xprintf(", Code page: %u\n", FF_CODE_PAGE);
 80002c6:	f240 11b5 	movw	r1, #437	; 0x1b5
 80002ca:	489b      	ldr	r0, [pc, #620]	; (8000538 <main+0x2d8>)
 80002cc:	f001 f9b8 	bl	8001640 <xprintf>

	/* Initiazlize RTC */
	if (rtc_initialize()) {
 80002d0:	f001 face 	bl	8001870 <rtc_initialize>
 80002d4:	2800      	cmp	r0, #0
 80002d6:	d061      	beq.n	800039c <main+0x13c>
		rtc_gettime(&rtc);
 80002d8:	a818      	add	r0, sp, #96	; 0x60
 80002da:	f001 fb7f 	bl	80019dc <rtc_gettime>
		xprintf("Current time is %u/%u/%u %2u:%02u:%02u.\n", rtc.year, rtc.month, rtc.mday, rtc.hour, rtc.min, rtc.sec);
 80002de:	f89d 0066 	ldrb.w	r0, [sp, #102]	; 0x66
 80002e2:	f89d 3063 	ldrb.w	r3, [sp, #99]	; 0x63
 80002e6:	9002      	str	r0, [sp, #8]
 80002e8:	f89d 0065 	ldrb.w	r0, [sp, #101]	; 0x65
 80002ec:	f89d 2062 	ldrb.w	r2, [sp, #98]	; 0x62
 80002f0:	9001      	str	r0, [sp, #4]
 80002f2:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 80002f6:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 80002fa:	9000      	str	r0, [sp, #0]
 80002fc:	488f      	ldr	r0, [pc, #572]	; (800053c <main+0x2dc>)
 80002fe:	f001 f99f 	bl	8001640 <xprintf>
				if (!xatoi(&ptr, &p1)) {
					p1 = drv; p2 = sect;
				} else {
					if (!xatoi(&ptr, &p2)) break;
				}
				drv = (BYTE)p1; sect = p2;
 8000302:	2700      	movs	r7, #0
 8000304:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8000308:	46b8      	mov	r8, r7
		xgets(Line, sizeof Line);
 800030a:	4c8d      	ldr	r4, [pc, #564]	; (8000540 <main+0x2e0>)
		xputc('>');
 800030c:	203e      	movs	r0, #62	; 0x3e
 800030e:	f001 f889 	bl	8001424 <xputc>
		xgets(Line, sizeof Line);
 8000312:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000316:	488a      	ldr	r0, [pc, #552]	; (8000540 <main+0x2e0>)
 8000318:	f001 fa18 	bl	800174c <xgets>
		switch (*ptr++) {
 800031c:	4b89      	ldr	r3, [pc, #548]	; (8000544 <main+0x2e4>)
 800031e:	930e      	str	r3, [sp, #56]	; 0x38
 8000320:	7823      	ldrb	r3, [r4, #0]
 8000322:	2b64      	cmp	r3, #100	; 0x64
 8000324:	f000 8188 	beq.w	8000638 <main+0x3d8>
 8000328:	d83c      	bhi.n	80003a4 <main+0x144>
 800032a:	2b3f      	cmp	r3, #63	; 0x3f
 800032c:	d07e      	beq.n	800042c <main+0x1cc>
 800032e:	2b62      	cmp	r3, #98	; 0x62
 8000330:	d1ec      	bne.n	800030c <main+0xac>
				break;
			}
			break;

		case 'b' :	/* Buffer controls */
			switch (*ptr++) {
 8000332:	4b85      	ldr	r3, [pc, #532]	; (8000548 <main+0x2e8>)
 8000334:	930e      	str	r3, [sp, #56]	; 0x38
 8000336:	7863      	ldrb	r3, [r4, #1]
 8000338:	2b66      	cmp	r3, #102	; 0x66
 800033a:	f000 832a 	beq.w	8000992 <main+0x732>
 800033e:	f200 82a7 	bhi.w	8000890 <main+0x630>
 8000342:	2b64      	cmp	r3, #100	; 0x64
 8000344:	f000 82ca 	beq.w	80008dc <main+0x67c>
 8000348:	2b65      	cmp	r3, #101	; 0x65
 800034a:	d1df      	bne.n	800030c <main+0xac>
				for (ptr=(char*)&Buff[p1], ofs = p1, cnt = 32; cnt; cnt--, ptr+=16, ofs+=16)
					put_dump((BYTE*)ptr, ofs, 16, DW_CHAR);
				break;

			case 'e' :	/* be <ofs> [<data>] ... - Edit R/W buffer */
				if (!xatoi(&ptr, &p1)) break;
 800034c:	a90f      	add	r1, sp, #60	; 0x3c
 800034e:	a80e      	add	r0, sp, #56	; 0x38
 8000350:	f001 fa3a 	bl	80017c8 <xatoi>
 8000354:	2800      	cmp	r0, #0
 8000356:	d0d9      	beq.n	800030c <main+0xac>
				if (xatoi(&ptr, &p2)) {
 8000358:	a910      	add	r1, sp, #64	; 0x40
 800035a:	a80e      	add	r0, sp, #56	; 0x38
 800035c:	f001 fa34 	bl	80017c8 <xatoi>
 8000360:	4e7a      	ldr	r6, [pc, #488]	; (800054c <main+0x2ec>)
 8000362:	2800      	cmp	r0, #0
 8000364:	f040 82d9 	bne.w	800091a <main+0x6ba>
						Buff[p1++] = (BYTE)p2;
					} while (xatoi(&ptr, &p2));
					break;
				}
				for (;;) {
					xprintf("%04X %02X-", (WORD)(p1), (WORD)Buff[p1]);
 8000368:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 800055c <main+0x2fc>
					if (*ptr == '.') break;
					if (*ptr < ' ') { p1++; continue; }
					if (xatoi(&ptr, &p2))
						Buff[p1++] = (BYTE)p2;
					else
						xputs("???\n");
 800036c:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 8000560 <main+0x300>
					xprintf("%04X %02X-", (WORD)(p1), (WORD)Buff[p1]);
 8000370:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8000372:	4650      	mov	r0, sl
 8000374:	5c72      	ldrb	r2, [r6, r1]
 8000376:	b289      	uxth	r1, r1
 8000378:	f001 f962 	bl	8001640 <xprintf>
					xgets(Line, sizeof Line);
 800037c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000380:	4620      	mov	r0, r4
 8000382:	f001 f9e3 	bl	800174c <xgets>
					if (*ptr == '.') break;
 8000386:	7823      	ldrb	r3, [r4, #0]
					ptr = Line;
 8000388:	940e      	str	r4, [sp, #56]	; 0x38
					if (*ptr == '.') break;
 800038a:	2b2e      	cmp	r3, #46	; 0x2e
 800038c:	d0be      	beq.n	800030c <main+0xac>
					if (*ptr < ' ') { p1++; continue; }
 800038e:	2b1f      	cmp	r3, #31
 8000390:	f200 82cf 	bhi.w	8000932 <main+0x6d2>
 8000394:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000396:	3301      	adds	r3, #1
 8000398:	930f      	str	r3, [sp, #60]	; 0x3c
 800039a:	e7e9      	b.n	8000370 <main+0x110>
		xputs("RTC is not available.\n");
 800039c:	486c      	ldr	r0, [pc, #432]	; (8000550 <main+0x2f0>)
 800039e:	f001 f85b 	bl	8001458 <xputs>
 80003a2:	e7ae      	b.n	8000302 <main+0xa2>
		switch (*ptr++) {
 80003a4:	2b6d      	cmp	r3, #109	; 0x6d
 80003a6:	d045      	beq.n	8000434 <main+0x1d4>
 80003a8:	2b74      	cmp	r3, #116	; 0x74
 80003aa:	f000 86eb 	beq.w	8001184 <main+0xf24>
 80003ae:	2b66      	cmp	r3, #102	; 0x66
 80003b0:	d1ac      	bne.n	800030c <main+0xac>

			}
			break;

		case 'f' :	/* FatFS API controls */
			switch (*ptr++) {
 80003b2:	4b65      	ldr	r3, [pc, #404]	; (8000548 <main+0x2e8>)
 80003b4:	930e      	str	r3, [sp, #56]	; 0x38
 80003b6:	7863      	ldrb	r3, [r4, #1]
 80003b8:	3b61      	subs	r3, #97	; 0x61
 80003ba:	2b19      	cmp	r3, #25
 80003bc:	d8a6      	bhi.n	800030c <main+0xac>
 80003be:	a201      	add	r2, pc, #4	; (adr r2, 80003c4 <main+0x164>)
 80003c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003c4:	08000ecd 	.word	0x08000ecd
 80003c8:	080010c9 	.word	0x080010c9
 80003cc:	08000c81 	.word	0x08000c81
 80003d0:	08000cc3 	.word	0x08000cc3
 80003d4:	08000c8f 	.word	0x08000c8f
 80003d8:	0800030d 	.word	0x0800030d
 80003dc:	08001091 	.word	0x08001091
 80003e0:	0800030d 	.word	0x0800030d
 80003e4:	080009b1 	.word	0x080009b1
 80003e8:	0800030d 	.word	0x0800030d
 80003ec:	08000eb9 	.word	0x08000eb9
 80003f0:	08000af3 	.word	0x08000af3
 80003f4:	080010dd 	.word	0x080010dd
 80003f8:	08000e5d 	.word	0x08000e5d
 80003fc:	08000c53 	.word	0x08000c53
 8000400:	0800030d 	.word	0x0800030d
 8000404:	080010a5 	.word	0x080010a5
 8000408:	08000d2b 	.word	0x08000d2b
 800040c:	080009d3 	.word	0x080009d3
 8000410:	08000f0b 	.word	0x08000f0b
 8000414:	08000e93 	.word	0x08000e93
 8000418:	08000ea7 	.word	0x08000ea7
 800041c:	08000d9d 	.word	0x08000d9d
 8000420:	08000fa9 	.word	0x08000fa9
 8000424:	0800030d 	.word	0x0800030d
 8000428:	0800112d 	.word	0x0800112d
			xputs(HelpMsg);
 800042c:	4849      	ldr	r0, [pc, #292]	; (8000554 <main+0x2f4>)
 800042e:	f001 f813 	bl	8001458 <xputs>
			break;
 8000432:	e76b      	b.n	800030c <main+0xac>
			switch (*ptr++) {
 8000434:	4b44      	ldr	r3, [pc, #272]	; (8000548 <main+0x2e8>)
 8000436:	930e      	str	r3, [sp, #56]	; 0x38
 8000438:	7863      	ldrb	r3, [r4, #1]
 800043a:	2b65      	cmp	r3, #101	; 0x65
 800043c:	f000 8092 	beq.w	8000564 <main+0x304>
 8000440:	2b66      	cmp	r3, #102	; 0x66
 8000442:	d042      	beq.n	80004ca <main+0x26a>
 8000444:	2b64      	cmp	r3, #100	; 0x64
 8000446:	f47f af61 	bne.w	800030c <main+0xac>
				switch (*ptr++) {
 800044a:	4b43      	ldr	r3, [pc, #268]	; (8000558 <main+0x2f8>)
 800044c:	930e      	str	r3, [sp, #56]	; 0x38
 800044e:	78a3      	ldrb	r3, [r4, #2]
 8000450:	2b68      	cmp	r3, #104	; 0x68
 8000452:	d027      	beq.n	80004a4 <main+0x244>
 8000454:	2b77      	cmp	r3, #119	; 0x77
 8000456:	d127      	bne.n	80004a8 <main+0x248>
				case 'w': p3 = DW_LONG; break;
 8000458:	2304      	movs	r3, #4
				if (!xatoi(&ptr, &p1)) break;
 800045a:	a90f      	add	r1, sp, #60	; 0x3c
 800045c:	a80e      	add	r0, sp, #56	; 0x38
				default: p3 = DW_CHAR;
 800045e:	9311      	str	r3, [sp, #68]	; 0x44
				if (!xatoi(&ptr, &p1)) break;
 8000460:	f001 f9b2 	bl	80017c8 <xatoi>
 8000464:	2800      	cmp	r0, #0
 8000466:	f43f af51 	beq.w	800030c <main+0xac>
				if (!xatoi(&ptr, &p2)) p2 = 128 / p3;
 800046a:	a910      	add	r1, sp, #64	; 0x40
 800046c:	a80e      	add	r0, sp, #56	; 0x38
 800046e:	f001 f9ab 	bl	80017c8 <xatoi>
 8000472:	b920      	cbnz	r0, 800047e <main+0x21e>
 8000474:	2380      	movs	r3, #128	; 0x80
 8000476:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8000478:	fb93 f3f2 	sdiv	r3, r3, r2
 800047c:	9310      	str	r3, [sp, #64]	; 0x40
				for (ptr = (char*)p1; p2 >= 16 / p3; ptr += 16, p2 -= 16 / p3)
 800047e:	2610      	movs	r6, #16
 8000480:	f06f 090f 	mvn.w	r9, #15
 8000484:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000486:	930e      	str	r3, [sp, #56]	; 0x38
 8000488:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800048a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800048c:	fb96 f1f3 	sdiv	r1, r6, r3
 8000490:	4291      	cmp	r1, r2
 8000492:	dd0b      	ble.n	80004ac <main+0x24c>
				if (p2) put_dump((BYTE*)ptr, (UINT)ptr, p2, p3);
 8000494:	2a00      	cmp	r2, #0
 8000496:	f43f af39 	beq.w	800030c <main+0xac>
 800049a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800049c:	4608      	mov	r0, r1
 800049e:	f001 f907 	bl	80016b0 <put_dump>
 80004a2:	e733      	b.n	800030c <main+0xac>
				case 'h': p3 = DW_SHORT; break;
 80004a4:	2302      	movs	r3, #2
 80004a6:	e7d8      	b.n	800045a <main+0x1fa>
				default: p3 = DW_CHAR;
 80004a8:	2301      	movs	r3, #1
 80004aa:	e7d6      	b.n	800045a <main+0x1fa>
					put_dump(ptr, (DWORD)ptr, 16 / p3, p3);
 80004ac:	460a      	mov	r2, r1
 80004ae:	990e      	ldr	r1, [sp, #56]	; 0x38
 80004b0:	4608      	mov	r0, r1
 80004b2:	f001 f8fd 	bl	80016b0 <put_dump>
				for (ptr = (char*)p1; p2 >= 16 / p3; ptr += 16, p2 -= 16 / p3)
 80004b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80004b8:	3310      	adds	r3, #16
 80004ba:	930e      	str	r3, [sp, #56]	; 0x38
 80004bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80004be:	fb99 f2f3 	sdiv	r2, r9, r3
 80004c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80004c4:	4413      	add	r3, r2
 80004c6:	9310      	str	r3, [sp, #64]	; 0x40
 80004c8:	e7de      	b.n	8000488 <main+0x228>
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2) || !xatoi(&ptr, &p3)) break;
 80004ca:	a90f      	add	r1, sp, #60	; 0x3c
 80004cc:	a80e      	add	r0, sp, #56	; 0x38
 80004ce:	f001 f97b 	bl	80017c8 <xatoi>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	f43f af1a 	beq.w	800030c <main+0xac>
 80004d8:	a910      	add	r1, sp, #64	; 0x40
 80004da:	a80e      	add	r0, sp, #56	; 0x38
 80004dc:	f001 f974 	bl	80017c8 <xatoi>
 80004e0:	2800      	cmp	r0, #0
 80004e2:	f43f af13 	beq.w	800030c <main+0xac>
 80004e6:	a911      	add	r1, sp, #68	; 0x44
 80004e8:	a80e      	add	r0, sp, #56	; 0x38
 80004ea:	f001 f96d 	bl	80017c8 <xatoi>
 80004ee:	2800      	cmp	r0, #0
 80004f0:	f43f af0c 	beq.w	800030c <main+0xac>
				while (p3--) {
 80004f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80004f6:	1e5a      	subs	r2, r3, #1
 80004f8:	9211      	str	r2, [sp, #68]	; 0x44
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	f43f af06 	beq.w	800030c <main+0xac>
					*(BYTE*)p1 = (BYTE)p2;
 8000500:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8000504:	701a      	strb	r2, [r3, #0]
					p1++;
 8000506:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000508:	3301      	adds	r3, #1
 800050a:	930f      	str	r3, [sp, #60]	; 0x3c
 800050c:	e7f2      	b.n	80004f4 <main+0x294>
 800050e:	bf00      	nop
 8000510:	40021018 	.word	0x40021018
 8000514:	40011010 	.word	0x40011010
 8000518:	e000e014 	.word	0xe000e014
 800051c:	e000e010 	.word	0xe000e010
 8000520:	20001a94 	.word	0x20001a94
 8000524:	0800135d 	.word	0x0800135d
 8000528:	080055d9 	.word	0x080055d9
 800052c:	20001a90 	.word	0x20001a90
 8000530:	0800132d 	.word	0x0800132d
 8000534:	080055f1 	.word	0x080055f1
 8000538:	080055fd 	.word	0x080055fd
 800053c:	0800560e 	.word	0x0800560e
 8000540:	2000198c 	.word	0x2000198c
 8000544:	2000198d 	.word	0x2000198d
 8000548:	2000198e 	.word	0x2000198e
 800054c:	2000095c 	.word	0x2000095c
 8000550:	08005637 	.word	0x08005637
 8000554:	08004fef 	.word	0x08004fef
 8000558:	2000198f 	.word	0x2000198f
 800055c:	080056ec 	.word	0x080056ec
 8000560:	080056f7 	.word	0x080056f7
				switch (*ptr++) {	/* Get data width */
 8000564:	4bab      	ldr	r3, [pc, #684]	; (8000814 <main+0x5b4>)
 8000566:	930e      	str	r3, [sp, #56]	; 0x38
 8000568:	78a3      	ldrb	r3, [r4, #2]
 800056a:	2b68      	cmp	r3, #104	; 0x68
 800056c:	d03f      	beq.n	80005ee <main+0x38e>
 800056e:	2b77      	cmp	r3, #119	; 0x77
 8000570:	d13f      	bne.n	80005f2 <main+0x392>
				case 'w': p3 = DW_LONG; break;
 8000572:	2304      	movs	r3, #4
				if (!xatoi(&ptr, &p1)) break;	/* Get start address */
 8000574:	a90f      	add	r1, sp, #60	; 0x3c
 8000576:	a80e      	add	r0, sp, #56	; 0x38
				default: p3 = DW_CHAR;
 8000578:	9311      	str	r3, [sp, #68]	; 0x44
				if (!xatoi(&ptr, &p1)) break;	/* Get start address */
 800057a:	f001 f925 	bl	80017c8 <xatoi>
 800057e:	2800      	cmp	r0, #0
 8000580:	f43f aec4 	beq.w	800030c <main+0xac>
				if (xatoi(&ptr, &p2)) {	/* 2nd parameter is given (direct mode) */
 8000584:	a910      	add	r1, sp, #64	; 0x40
 8000586:	a80e      	add	r0, sp, #56	; 0x38
 8000588:	f001 f91e 	bl	80017c8 <xatoi>
 800058c:	2800      	cmp	r0, #0
 800058e:	d132      	bne.n	80005f6 <main+0x396>
					case DW_SHORT: xprintf("%08X 0x%04X-", p1, *(WORD*)p1); break;
 8000590:	4ea1      	ldr	r6, [pc, #644]	; (8000818 <main+0x5b8>)
					default: xprintf("%08X 0x%02X-", p1, *(BYTE*)p1);
 8000592:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 8000848 <main+0x5e8>
					case DW_LONG: xprintf("%08X 0x%08X-", p1, *(DWORD*)p1); break;
 8000596:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 800084c <main+0x5ec>
					switch (p3) {
 800059a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800059c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800059e:	2b02      	cmp	r3, #2
 80005a0:	d040      	beq.n	8000624 <main+0x3c4>
 80005a2:	2b04      	cmp	r3, #4
 80005a4:	d141      	bne.n	800062a <main+0x3ca>
					case DW_LONG: xprintf("%08X 0x%08X-", p1, *(DWORD*)p1); break;
 80005a6:	4650      	mov	r0, sl
 80005a8:	680a      	ldr	r2, [r1, #0]
					default: xprintf("%08X 0x%02X-", p1, *(BYTE*)p1);
 80005aa:	f001 f849 	bl	8001640 <xprintf>
					ptr = Line; xgets(ptr, sizeof Line);
 80005ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b2:	4620      	mov	r0, r4
 80005b4:	940e      	str	r4, [sp, #56]	; 0x38
 80005b6:	f001 f8c9 	bl	800174c <xgets>
					if (*ptr == '.') break;
 80005ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b2e      	cmp	r3, #46	; 0x2e
 80005c0:	f43f aea4 	beq.w	800030c <main+0xac>
					if ((BYTE)*ptr >= ' ') {
 80005c4:	2b1f      	cmp	r3, #31
 80005c6:	d90d      	bls.n	80005e4 <main+0x384>
						if (!xatoi(&ptr, &p2)) continue;
 80005c8:	a910      	add	r1, sp, #64	; 0x40
 80005ca:	a80e      	add	r0, sp, #56	; 0x38
 80005cc:	f001 f8fc 	bl	80017c8 <xatoi>
 80005d0:	2800      	cmp	r0, #0
 80005d2:	d0e2      	beq.n	800059a <main+0x33a>
 80005d4:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
						switch (p3) {
 80005d8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80005da:	2902      	cmp	r1, #2
 80005dc:	d028      	beq.n	8000630 <main+0x3d0>
 80005de:	2904      	cmp	r1, #4
 80005e0:	d128      	bne.n	8000634 <main+0x3d4>
						case DW_LONG: *(DWORD*)p1 = (DWORD)p2; break;
 80005e2:	601a      	str	r2, [r3, #0]
					p1 += p3;
 80005e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80005e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80005e8:	4413      	add	r3, r2
 80005ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80005ec:	e7d5      	b.n	800059a <main+0x33a>
				case 'h': p3 = DW_SHORT; break;
 80005ee:	2302      	movs	r3, #2
 80005f0:	e7c0      	b.n	8000574 <main+0x314>
				default: p3 = DW_CHAR;
 80005f2:	2301      	movs	r3, #1
 80005f4:	e7be      	b.n	8000574 <main+0x314>
						switch (p3) {
 80005f6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80005f8:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 80005fc:	2902      	cmp	r1, #2
 80005fe:	d00d      	beq.n	800061c <main+0x3bc>
 8000600:	2904      	cmp	r1, #4
 8000602:	d10d      	bne.n	8000620 <main+0x3c0>
						case DW_LONG: *(DWORD*)p1 = (DWORD)p2; break;
 8000604:	601a      	str	r2, [r3, #0]
						p1 += p3;
 8000606:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000608:	9a11      	ldr	r2, [sp, #68]	; 0x44
					} while (xatoi(&ptr, &p2));	/* Get next value */
 800060a:	a910      	add	r1, sp, #64	; 0x40
						p1 += p3;
 800060c:	4413      	add	r3, r2
					} while (xatoi(&ptr, &p2));	/* Get next value */
 800060e:	a80e      	add	r0, sp, #56	; 0x38
						p1 += p3;
 8000610:	930f      	str	r3, [sp, #60]	; 0x3c
					} while (xatoi(&ptr, &p2));	/* Get next value */
 8000612:	f001 f8d9 	bl	80017c8 <xatoi>
 8000616:	2800      	cmp	r0, #0
 8000618:	d1ed      	bne.n	80005f6 <main+0x396>
 800061a:	e677      	b.n	800030c <main+0xac>
						case DW_SHORT: *(WORD*)p1 = (WORD)p2; break;
 800061c:	801a      	strh	r2, [r3, #0]
 800061e:	e7f2      	b.n	8000606 <main+0x3a6>
						default: *(BYTE*)p1 = (BYTE)p2;
 8000620:	701a      	strb	r2, [r3, #0]
 8000622:	e7f0      	b.n	8000606 <main+0x3a6>
					case DW_SHORT: xprintf("%08X 0x%04X-", p1, *(WORD*)p1); break;
 8000624:	880a      	ldrh	r2, [r1, #0]
 8000626:	4630      	mov	r0, r6
 8000628:	e7bf      	b.n	80005aa <main+0x34a>
					default: xprintf("%08X 0x%02X-", p1, *(BYTE*)p1);
 800062a:	780a      	ldrb	r2, [r1, #0]
 800062c:	4648      	mov	r0, r9
 800062e:	e7bc      	b.n	80005aa <main+0x34a>
						case DW_SHORT: *(WORD*)p1 = (WORD)p2; break;
 8000630:	801a      	strh	r2, [r3, #0]
 8000632:	e7d7      	b.n	80005e4 <main+0x384>
						default: *(BYTE*)p1 = (BYTE)p2;
 8000634:	701a      	strb	r2, [r3, #0]
 8000636:	e7d5      	b.n	80005e4 <main+0x384>
			switch (*ptr++) {
 8000638:	4b78      	ldr	r3, [pc, #480]	; (800081c <main+0x5bc>)
 800063a:	930e      	str	r3, [sp, #56]	; 0x38
 800063c:	7863      	ldrb	r3, [r4, #1]
 800063e:	2b64      	cmp	r3, #100	; 0x64
 8000640:	f000 809f 	beq.w	8000782 <main+0x522>
 8000644:	d81d      	bhi.n	8000682 <main+0x422>
 8000646:	2b63      	cmp	r3, #99	; 0x63
 8000648:	f47f ae60 	bne.w	800030c <main+0xac>
				switch (*ptr++) {
 800064c:	4b71      	ldr	r3, [pc, #452]	; (8000814 <main+0x5b4>)
 800064e:	930e      	str	r3, [sp, #56]	; 0x38
 8000650:	78a3      	ldrb	r3, [r4, #2]
 8000652:	2b65      	cmp	r3, #101	; 0x65
 8000654:	f000 80fc 	beq.w	8000850 <main+0x5f0>
 8000658:	2b73      	cmp	r3, #115	; 0x73
 800065a:	f47f ae57 	bne.w	800030c <main+0xac>
					if (!xatoi(&ptr, &p1)) break;
 800065e:	a90f      	add	r1, sp, #60	; 0x3c
 8000660:	a80e      	add	r0, sp, #56	; 0x38
 8000662:	f001 f8b1 	bl	80017c8 <xatoi>
 8000666:	2800      	cmp	r0, #0
 8000668:	f43f ae50 	beq.w	800030c <main+0xac>
					xprintf("rc=%d\n", disk_ioctl((BYTE)p1, CTRL_SYNC, 0));
 800066c:	2200      	movs	r2, #0
 800066e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8000672:	4611      	mov	r1, r2
 8000674:	f001 fd26 	bl	80020c4 <disk_ioctl>
 8000678:	4601      	mov	r1, r0
 800067a:	4869      	ldr	r0, [pc, #420]	; (8000820 <main+0x5c0>)
 800067c:	f000 ffe0 	bl	8001640 <xprintf>
					break;
 8000680:	e644      	b.n	800030c <main+0xac>
			switch (*ptr++) {
 8000682:	2b69      	cmp	r3, #105	; 0x69
 8000684:	f000 80b6 	beq.w	80007f4 <main+0x594>
 8000688:	2b73      	cmp	r3, #115	; 0x73
 800068a:	f47f ae3f 	bne.w	800030c <main+0xac>
				if (!xatoi(&ptr, &p1)) break;
 800068e:	a90f      	add	r1, sp, #60	; 0x3c
 8000690:	a80e      	add	r0, sp, #56	; 0x38
 8000692:	f001 f899 	bl	80017c8 <xatoi>
 8000696:	2800      	cmp	r0, #0
 8000698:	f43f ae38 	beq.w	800030c <main+0xac>
				if (disk_ioctl((BYTE)p1, GET_SECTOR_COUNT, &p2) == RES_OK)
 800069c:	aa10      	add	r2, sp, #64	; 0x40
 800069e:	2101      	movs	r1, #1
 80006a0:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80006a4:	f001 fd0e 	bl	80020c4 <disk_ioctl>
 80006a8:	b918      	cbnz	r0, 80006b2 <main+0x452>
					{ xprintf("Drive size: %lu sectors\n", p2); }
 80006aa:	9910      	ldr	r1, [sp, #64]	; 0x40
 80006ac:	485d      	ldr	r0, [pc, #372]	; (8000824 <main+0x5c4>)
 80006ae:	f000 ffc7 	bl	8001640 <xprintf>
				if (disk_ioctl((BYTE)p1, GET_BLOCK_SIZE, &p2) == RES_OK)
 80006b2:	aa10      	add	r2, sp, #64	; 0x40
 80006b4:	2103      	movs	r1, #3
 80006b6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80006ba:	f001 fd03 	bl	80020c4 <disk_ioctl>
 80006be:	b918      	cbnz	r0, 80006c8 <main+0x468>
					{ xprintf("Block size: %lu sectors\n", p2); }
 80006c0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80006c2:	4859      	ldr	r0, [pc, #356]	; (8000828 <main+0x5c8>)
 80006c4:	f000 ffbc 	bl	8001640 <xprintf>
				if (disk_ioctl((BYTE)p1, MMC_GET_TYPE, &b) == RES_OK)
 80006c8:	f10d 0237 	add.w	r2, sp, #55	; 0x37
 80006cc:	2132      	movs	r1, #50	; 0x32
 80006ce:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80006d2:	f001 fcf7 	bl	80020c4 <disk_ioctl>
 80006d6:	b920      	cbnz	r0, 80006e2 <main+0x482>
					{ xprintf("Media type: %u\n", b); }
 80006d8:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
 80006dc:	4853      	ldr	r0, [pc, #332]	; (800082c <main+0x5cc>)
 80006de:	f000 ffaf 	bl	8001640 <xprintf>
				if (disk_ioctl((BYTE)p1, MMC_GET_CSD, Buff) == RES_OK)
 80006e2:	4a53      	ldr	r2, [pc, #332]	; (8000830 <main+0x5d0>)
 80006e4:	2133      	movs	r1, #51	; 0x33
 80006e6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80006ea:	f001 fceb 	bl	80020c4 <disk_ioctl>
 80006ee:	4e50      	ldr	r6, [pc, #320]	; (8000830 <main+0x5d0>)
 80006f0:	4681      	mov	r9, r0
 80006f2:	b940      	cbnz	r0, 8000706 <main+0x4a6>
					{ xputs("CSD:\n"); put_dump(Buff, 0, 16, DW_CHAR); }
 80006f4:	484f      	ldr	r0, [pc, #316]	; (8000834 <main+0x5d4>)
 80006f6:	f000 feaf 	bl	8001458 <xputs>
 80006fa:	2301      	movs	r3, #1
 80006fc:	2210      	movs	r2, #16
 80006fe:	4649      	mov	r1, r9
 8000700:	4630      	mov	r0, r6
 8000702:	f000 ffd5 	bl	80016b0 <put_dump>
				if (disk_ioctl((BYTE)p1, MMC_GET_CID, Buff) == RES_OK)
 8000706:	4a4a      	ldr	r2, [pc, #296]	; (8000830 <main+0x5d0>)
 8000708:	2134      	movs	r1, #52	; 0x34
 800070a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800070e:	f001 fcd9 	bl	80020c4 <disk_ioctl>
 8000712:	4681      	mov	r9, r0
 8000714:	b940      	cbnz	r0, 8000728 <main+0x4c8>
					{ xputs("CID:\n"); put_dump(Buff, 0, 16, DW_CHAR); }
 8000716:	4848      	ldr	r0, [pc, #288]	; (8000838 <main+0x5d8>)
 8000718:	f000 fe9e 	bl	8001458 <xputs>
 800071c:	2301      	movs	r3, #1
 800071e:	2210      	movs	r2, #16
 8000720:	4649      	mov	r1, r9
 8000722:	4843      	ldr	r0, [pc, #268]	; (8000830 <main+0x5d0>)
 8000724:	f000 ffc4 	bl	80016b0 <put_dump>
				if (disk_ioctl((BYTE)p1, MMC_GET_OCR, Buff) == RES_OK)
 8000728:	4a41      	ldr	r2, [pc, #260]	; (8000830 <main+0x5d0>)
 800072a:	2135      	movs	r1, #53	; 0x35
 800072c:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8000730:	f001 fcc8 	bl	80020c4 <disk_ioctl>
 8000734:	4681      	mov	r9, r0
 8000736:	b940      	cbnz	r0, 800074a <main+0x4ea>
					{ xputs("OCR:\n"); put_dump(Buff, 0, 4, DW_CHAR); }
 8000738:	4840      	ldr	r0, [pc, #256]	; (800083c <main+0x5dc>)
 800073a:	f000 fe8d 	bl	8001458 <xputs>
 800073e:	2301      	movs	r3, #1
 8000740:	2204      	movs	r2, #4
 8000742:	4649      	mov	r1, r9
 8000744:	483a      	ldr	r0, [pc, #232]	; (8000830 <main+0x5d0>)
 8000746:	f000 ffb3 	bl	80016b0 <put_dump>
				if (disk_ioctl((BYTE)p1, MMC_GET_SDSTAT, Buff) == RES_OK) {
 800074a:	4a39      	ldr	r2, [pc, #228]	; (8000830 <main+0x5d0>)
 800074c:	2136      	movs	r1, #54	; 0x36
 800074e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8000752:	f001 fcb7 	bl	80020c4 <disk_ioctl>
 8000756:	4681      	mov	r9, r0
 8000758:	2800      	cmp	r0, #0
 800075a:	f47f add7 	bne.w	800030c <main+0xac>
					xputs("SD Status:\n");
 800075e:	4838      	ldr	r0, [pc, #224]	; (8000840 <main+0x5e0>)
 8000760:	f000 fe7a 	bl	8001458 <xputs>
					for (s1 = 0; s1 < 64; s1 += 16) put_dump(Buff+s1, s1, 16, DW_CHAR);
 8000764:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8000768:	9912      	ldr	r1, [sp, #72]	; 0x48
 800076a:	293f      	cmp	r1, #63	; 0x3f
 800076c:	f63f adce 	bhi.w	800030c <main+0xac>
 8000770:	2301      	movs	r3, #1
 8000772:	2210      	movs	r2, #16
 8000774:	1870      	adds	r0, r6, r1
 8000776:	f000 ff9b 	bl	80016b0 <put_dump>
 800077a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800077c:	3310      	adds	r3, #16
 800077e:	9312      	str	r3, [sp, #72]	; 0x48
 8000780:	e7f2      	b.n	8000768 <main+0x508>
				if (!xatoi(&ptr, &p1)) {
 8000782:	a90f      	add	r1, sp, #60	; 0x3c
 8000784:	a80e      	add	r0, sp, #56	; 0x38
 8000786:	f001 f81f 	bl	80017c8 <xatoi>
 800078a:	b9a0      	cbnz	r0, 80007b6 <main+0x556>
					p1 = drv; p2 = sect;
 800078c:	e9cd 870f 	strd	r8, r7, [sp, #60]	; 0x3c
				drv = (BYTE)p1; sect = p2;
 8000790:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 8000794:	9e10      	ldr	r6, [sp, #64]	; 0x40
				res = disk_read(drv, Buff, sect, 1);
 8000796:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8000830 <main+0x5d0>
 800079a:	2301      	movs	r3, #1
 800079c:	4632      	mov	r2, r6
 800079e:	4649      	mov	r1, r9
 80007a0:	4640      	mov	r0, r8
 80007a2:	f001 fbeb 	bl	8001f7c <disk_read>
				if (res) { xprintf("rc=%d\n", (WORD)res); break; }
 80007a6:	4682      	mov	sl, r0
 80007a8:	b168      	cbz	r0, 80007c6 <main+0x566>
 80007aa:	4601      	mov	r1, r0
 80007ac:	481c      	ldr	r0, [pc, #112]	; (8000820 <main+0x5c0>)
 80007ae:	f000 ff47 	bl	8001640 <xprintf>
				drv = (BYTE)p1; sect = p2;
 80007b2:	4637      	mov	r7, r6
				if (res) { xprintf("rc=%d\n", (WORD)res); break; }
 80007b4:	e5aa      	b.n	800030c <main+0xac>
					if (!xatoi(&ptr, &p2)) break;
 80007b6:	a910      	add	r1, sp, #64	; 0x40
 80007b8:	a80e      	add	r0, sp, #56	; 0x38
 80007ba:	f001 f805 	bl	80017c8 <xatoi>
 80007be:	2800      	cmp	r0, #0
 80007c0:	f43f ada4 	beq.w	800030c <main+0xac>
 80007c4:	e7e4      	b.n	8000790 <main+0x530>
				xprintf("PD#:%u LBA:%lu\n", drv, sect++);
 80007c6:	4632      	mov	r2, r6
 80007c8:	4641      	mov	r1, r8
 80007ca:	481e      	ldr	r0, [pc, #120]	; (8000844 <main+0x5e4>)
 80007cc:	f000 ff38 	bl	8001640 <xprintf>
 80007d0:	1c77      	adds	r7, r6, #1
				for (ptr=(char*)Buff, ofs = 0; ofs < 0x200; ptr += 16, ofs += 16)
 80007d2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
					put_dump((BYTE*)ptr, ofs, 16, DW_CHAR);
 80007d6:	2301      	movs	r3, #1
 80007d8:	4651      	mov	r1, sl
 80007da:	2210      	movs	r2, #16
 80007dc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80007de:	f000 ff67 	bl	80016b0 <put_dump>
				for (ptr=(char*)Buff, ofs = 0; ofs < 0x200; ptr += 16, ofs += 16)
 80007e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80007e4:	f10a 0a10 	add.w	sl, sl, #16
 80007e8:	3310      	adds	r3, #16
 80007ea:	f5ba 7f00 	cmp.w	sl, #512	; 0x200
 80007ee:	930e      	str	r3, [sp, #56]	; 0x38
 80007f0:	d1f1      	bne.n	80007d6 <main+0x576>
 80007f2:	e58b      	b.n	800030c <main+0xac>
				if (!xatoi(&ptr, &p1)) break;
 80007f4:	a90f      	add	r1, sp, #60	; 0x3c
 80007f6:	a80e      	add	r0, sp, #56	; 0x38
 80007f8:	f000 ffe6 	bl	80017c8 <xatoi>
 80007fc:	2800      	cmp	r0, #0
 80007fe:	f43f ad85 	beq.w	800030c <main+0xac>
				xprintf("rc=%d\n", (WORD)disk_initialize((BYTE)p1));
 8000802:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8000806:	f001 fad1 	bl	8001dac <disk_initialize>
 800080a:	4601      	mov	r1, r0
 800080c:	4804      	ldr	r0, [pc, #16]	; (8000820 <main+0x5c0>)
 800080e:	f000 ff17 	bl	8001640 <xprintf>
				break;
 8000812:	e57b      	b.n	800030c <main+0xac>
 8000814:	2000198f 	.word	0x2000198f
 8000818:	0800565b 	.word	0x0800565b
 800081c:	2000198e 	.word	0x2000198e
 8000820:	08005675 	.word	0x08005675
 8000824:	0800568c 	.word	0x0800568c
 8000828:	080056a5 	.word	0x080056a5
 800082c:	080056be 	.word	0x080056be
 8000830:	2000095c 	.word	0x2000095c
 8000834:	080056ce 	.word	0x080056ce
 8000838:	080056d4 	.word	0x080056d4
 800083c:	080056da 	.word	0x080056da
 8000840:	080056e0 	.word	0x080056e0
 8000844:	0800567c 	.word	0x0800567c
 8000848:	08005668 	.word	0x08005668
 800084c:	0800564e 	.word	0x0800564e
					if (!xatoi(&ptr, &p1) || !xatoi(&ptr, (long*)&blk[0]) || !xatoi(&ptr, (long*)&blk[1])) break;
 8000850:	a90f      	add	r1, sp, #60	; 0x3c
 8000852:	a80e      	add	r0, sp, #56	; 0x38
 8000854:	f000 ffb8 	bl	80017c8 <xatoi>
 8000858:	2800      	cmp	r0, #0
 800085a:	f43f ad57 	beq.w	800030c <main+0xac>
 800085e:	a916      	add	r1, sp, #88	; 0x58
 8000860:	a80e      	add	r0, sp, #56	; 0x38
 8000862:	f000 ffb1 	bl	80017c8 <xatoi>
 8000866:	2800      	cmp	r0, #0
 8000868:	f43f ad50 	beq.w	800030c <main+0xac>
 800086c:	a917      	add	r1, sp, #92	; 0x5c
 800086e:	a80e      	add	r0, sp, #56	; 0x38
 8000870:	f000 ffaa 	bl	80017c8 <xatoi>
 8000874:	2800      	cmp	r0, #0
 8000876:	f43f ad49 	beq.w	800030c <main+0xac>
					xprintf("rc=%d\n", disk_ioctl((BYTE)p1, CTRL_TRIM, blk));
 800087a:	aa16      	add	r2, sp, #88	; 0x58
 800087c:	2104      	movs	r1, #4
 800087e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8000882:	f001 fc1f 	bl	80020c4 <disk_ioctl>
 8000886:	4601      	mov	r1, r0
 8000888:	489f      	ldr	r0, [pc, #636]	; (8000b08 <main+0x8a8>)
 800088a:	f000 fed9 	bl	8001640 <xprintf>
					break;
 800088e:	e53d      	b.n	800030c <main+0xac>
			switch (*ptr++) {
 8000890:	2b72      	cmp	r3, #114	; 0x72
 8000892:	d05d      	beq.n	8000950 <main+0x6f0>
 8000894:	2b77      	cmp	r3, #119	; 0x77
 8000896:	f47f ad39 	bne.w	800030c <main+0xac>
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
 800089a:	a90f      	add	r1, sp, #60	; 0x3c
 800089c:	a80e      	add	r0, sp, #56	; 0x38
 800089e:	f000 ff93 	bl	80017c8 <xatoi>
 80008a2:	2800      	cmp	r0, #0
 80008a4:	f43f ad32 	beq.w	800030c <main+0xac>
 80008a8:	a910      	add	r1, sp, #64	; 0x40
 80008aa:	a80e      	add	r0, sp, #56	; 0x38
 80008ac:	f000 ff8c 	bl	80017c8 <xatoi>
 80008b0:	2800      	cmp	r0, #0
 80008b2:	f43f ad2b 	beq.w	800030c <main+0xac>
				if (!xatoi(&ptr, &p3)) p3 = 1;
 80008b6:	a911      	add	r1, sp, #68	; 0x44
 80008b8:	a80e      	add	r0, sp, #56	; 0x38
 80008ba:	f000 ff85 	bl	80017c8 <xatoi>
 80008be:	b908      	cbnz	r0, 80008c4 <main+0x664>
 80008c0:	2301      	movs	r3, #1
 80008c2:	9311      	str	r3, [sp, #68]	; 0x44
				xprintf("rc=%u\n", (WORD)disk_write((BYTE)p1, Buff, p2, p3));
 80008c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80008c8:	4990      	ldr	r1, [pc, #576]	; (8000b0c <main+0x8ac>)
 80008ca:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80008ce:	f001 fb95 	bl	8001ffc <disk_write>
 80008d2:	4601      	mov	r1, r0
 80008d4:	488e      	ldr	r0, [pc, #568]	; (8000b10 <main+0x8b0>)
 80008d6:	f000 feb3 	bl	8001640 <xprintf>
				break;
 80008da:	e517      	b.n	800030c <main+0xac>
				if (!xatoi(&ptr, &p1)) break;
 80008dc:	a90f      	add	r1, sp, #60	; 0x3c
 80008de:	a80e      	add	r0, sp, #56	; 0x38
 80008e0:	f000 ff72 	bl	80017c8 <xatoi>
 80008e4:	2800      	cmp	r0, #0
 80008e6:	f43f ad11 	beq.w	800030c <main+0xac>
 80008ea:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
				for (ptr=(char*)&Buff[p1], ofs = p1, cnt = 32; cnt; cnt--, ptr+=16, ofs+=16)
 80008ec:	4b87      	ldr	r3, [pc, #540]	; (8000b0c <main+0x8ac>)
 80008ee:	4433      	add	r3, r6
 80008f0:	930e      	str	r3, [sp, #56]	; 0x38
 80008f2:	2320      	movs	r3, #32
 80008f4:	9314      	str	r3, [sp, #80]	; 0x50
 80008f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	f43f ad07 	beq.w	800030c <main+0xac>
					put_dump((BYTE*)ptr, ofs, 16, DW_CHAR);
 80008fe:	2301      	movs	r3, #1
 8000900:	4631      	mov	r1, r6
 8000902:	2210      	movs	r2, #16
 8000904:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000906:	f000 fed3 	bl	80016b0 <put_dump>
				for (ptr=(char*)&Buff[p1], ofs = p1, cnt = 32; cnt; cnt--, ptr+=16, ofs+=16)
 800090a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800090c:	3610      	adds	r6, #16
 800090e:	3b01      	subs	r3, #1
 8000910:	9314      	str	r3, [sp, #80]	; 0x50
 8000912:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000914:	3310      	adds	r3, #16
 8000916:	930e      	str	r3, [sp, #56]	; 0x38
 8000918:	e7ed      	b.n	80008f6 <main+0x696>
						Buff[p1++] = (BYTE)p2;
 800091a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
					} while (xatoi(&ptr, &p2));
 800091c:	a910      	add	r1, sp, #64	; 0x40
						Buff[p1++] = (BYTE)p2;
 800091e:	1c5a      	adds	r2, r3, #1
 8000920:	920f      	str	r2, [sp, #60]	; 0x3c
 8000922:	9a10      	ldr	r2, [sp, #64]	; 0x40
					} while (xatoi(&ptr, &p2));
 8000924:	a80e      	add	r0, sp, #56	; 0x38
						Buff[p1++] = (BYTE)p2;
 8000926:	54f2      	strb	r2, [r6, r3]
					} while (xatoi(&ptr, &p2));
 8000928:	f000 ff4e 	bl	80017c8 <xatoi>
 800092c:	2800      	cmp	r0, #0
 800092e:	d1f4      	bne.n	800091a <main+0x6ba>
 8000930:	e4ec      	b.n	800030c <main+0xac>
					if (xatoi(&ptr, &p2))
 8000932:	a910      	add	r1, sp, #64	; 0x40
 8000934:	a80e      	add	r0, sp, #56	; 0x38
 8000936:	f000 ff47 	bl	80017c8 <xatoi>
 800093a:	b128      	cbz	r0, 8000948 <main+0x6e8>
						Buff[p1++] = (BYTE)p2;
 800093c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800093e:	1c5a      	adds	r2, r3, #1
 8000940:	920f      	str	r2, [sp, #60]	; 0x3c
 8000942:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8000944:	54f2      	strb	r2, [r6, r3]
 8000946:	e513      	b.n	8000370 <main+0x110>
						xputs("???\n");
 8000948:	4648      	mov	r0, r9
 800094a:	f000 fd85 	bl	8001458 <xputs>
 800094e:	e50f      	b.n	8000370 <main+0x110>
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
 8000950:	a90f      	add	r1, sp, #60	; 0x3c
 8000952:	a80e      	add	r0, sp, #56	; 0x38
 8000954:	f000 ff38 	bl	80017c8 <xatoi>
 8000958:	2800      	cmp	r0, #0
 800095a:	f43f acd7 	beq.w	800030c <main+0xac>
 800095e:	a910      	add	r1, sp, #64	; 0x40
 8000960:	a80e      	add	r0, sp, #56	; 0x38
 8000962:	f000 ff31 	bl	80017c8 <xatoi>
 8000966:	2800      	cmp	r0, #0
 8000968:	f43f acd0 	beq.w	800030c <main+0xac>
				if (!xatoi(&ptr, &p3)) p3 = 1;
 800096c:	a911      	add	r1, sp, #68	; 0x44
 800096e:	a80e      	add	r0, sp, #56	; 0x38
 8000970:	f000 ff2a 	bl	80017c8 <xatoi>
 8000974:	b908      	cbnz	r0, 800097a <main+0x71a>
 8000976:	2301      	movs	r3, #1
 8000978:	9311      	str	r3, [sp, #68]	; 0x44
				xprintf("rc=%u\n", (WORD)disk_read((BYTE)p1, Buff, p2, p3));
 800097a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800097e:	4963      	ldr	r1, [pc, #396]	; (8000b0c <main+0x8ac>)
 8000980:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8000984:	f001 fafa 	bl	8001f7c <disk_read>
 8000988:	4601      	mov	r1, r0
 800098a:	4861      	ldr	r0, [pc, #388]	; (8000b10 <main+0x8b0>)
 800098c:	f000 fe58 	bl	8001640 <xprintf>
				break;
 8000990:	e4bc      	b.n	800030c <main+0xac>
				if (!xatoi(&ptr, &p1)) break;
 8000992:	a90f      	add	r1, sp, #60	; 0x3c
 8000994:	a80e      	add	r0, sp, #56	; 0x38
 8000996:	f000 ff17 	bl	80017c8 <xatoi>
 800099a:	2800      	cmp	r0, #0
 800099c:	f43f acb6 	beq.w	800030c <main+0xac>
				memset(Buff, (BYTE)p1, sizeof Buff);
 80009a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009a4:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 80009a8:	4858      	ldr	r0, [pc, #352]	; (8000b0c <main+0x8ac>)
 80009aa:	f004 f965 	bl	8004c78 <memset>
				break;
 80009ae:	e4ad      	b.n	800030c <main+0xac>

			case 'i' :	/* fi [<opt>]- Initialize logical drive */
				if (!xatoi(&ptr, &p2)) p2 = 0;
 80009b0:	a910      	add	r1, sp, #64	; 0x40
 80009b2:	a80e      	add	r0, sp, #56	; 0x38
 80009b4:	f000 ff08 	bl	80017c8 <xatoi>
 80009b8:	b900      	cbnz	r0, 80009bc <main+0x75c>
 80009ba:	9010      	str	r0, [sp, #64]	; 0x40
				put_rc(f_mount(&FatFs, "", (BYTE)p2));
 80009bc:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80009c0:	4954      	ldr	r1, [pc, #336]	; (8000b14 <main+0x8b4>)
 80009c2:	4855      	ldr	r0, [pc, #340]	; (8000b18 <main+0x8b8>)
 80009c4:	f002 fe52 	bl	800366c <f_mount>
 80009c8:	f7ff fbb4 	bl	8000134 <put_rc>
				break;
 80009cc:	e49e      	b.n	800030c <main+0xac>

			case 's' :	/* fs [<path>] - Show volume status */
				while (*ptr == ' ') ptr++;
 80009ce:	3001      	adds	r0, #1
 80009d0:	900e      	str	r0, [sp, #56]	; 0x38
 80009d2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80009d4:	7803      	ldrb	r3, [r0, #0]
 80009d6:	2b20      	cmp	r3, #32
 80009d8:	d0f9      	beq.n	80009ce <main+0x76e>
				res = f_getfree(ptr, (DWORD*)&p1, &fs);
 80009da:	aa15      	add	r2, sp, #84	; 0x54
 80009dc:	a90f      	add	r1, sp, #60	; 0x3c
 80009de:	f003 fadc 	bl	8003f9a <f_getfree>
				if (res) { put_rc(res); break; }
 80009e2:	b110      	cbz	r0, 80009ea <main+0x78a>
 80009e4:	f7ff fba6 	bl	8000134 <put_rc>
 80009e8:	e490      	b.n	800030c <main+0xac>
				xprintf("FAT type = %s\n", ft[fs->fs_type]);
 80009ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80009ec:	484b      	ldr	r0, [pc, #300]	; (8000b1c <main+0x8bc>)
 80009ee:	781a      	ldrb	r2, [r3, #0]
 80009f0:	4b4b      	ldr	r3, [pc, #300]	; (8000b20 <main+0x8c0>)
 80009f2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80009f6:	f8d3 166c 	ldr.w	r1, [r3, #1644]	; 0x66c
 80009fa:	f000 fe21 	bl	8001640 <xprintf>
				xprintf("Bytes/Cluster = %lu\n", (DWORD)fs->csize * 512);
 80009fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8000a00:	4848      	ldr	r0, [pc, #288]	; (8000b24 <main+0x8c4>)
 8000a02:	8959      	ldrh	r1, [r3, #10]
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	f000 fe1b 	bl	8001640 <xprintf>
				xprintf("Number of FATs = %u\n", fs->n_fats);
 8000a0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8000a0c:	4846      	ldr	r0, [pc, #280]	; (8000b28 <main+0x8c8>)
 8000a0e:	7899      	ldrb	r1, [r3, #2]
 8000a10:	f000 fe16 	bl	8001640 <xprintf>
				if (fs->fs_type < FS_FAT32) xprintf("Root DIR entries = %u\n", fs->n_rootdir);
 8000a14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8000a16:	781a      	ldrb	r2, [r3, #0]
 8000a18:	2a02      	cmp	r2, #2
 8000a1a:	d803      	bhi.n	8000a24 <main+0x7c4>
 8000a1c:	8919      	ldrh	r1, [r3, #8]
 8000a1e:	4843      	ldr	r0, [pc, #268]	; (8000b2c <main+0x8cc>)
 8000a20:	f000 fe0e 	bl	8001640 <xprintf>
				xprintf("Sectors/FAT = %lu\n", fs->fsize);
 8000a24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8000a26:	4842      	ldr	r0, [pc, #264]	; (8000b30 <main+0x8d0>)
 8000a28:	6a19      	ldr	r1, [r3, #32]
 8000a2a:	f000 fe09 	bl	8001640 <xprintf>
				xprintf("Number of clusters = %lu\n", (DWORD)fs->n_fatent - 2);
 8000a2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8000a30:	4840      	ldr	r0, [pc, #256]	; (8000b34 <main+0x8d4>)
 8000a32:	69d9      	ldr	r1, [r3, #28]
				xprintf("Volume start (lba) = %lu\n", fs->volbase);
				xprintf("FAT start (lba) = %lu\n", fs->fatbase);
				xprintf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
				xprintf("Data start (lba) = %lu\n\n", fs->database);
#if FF_USE_LABEL
				res = f_getlabel(ptr, (char*)Buff, (DWORD*)&p2);
 8000a34:	4e35      	ldr	r6, [pc, #212]	; (8000b0c <main+0x8ac>)
				xprintf("Number of clusters = %lu\n", (DWORD)fs->n_fatent - 2);
 8000a36:	3902      	subs	r1, #2
 8000a38:	f000 fe02 	bl	8001640 <xprintf>
				xprintf("Volume start (lba) = %lu\n", fs->volbase);
 8000a3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8000a3e:	483e      	ldr	r0, [pc, #248]	; (8000b38 <main+0x8d8>)
 8000a40:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000a42:	f000 fdfd 	bl	8001640 <xprintf>
				xprintf("FAT start (lba) = %lu\n", fs->fatbase);
 8000a46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8000a48:	483c      	ldr	r0, [pc, #240]	; (8000b3c <main+0x8dc>)
 8000a4a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000a4c:	f000 fdf8 	bl	8001640 <xprintf>
				xprintf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
 8000a50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8000a52:	483b      	ldr	r0, [pc, #236]	; (8000b40 <main+0x8e0>)
 8000a54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a56:	f000 fdf3 	bl	8001640 <xprintf>
				xprintf("Data start (lba) = %lu\n\n", fs->database);
 8000a5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8000a5c:	4839      	ldr	r0, [pc, #228]	; (8000b44 <main+0x8e4>)
 8000a5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a60:	f000 fdee 	bl	8001640 <xprintf>
				res = f_getlabel(ptr, (char*)Buff, (DWORD*)&p2);
 8000a64:	aa10      	add	r2, sp, #64	; 0x40
 8000a66:	4631      	mov	r1, r6
 8000a68:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000a6a:	f003 fd04 	bl	8004476 <f_getlabel>
				if (res) { put_rc(res); break; }
 8000a6e:	4681      	mov	r9, r0
 8000a70:	b110      	cbz	r0, 8000a78 <main+0x818>
 8000a72:	f7ff fb5f 	bl	8000134 <put_rc>
 8000a76:	e449      	b.n	800030c <main+0xac>
				xprintf(Buff[0] ? "Volume name is %s\n" : "No volume label\n", (char*)Buff);
 8000a78:	4b33      	ldr	r3, [pc, #204]	; (8000b48 <main+0x8e8>)
 8000a7a:	7830      	ldrb	r0, [r6, #0]
 8000a7c:	4a33      	ldr	r2, [pc, #204]	; (8000b4c <main+0x8ec>)
 8000a7e:	4631      	mov	r1, r6
 8000a80:	2800      	cmp	r0, #0
 8000a82:	bf0c      	ite	eq
 8000a84:	4610      	moveq	r0, r2
 8000a86:	4618      	movne	r0, r3
 8000a88:	f000 fdda 	bl	8001640 <xprintf>
				xprintf("Volume S/N is %04X-%04X\n", (DWORD)p2 >> 16, (DWORD)p2 & 0xFFFF);
 8000a8c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000a8e:	4830      	ldr	r0, [pc, #192]	; (8000b50 <main+0x8f0>)
 8000a90:	b28a      	uxth	r2, r1
#endif
				AccSize = AccFiles = AccDirs = 0;
 8000a92:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8000b64 <main+0x904>
				xprintf("Volume S/N is %04X-%04X\n", (DWORD)p2 >> 16, (DWORD)p2 & 0xFFFF);
 8000a96:	0c09      	lsrs	r1, r1, #16
				AccSize = AccFiles = AccDirs = 0;
 8000a98:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8000b68 <main+0x908>
 8000a9c:	4e2d      	ldr	r6, [pc, #180]	; (8000b54 <main+0x8f4>)
				xprintf("Volume S/N is %04X-%04X\n", (DWORD)p2 >> 16, (DWORD)p2 & 0xFFFF);
 8000a9e:	f000 fdcf 	bl	8001640 <xprintf>
				xprintf("...");
 8000aa2:	482d      	ldr	r0, [pc, #180]	; (8000b58 <main+0x8f8>)
				AccSize = AccFiles = AccDirs = 0;
 8000aa4:	f8ab 9000 	strh.w	r9, [fp]
 8000aa8:	f8aa 9000 	strh.w	r9, [sl]
 8000aac:	f8c6 9000 	str.w	r9, [r6]
				xprintf("...");
 8000ab0:	f000 fdc6 	bl	8001640 <xprintf>
				res = scan_files(ptr);
 8000ab4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000ab6:	f7ff fb53 	bl	8000160 <scan_files>
				if (res) { put_rc(res); break; }
 8000aba:	b110      	cbz	r0, 8000ac2 <main+0x862>
 8000abc:	f7ff fb3a 	bl	8000134 <put_rc>
 8000ac0:	e424      	b.n	800030c <main+0xac>
				xprintf("\r%u files, %lu bytes.\n%u folders.\n"
						"%lu KiB total disk space.\n%lu KiB available.\n",
						AccFiles, AccSize, AccDirs,
						(fs->n_fatent - 2) * (fs->csize / 2), (DWORD)p1 * (fs->csize / 2)
 8000ac2:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
				xprintf("\r%u files, %lu bytes.\n%u folders.\n"
 8000ac6:	980f      	ldr	r0, [sp, #60]	; 0x3c
						(fs->n_fatent - 2) * (fs->csize / 2), (DWORD)p1 * (fs->csize / 2)
 8000ac8:	f8bc 200a 	ldrh.w	r2, [ip, #10]
				xprintf("\r%u files, %lu bytes.\n%u folders.\n"
 8000acc:	f8bb 3000 	ldrh.w	r3, [fp]
						(fs->n_fatent - 2) * (fs->csize / 2), (DWORD)p1 * (fs->csize / 2)
 8000ad0:	0852      	lsrs	r2, r2, #1
				xprintf("\r%u files, %lu bytes.\n%u folders.\n"
 8000ad2:	4350      	muls	r0, r2
 8000ad4:	f8ba 1000 	ldrh.w	r1, [sl]
 8000ad8:	9001      	str	r0, [sp, #4]
						(fs->n_fatent - 2) * (fs->csize / 2), (DWORD)p1 * (fs->csize / 2)
 8000ada:	f8dc 001c 	ldr.w	r0, [ip, #28]
 8000ade:	3802      	subs	r0, #2
				xprintf("\r%u files, %lu bytes.\n%u folders.\n"
 8000ae0:	4342      	muls	r2, r0
 8000ae2:	9200      	str	r2, [sp, #0]
 8000ae4:	6832      	ldr	r2, [r6, #0]
 8000ae6:	481d      	ldr	r0, [pc, #116]	; (8000b5c <main+0x8fc>)
 8000ae8:	f000 fdaa 	bl	8001640 <xprintf>
				);
				break;
 8000aec:	e40e      	b.n	800030c <main+0xac>

			case 'l' :	/* fl [<path>] - Directory listing */
				while (*ptr == ' ') ptr++;
 8000aee:	3101      	adds	r1, #1
 8000af0:	910e      	str	r1, [sp, #56]	; 0x38
 8000af2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8000af4:	780b      	ldrb	r3, [r1, #0]
 8000af6:	2b20      	cmp	r3, #32
 8000af8:	d0f9      	beq.n	8000aee <main+0x88e>
				res = f_opendir(&Dir, ptr);
 8000afa:	4819      	ldr	r0, [pc, #100]	; (8000b60 <main+0x900>)
 8000afc:	f003 f9d2 	bl	8003ea4 <f_opendir>
				if (res) { put_rc(res); break; }
 8000b00:	b3a0      	cbz	r0, 8000b6c <main+0x90c>
 8000b02:	f7ff fb17 	bl	8000134 <put_rc>
 8000b06:	e401      	b.n	800030c <main+0xac>
 8000b08:	08005675 	.word	0x08005675
 8000b0c:	2000095c 	.word	0x2000095c
 8000b10:	080056fc 	.word	0x080056fc
 8000b14:	080057e8 	.word	0x080057e8
 8000b18:	20000234 	.word	0x20000234
 8000b1c:	08005703 	.word	0x08005703
 8000b20:	08004f0c 	.word	0x08004f0c
 8000b24:	08005712 	.word	0x08005712
 8000b28:	08005727 	.word	0x08005727
 8000b2c:	0800573c 	.word	0x0800573c
 8000b30:	08005753 	.word	0x08005753
 8000b34:	08005766 	.word	0x08005766
 8000b38:	08005780 	.word	0x08005780
 8000b3c:	0800579a 	.word	0x0800579a
 8000b40:	080057b1 	.word	0x080057b1
 8000b44:	080057d0 	.word	0x080057d0
 8000b48:	080055b5 	.word	0x080055b5
 8000b4c:	080055c8 	.word	0x080055c8
 8000b50:	080057e9 	.word	0x080057e9
 8000b54:	20000958 	.word	0x20000958
 8000b58:	08005938 	.word	0x08005938
 8000b5c:	08005802 	.word	0x08005802
 8000b60:	2000195c 	.word	0x2000195c
 8000b64:	20001a8c 	.word	0x20001a8c
 8000b68:	20001a8e 	.word	0x20001a8e
				p1 = s1 = s2 = 0;
 8000b6c:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
				for(;;) {
					res = f_readdir(&Dir, &Finfo);
 8000b70:	4ead      	ldr	r6, [pc, #692]	; (8000e28 <main+0xbc8>)
 8000b72:	f8df b2dc 	ldr.w	fp, [pc, #732]	; 8000e50 <main+0xbf0>
				p1 = s1 = s2 = 0;
 8000b76:	900f      	str	r0, [sp, #60]	; 0x3c
					res = f_readdir(&Dir, &Finfo);
 8000b78:	49ab      	ldr	r1, [pc, #684]	; (8000e28 <main+0xbc8>)
 8000b7a:	4658      	mov	r0, fp
 8000b7c:	f003 f9cf 	bl	8003f1e <f_readdir>
					if ((res != FR_OK) || !Finfo.fname[0]) break;
 8000b80:	2800      	cmp	r0, #0
 8000b82:	d14c      	bne.n	8000c1e <main+0x9be>
 8000b84:	7db3      	ldrb	r3, [r6, #22]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d049      	beq.n	8000c1e <main+0x9be>
					if (Finfo.fattrib & AM_DIR) {
 8000b8a:	7a30      	ldrb	r0, [r6, #8]
 8000b8c:	6833      	ldr	r3, [r6, #0]
 8000b8e:	06c2      	lsls	r2, r0, #27
 8000b90:	d53d      	bpl.n	8000c0e <main+0x9ae>
						s2++;
					} else {
						s1++; p1 += Finfo.fsize;
					}
					xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s\n",
 8000b92:	2144      	movs	r1, #68	; 0x44
						s2++;
 8000b94:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8000b96:	3201      	adds	r2, #1
 8000b98:	9213      	str	r2, [sp, #76]	; 0x4c
					xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s\n",
 8000b9a:	f010 0f01 	tst.w	r0, #1
 8000b9e:	bf0c      	ite	eq
 8000ba0:	222d      	moveq	r2, #45	; 0x2d
 8000ba2:	2252      	movne	r2, #82	; 0x52
 8000ba4:	f010 0f02 	tst.w	r0, #2
 8000ba8:	bf0c      	ite	eq
 8000baa:	f04f 0e2d 	moveq.w	lr, #45	; 0x2d
 8000bae:	f04f 0e48 	movne.w	lr, #72	; 0x48
 8000bb2:	f010 0f04 	tst.w	r0, #4
 8000bb6:	bf0c      	ite	eq
 8000bb8:	f04f 092d 	moveq.w	r9, #45	; 0x2d
 8000bbc:	f04f 0953 	movne.w	r9, #83	; 0x53
 8000bc0:	f010 0f20 	tst.w	r0, #32
 8000bc4:	bf0c      	ite	eq
 8000bc6:	f04f 0a2d 	moveq.w	sl, #45	; 0x2d
 8000bca:	f04f 0a41 	movne.w	sl, #65	; 0x41
							(Finfo.fattrib & AM_RDO) ? 'R' : '-',
							(Finfo.fattrib & AM_HID) ? 'H' : '-',
							(Finfo.fattrib & AM_SYS) ? 'S' : '-',
							(Finfo.fattrib & AM_ARC) ? 'A' : '-',
							(Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15, Finfo.fdate & 31,
							(Finfo.ftime >> 11), (Finfo.ftime >> 5) & 63,
 8000bce:	f8b6 c006 	ldrh.w	ip, [r6, #6]
					xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s\n",
 8000bd2:	920b      	str	r2, [sp, #44]	; 0x2c
 8000bd4:	4a95      	ldr	r2, [pc, #596]	; (8000e2c <main+0xbcc>)
							(Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15, Finfo.fdate & 31,
 8000bd6:	88b0      	ldrh	r0, [r6, #4]
					xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s\n",
 8000bd8:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8000bdc:	f3cc 1345 	ubfx	r3, ip, #5, #6
 8000be0:	9306      	str	r3, [sp, #24]
 8000be2:	ea4f 23dc 	mov.w	r3, ip, lsr #11
 8000be6:	9305      	str	r3, [sp, #20]
 8000be8:	f000 031f 	and.w	r3, r0, #31
 8000bec:	9304      	str	r3, [sp, #16]
 8000bee:	f3c0 1343 	ubfx	r3, r0, #5, #4
							(Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15, Finfo.fdate & 31,
 8000bf2:	0a40      	lsrs	r0, r0, #9
					xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s\n",
 8000bf4:	f200 70bc 	addw	r0, r0, #1980	; 0x7bc
 8000bf8:	9303      	str	r3, [sp, #12]
 8000bfa:	e9cd a001 	strd	sl, r0, [sp, #4]
 8000bfe:	f8cd 9000 	str.w	r9, [sp]
 8000c02:	4673      	mov	r3, lr
 8000c04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000c06:	488a      	ldr	r0, [pc, #552]	; (8000e30 <main+0xbd0>)
 8000c08:	f000 fd1a 	bl	8001640 <xprintf>
					res = f_readdir(&Dir, &Finfo);
 8000c0c:	e7b4      	b.n	8000b78 <main+0x918>
						s1++; p1 += Finfo.fsize;
 8000c0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
					xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s\n",
 8000c10:	212d      	movs	r1, #45	; 0x2d
						s1++; p1 += Finfo.fsize;
 8000c12:	3201      	adds	r2, #1
 8000c14:	9212      	str	r2, [sp, #72]	; 0x48
 8000c16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8000c18:	441a      	add	r2, r3
 8000c1a:	920f      	str	r2, [sp, #60]	; 0x3c
 8000c1c:	e7bd      	b.n	8000b9a <main+0x93a>
							Finfo.fsize, Finfo.fname);
				}
				xprintf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
 8000c1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8000c20:	9912      	ldr	r1, [sp, #72]	; 0x48
 8000c22:	4884      	ldr	r0, [pc, #528]	; (8000e34 <main+0xbd4>)
 8000c24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8000c26:	f000 fd0b 	bl	8001640 <xprintf>
				res = f_getfree(ptr, (DWORD*)&p1, &fs);
 8000c2a:	aa15      	add	r2, sp, #84	; 0x54
 8000c2c:	a90f      	add	r1, sp, #60	; 0x3c
 8000c2e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000c30:	f003 f9b3 	bl	8003f9a <f_getfree>
				if (res == FR_OK)
 8000c34:	b948      	cbnz	r0, 8000c4a <main+0x9ea>
					xprintf(", %10lu bytes free\n", p1 * fs->csize * 512);
 8000c36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8000c38:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8000c3a:	895b      	ldrh	r3, [r3, #10]
 8000c3c:	487e      	ldr	r0, [pc, #504]	; (8000e38 <main+0xbd8>)
 8000c3e:	4359      	muls	r1, r3
 8000c40:	0249      	lsls	r1, r1, #9
 8000c42:	f000 fcfd 	bl	8001640 <xprintf>
 8000c46:	f7ff bb61 	b.w	800030c <main+0xac>
				else
					put_rc(res);
 8000c4a:	f7ff fa73 	bl	8000134 <put_rc>
 8000c4e:	f7ff bb5d 	b.w	800030c <main+0xac>
				break;

			case 'o' :	/* fo <mode> <file> - Open a file */
				if (!xatoi(&ptr, &p1)) break;
 8000c52:	a90f      	add	r1, sp, #60	; 0x3c
 8000c54:	a80e      	add	r0, sp, #56	; 0x38
 8000c56:	f000 fdb7 	bl	80017c8 <xatoi>
 8000c5a:	2800      	cmp	r0, #0
 8000c5c:	f43f ab56 	beq.w	800030c <main+0xac>
				while (*ptr == ' ') ptr++;
 8000c60:	990e      	ldr	r1, [sp, #56]	; 0x38
 8000c62:	780b      	ldrb	r3, [r1, #0]
 8000c64:	2b20      	cmp	r3, #32
 8000c66:	d008      	beq.n	8000c7a <main+0xa1a>
				put_rc(f_open(&File[0], ptr, (BYTE)p1));
 8000c68:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8000c6c:	4873      	ldr	r0, [pc, #460]	; (8000e3c <main+0xbdc>)
 8000c6e:	f002 fd23 	bl	80036b8 <f_open>
 8000c72:	f7ff fa5f 	bl	8000134 <put_rc>
				break;
 8000c76:	f7ff bb49 	b.w	800030c <main+0xac>
				while (*ptr == ' ') ptr++;
 8000c7a:	3101      	adds	r1, #1
 8000c7c:	910e      	str	r1, [sp, #56]	; 0x38
 8000c7e:	e7ef      	b.n	8000c60 <main+0xa00>

			case 'c' :	/* fc - Close a file */
				put_rc(f_close(&File[0]));
 8000c80:	486e      	ldr	r0, [pc, #440]	; (8000e3c <main+0xbdc>)
 8000c82:	f002 ffa4 	bl	8003bce <f_close>
 8000c86:	f7ff fa55 	bl	8000134 <put_rc>
				break;
 8000c8a:	f7ff bb3f 	b.w	800030c <main+0xac>

			case 'e' :	/* fe - Seek file pointer */
				if (!xatoi(&ptr, &p1)) break;
 8000c8e:	a90f      	add	r1, sp, #60	; 0x3c
 8000c90:	a80e      	add	r0, sp, #56	; 0x38
 8000c92:	f000 fd99 	bl	80017c8 <xatoi>
 8000c96:	2800      	cmp	r0, #0
 8000c98:	f43f ab38 	beq.w	800030c <main+0xac>
				res = f_lseek(&File[0], p1);
 8000c9c:	4e67      	ldr	r6, [pc, #412]	; (8000e3c <main+0xbdc>)
 8000c9e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8000ca0:	4630      	mov	r0, r6
 8000ca2:	f003 f866 	bl	8003d72 <f_lseek>
 8000ca6:	4681      	mov	r9, r0
				put_rc(res);
 8000ca8:	f7ff fa44 	bl	8000134 <put_rc>
				if (res == FR_OK)
 8000cac:	f1b9 0f00 	cmp.w	r9, #0
 8000cb0:	f47f ab2c 	bne.w	800030c <main+0xac>
					xprintf("fptr=%lu(0x%lX)\n", File[0].fptr, File[0].fptr);
 8000cb4:	6972      	ldr	r2, [r6, #20]
 8000cb6:	4862      	ldr	r0, [pc, #392]	; (8000e40 <main+0xbe0>)
 8000cb8:	4611      	mov	r1, r2
 8000cba:	f000 fcc1 	bl	8001640 <xprintf>
 8000cbe:	f7ff bb25 	b.w	800030c <main+0xac>
				break;

			case 'd' :	/* fd <len> - read and dump file from current fp */
				if (!xatoi(&ptr, &p1)) break;
 8000cc2:	a90f      	add	r1, sp, #60	; 0x3c
 8000cc4:	a80e      	add	r0, sp, #56	; 0x38
 8000cc6:	f000 fd7f 	bl	80017c8 <xatoi>
 8000cca:	2800      	cmp	r0, #0
 8000ccc:	f43f ab1e 	beq.w	800030c <main+0xac>
				ofs = File[0].fptr;
				while (p1) {
					if ((UINT)p1 >= 16) { cnt = 16; p1 -= 16; }
					else 				{ cnt = p1; p1 = 0; }
 8000cd0:	f04f 0b00 	mov.w	fp, #0
				ofs = File[0].fptr;
 8000cd4:	4e59      	ldr	r6, [pc, #356]	; (8000e3c <main+0xbdc>)
					res = f_read(&File[0], Buff, cnt, &cnt);
 8000cd6:	f8df a170 	ldr.w	sl, [pc, #368]	; 8000e48 <main+0xbe8>
				ofs = File[0].fptr;
 8000cda:	f8d6 9014 	ldr.w	r9, [r6, #20]
				while (p1) {
 8000cde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	f43f ab13 	beq.w	800030c <main+0xac>
					if ((UINT)p1 >= 16) { cnt = 16; p1 -= 16; }
 8000ce6:	2b0f      	cmp	r3, #15
 8000ce8:	bf85      	ittet	hi
 8000cea:	2210      	movhi	r2, #16
 8000cec:	3b10      	subhi	r3, #16
					else 				{ cnt = p1; p1 = 0; }
 8000cee:	9314      	strls	r3, [sp, #80]	; 0x50
					if ((UINT)p1 >= 16) { cnt = 16; p1 -= 16; }
 8000cf0:	9214      	strhi	r2, [sp, #80]	; 0x50
 8000cf2:	bf88      	it	hi
 8000cf4:	930f      	strhi	r3, [sp, #60]	; 0x3c
					res = f_read(&File[0], Buff, cnt, &cnt);
 8000cf6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000cf8:	ab14      	add	r3, sp, #80	; 0x50
 8000cfa:	4651      	mov	r1, sl
 8000cfc:	4630      	mov	r0, r6
					else 				{ cnt = p1; p1 = 0; }
 8000cfe:	bf98      	it	ls
 8000d00:	f8cd b03c 	strls.w	fp, [sp, #60]	; 0x3c
					res = f_read(&File[0], Buff, cnt, &cnt);
 8000d04:	f002 fdb6 	bl	8003874 <f_read>
					if (res != FR_OK) { put_rc(res); break; }
 8000d08:	b118      	cbz	r0, 8000d12 <main+0xab2>
 8000d0a:	f7ff fa13 	bl	8000134 <put_rc>
 8000d0e:	f7ff bafd 	b.w	800030c <main+0xac>
					if (!cnt) break;
 8000d12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	f43f aaf9 	beq.w	800030c <main+0xac>
					put_dump(Buff, ofs, cnt, DW_CHAR);
 8000d1a:	4649      	mov	r1, r9
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	4650      	mov	r0, sl
 8000d20:	f000 fcc6 	bl	80016b0 <put_dump>
					ofs += 16;
 8000d24:	f109 0910 	add.w	r9, r9, #16
 8000d28:	e7d9      	b.n	8000cde <main+0xa7e>
				}
				break;

			case 'r' :	/* fr <len> - read file */
				if (!xatoi(&ptr, &p1)) break;
 8000d2a:	a90f      	add	r1, sp, #60	; 0x3c
 8000d2c:	a80e      	add	r0, sp, #56	; 0x38
 8000d2e:	f000 fd4b 	bl	80017c8 <xatoi>
 8000d32:	2800      	cmp	r0, #0
 8000d34:	f43f aaea 	beq.w	800030c <main+0xac>
				p2 = 0;
 8000d38:	2600      	movs	r6, #0
				Timer = 0;
 8000d3a:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8000e54 <main+0xbf4>
					if ((UINT)p1 >= blen) {
						cnt = blen; p1 -= blen;
					} else {
						cnt = p1; p1 = 0;
					}
					res = f_read(&File[0], Buff, cnt, &s2);
 8000d3e:	f8df a108 	ldr.w	sl, [pc, #264]	; 8000e48 <main+0xbe8>
 8000d42:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 8000e3c <main+0xbdc>
				p2 = 0;
 8000d46:	9610      	str	r6, [sp, #64]	; 0x40
				Timer = 0;
 8000d48:	f8c9 6000 	str.w	r6, [r9]
				while (p1) {
 8000d4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000d4e:	b183      	cbz	r3, 8000d72 <main+0xb12>
					if ((UINT)p1 >= blen) {
 8000d50:	429d      	cmp	r5, r3
						cnt = blen; p1 -= blen;
 8000d52:	bf97      	itett	ls
 8000d54:	1b5b      	subls	r3, r3, r5
						cnt = p1; p1 = 0;
 8000d56:	9314      	strhi	r3, [sp, #80]	; 0x50
						cnt = blen; p1 -= blen;
 8000d58:	9514      	strls	r5, [sp, #80]	; 0x50
 8000d5a:	930f      	strls	r3, [sp, #60]	; 0x3c
					res = f_read(&File[0], Buff, cnt, &s2);
 8000d5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000d5e:	ab13      	add	r3, sp, #76	; 0x4c
 8000d60:	4651      	mov	r1, sl
 8000d62:	4658      	mov	r0, fp
						cnt = p1; p1 = 0;
 8000d64:	bf88      	it	hi
 8000d66:	960f      	strhi	r6, [sp, #60]	; 0x3c
					res = f_read(&File[0], Buff, cnt, &s2);
 8000d68:	f002 fd84 	bl	8003874 <f_read>
					if (res != FR_OK) { put_rc(res); break; }
 8000d6c:	b170      	cbz	r0, 8000d8c <main+0xb2c>
 8000d6e:	f7ff f9e1 	bl	8000134 <put_rc>
					p2 += s2;
					if (cnt != s2) break;
				}
				xprintf("%lu bytes read with %lu kB/sec.\n", p2, Timer ? (p2 / Timer) : 0);
 8000d72:	f8d9 2000 	ldr.w	r2, [r9]
 8000d76:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000d78:	b11a      	cbz	r2, 8000d82 <main+0xb22>
 8000d7a:	f8d9 2000 	ldr.w	r2, [r9]
 8000d7e:	fbb1 f2f2 	udiv	r2, r1, r2
 8000d82:	4830      	ldr	r0, [pc, #192]	; (8000e44 <main+0xbe4>)
 8000d84:	f000 fc5c 	bl	8001640 <xprintf>
				break;
 8000d88:	f7ff bac0 	b.w	800030c <main+0xac>
					p2 += s2;
 8000d8c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8000d8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000d90:	4413      	add	r3, r2
 8000d92:	9310      	str	r3, [sp, #64]	; 0x40
					if (cnt != s2) break;
 8000d94:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d0d8      	beq.n	8000d4c <main+0xaec>
 8000d9a:	e7ea      	b.n	8000d72 <main+0xb12>

			case 'w' :	/* fw <len> <val> - write file */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
 8000d9c:	a90f      	add	r1, sp, #60	; 0x3c
 8000d9e:	a80e      	add	r0, sp, #56	; 0x38
 8000da0:	f000 fd12 	bl	80017c8 <xatoi>
 8000da4:	2800      	cmp	r0, #0
 8000da6:	f43f aab1 	beq.w	800030c <main+0xac>
 8000daa:	a910      	add	r1, sp, #64	; 0x40
 8000dac:	a80e      	add	r0, sp, #56	; 0x38
 8000dae:	f000 fd0b 	bl	80017c8 <xatoi>
 8000db2:	2800      	cmp	r0, #0
 8000db4:	f43f aaaa 	beq.w	800030c <main+0xac>
				memset(Buff, (BYTE)p2, blen);
				p2 = 0;
 8000db8:	2600      	movs	r6, #0
				Timer = 0;
 8000dba:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8000e54 <main+0xbf4>
				memset(Buff, (BYTE)p2, blen);
 8000dbe:	462a      	mov	r2, r5
 8000dc0:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8000dc4:	4820      	ldr	r0, [pc, #128]	; (8000e48 <main+0xbe8>)
					if ((UINT)p1 >= blen) {
						cnt = blen; p1 -= blen;
					} else {
						cnt = p1; p1 = 0;
					}
					res = f_write(&File[0], Buff, cnt, &s2);
 8000dc6:	f8df a080 	ldr.w	sl, [pc, #128]	; 8000e48 <main+0xbe8>
 8000dca:	f8df b070 	ldr.w	fp, [pc, #112]	; 8000e3c <main+0xbdc>
				memset(Buff, (BYTE)p2, blen);
 8000dce:	f003 ff53 	bl	8004c78 <memset>
				p2 = 0;
 8000dd2:	9610      	str	r6, [sp, #64]	; 0x40
				Timer = 0;
 8000dd4:	f8c9 6000 	str.w	r6, [r9]
				while (p1) {
 8000dd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000dda:	b183      	cbz	r3, 8000dfe <main+0xb9e>
					if ((UINT)p1 >= blen) {
 8000ddc:	429d      	cmp	r5, r3
						cnt = blen; p1 -= blen;
 8000dde:	bf97      	itett	ls
 8000de0:	1b5b      	subls	r3, r3, r5
						cnt = p1; p1 = 0;
 8000de2:	9314      	strhi	r3, [sp, #80]	; 0x50
						cnt = blen; p1 -= blen;
 8000de4:	9514      	strls	r5, [sp, #80]	; 0x50
 8000de6:	930f      	strls	r3, [sp, #60]	; 0x3c
					res = f_write(&File[0], Buff, cnt, &s2);
 8000de8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000dea:	ab13      	add	r3, sp, #76	; 0x4c
 8000dec:	4651      	mov	r1, sl
 8000dee:	4658      	mov	r0, fp
						cnt = p1; p1 = 0;
 8000df0:	bf88      	it	hi
 8000df2:	960f      	strhi	r6, [sp, #60]	; 0x3c
					res = f_write(&File[0], Buff, cnt, &s2);
 8000df4:	f002 fde4 	bl	80039c0 <f_write>
					if (res != FR_OK) { put_rc(res); break; }
 8000df8:	b170      	cbz	r0, 8000e18 <main+0xbb8>
 8000dfa:	f7ff f99b 	bl	8000134 <put_rc>
					p2 += s2;
					if (cnt != s2) break;
				}
				xprintf("%lu bytes written with %lu kB/sec.\n", p2, Timer ? (p2 / Timer) : 0);
 8000dfe:	f8d9 2000 	ldr.w	r2, [r9]
 8000e02:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000e04:	b11a      	cbz	r2, 8000e0e <main+0xbae>
 8000e06:	f8d9 2000 	ldr.w	r2, [r9]
 8000e0a:	fbb1 f2f2 	udiv	r2, r1, r2
 8000e0e:	480f      	ldr	r0, [pc, #60]	; (8000e4c <main+0xbec>)
 8000e10:	f000 fc16 	bl	8001640 <xprintf>
				break;
 8000e14:	f7ff ba7a 	b.w	800030c <main+0xac>
					p2 += s2;
 8000e18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8000e1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000e1c:	4413      	add	r3, r2
 8000e1e:	9310      	str	r3, [sp, #64]	; 0x40
					if (cnt != s2) break;
 8000e20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d0d8      	beq.n	8000dd8 <main+0xb78>
 8000e26:	e7ea      	b.n	8000dfe <main+0xb9e>
 8000e28:	2000046c 	.word	0x2000046c
 8000e2c:	20000482 	.word	0x20000482
 8000e30:	08005852 	.word	0x08005852
 8000e34:	0800587e 	.word	0x0800587e
 8000e38:	080058a7 	.word	0x080058a7
 8000e3c:	20000504 	.word	0x20000504
 8000e40:	080058bb 	.word	0x080058bb
 8000e44:	080058cc 	.word	0x080058cc
 8000e48:	2000095c 	.word	0x2000095c
 8000e4c:	080058ed 	.word	0x080058ed
 8000e50:	2000195c 	.word	0x2000195c
 8000e54:	20000954 	.word	0x20000954

			case 'n' :	/* fn <org.name> <new.name> - Change name of an object */
				while (*ptr == ' ') ptr++;
 8000e58:	3001      	adds	r0, #1
 8000e5a:	900e      	str	r0, [sp, #56]	; 0x38
 8000e5c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000e5e:	7803      	ldrb	r3, [r0, #0]
 8000e60:	2b20      	cmp	r3, #32
 8000e62:	d0f9      	beq.n	8000e58 <main+0xbf8>
				ptr2 = strchr(ptr, ' ');
 8000e64:	2120      	movs	r1, #32
 8000e66:	f003 ff51 	bl	8004d0c <strchr>
				if (!ptr2) break;
 8000e6a:	2800      	cmp	r0, #0
 8000e6c:	f43f aa4e 	beq.w	800030c <main+0xac>
				*ptr2++ = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	f800 3b01 	strb.w	r3, [r0], #1
 8000e76:	4601      	mov	r1, r0
				while (*ptr2 == ' ') ptr2++;
 8000e78:	780b      	ldrb	r3, [r1, #0]
 8000e7a:	3001      	adds	r0, #1
 8000e7c:	2b20      	cmp	r3, #32
 8000e7e:	d0fa      	beq.n	8000e76 <main+0xc16>
				put_rc(f_rename(ptr, ptr2));
 8000e80:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000e82:	f003 fa29 	bl	80042d8 <f_rename>
 8000e86:	f7ff f955 	bl	8000134 <put_rc>
				break;
 8000e8a:	f7ff ba3f 	b.w	800030c <main+0xac>

			case 'u' :	/* fu <name> - Unlink an object */
				while (*ptr == ' ') ptr++;
 8000e8e:	3001      	adds	r0, #1
 8000e90:	900e      	str	r0, [sp, #56]	; 0x38
 8000e92:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000e94:	7803      	ldrb	r3, [r0, #0]
 8000e96:	2b20      	cmp	r3, #32
 8000e98:	d0f9      	beq.n	8000e8e <main+0xc2e>
				put_rc(f_unlink(ptr));
 8000e9a:	f003 f931 	bl	8004100 <f_unlink>
 8000e9e:	f7ff f949 	bl	8000134 <put_rc>
				break;
 8000ea2:	f7ff ba33 	b.w	800030c <main+0xac>

			case 'v' :	/* fv - Truncate file */
				put_rc(f_truncate(&File[0]));
 8000ea6:	48aa      	ldr	r0, [pc, #680]	; (8001150 <main+0xef0>)
 8000ea8:	f003 f8da 	bl	8004060 <f_truncate>
 8000eac:	f7ff f942 	bl	8000134 <put_rc>
				break;
 8000eb0:	f7ff ba2c 	b.w	800030c <main+0xac>

			case 'k' :	/* fk <name> - Create a directory */
				while (*ptr == ' ') ptr++;
 8000eb4:	3001      	adds	r0, #1
 8000eb6:	900e      	str	r0, [sp, #56]	; 0x38
 8000eb8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000eba:	7803      	ldrb	r3, [r0, #0]
 8000ebc:	2b20      	cmp	r3, #32
 8000ebe:	d0f9      	beq.n	8000eb4 <main+0xc54>
				put_rc(f_mkdir(ptr));
 8000ec0:	f003 f979 	bl	80041b6 <f_mkdir>
 8000ec4:	f7ff f936 	bl	8000134 <put_rc>
				break;
 8000ec8:	f7ff ba20 	b.w	800030c <main+0xac>

			case 'a' :	/* fa <atrr> <mask> <name> - Change attribute of an object */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
 8000ecc:	a90f      	add	r1, sp, #60	; 0x3c
 8000ece:	a80e      	add	r0, sp, #56	; 0x38
 8000ed0:	f000 fc7a 	bl	80017c8 <xatoi>
 8000ed4:	2800      	cmp	r0, #0
 8000ed6:	f43f aa19 	beq.w	800030c <main+0xac>
 8000eda:	a910      	add	r1, sp, #64	; 0x40
 8000edc:	a80e      	add	r0, sp, #56	; 0x38
 8000ede:	f000 fc73 	bl	80017c8 <xatoi>
 8000ee2:	2800      	cmp	r0, #0
 8000ee4:	f43f aa12 	beq.w	800030c <main+0xac>
				while (*ptr == ' ') ptr++;
 8000ee8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000eea:	7803      	ldrb	r3, [r0, #0]
 8000eec:	2b20      	cmp	r3, #32
 8000eee:	d009      	beq.n	8000f04 <main+0xca4>
				put_rc(f_chmod(ptr, p1, p2));
 8000ef0:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8000ef4:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 8000ef8:	f003 fa6c 	bl	80043d4 <f_chmod>
 8000efc:	f7ff f91a 	bl	8000134 <put_rc>
				break;
 8000f00:	f7ff ba04 	b.w	800030c <main+0xac>
				while (*ptr == ' ') ptr++;
 8000f04:	3001      	adds	r0, #1
 8000f06:	900e      	str	r0, [sp, #56]	; 0x38
 8000f08:	e7ee      	b.n	8000ee8 <main+0xc88>

			case 't' :	/* ft <year> <month> <day> <hour> <min> <sec> <name> - Change timestamp of an object */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2) || !xatoi(&ptr, &p3)) break;
 8000f0a:	a90f      	add	r1, sp, #60	; 0x3c
 8000f0c:	a80e      	add	r0, sp, #56	; 0x38
 8000f0e:	f000 fc5b 	bl	80017c8 <xatoi>
 8000f12:	2800      	cmp	r0, #0
 8000f14:	f43f a9fa 	beq.w	800030c <main+0xac>
 8000f18:	a910      	add	r1, sp, #64	; 0x40
 8000f1a:	a80e      	add	r0, sp, #56	; 0x38
 8000f1c:	f000 fc54 	bl	80017c8 <xatoi>
 8000f20:	2800      	cmp	r0, #0
 8000f22:	f43f a9f3 	beq.w	800030c <main+0xac>
 8000f26:	a911      	add	r1, sp, #68	; 0x44
 8000f28:	a80e      	add	r0, sp, #56	; 0x38
 8000f2a:	f000 fc4d 	bl	80017c8 <xatoi>
 8000f2e:	2800      	cmp	r0, #0
 8000f30:	f43f a9ec 	beq.w	800030c <main+0xac>
				Finfo.fdate = ((p1 - 1980) << 9) | ((p2 & 15) << 5) | (p3 & 31);
 8000f34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000f36:	4e87      	ldr	r6, [pc, #540]	; (8001154 <main+0xef4>)
 8000f38:	f2a3 72bc 	subw	r2, r3, #1980	; 0x7bc
 8000f3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2) || !xatoi(&ptr, &p3)) break;
 8000f3e:	a90f      	add	r1, sp, #60	; 0x3c
				Finfo.fdate = ((p1 - 1980) << 9) | ((p2 & 15) << 5) | (p3 & 31);
 8000f40:	015b      	lsls	r3, r3, #5
 8000f42:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8000f46:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8000f4a:	9a11      	ldr	r2, [sp, #68]	; 0x44
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2) || !xatoi(&ptr, &p3)) break;
 8000f4c:	a80e      	add	r0, sp, #56	; 0x38
				Finfo.fdate = ((p1 - 1980) << 9) | ((p2 & 15) << 5) | (p3 & 31);
 8000f4e:	f002 021f 	and.w	r2, r2, #31
 8000f52:	4313      	orrs	r3, r2
 8000f54:	80b3      	strh	r3, [r6, #4]
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2) || !xatoi(&ptr, &p3)) break;
 8000f56:	f000 fc37 	bl	80017c8 <xatoi>
 8000f5a:	2800      	cmp	r0, #0
 8000f5c:	f43f a9d6 	beq.w	800030c <main+0xac>
 8000f60:	a910      	add	r1, sp, #64	; 0x40
 8000f62:	a80e      	add	r0, sp, #56	; 0x38
 8000f64:	f000 fc30 	bl	80017c8 <xatoi>
 8000f68:	2800      	cmp	r0, #0
 8000f6a:	f43f a9cf 	beq.w	800030c <main+0xac>
 8000f6e:	a911      	add	r1, sp, #68	; 0x44
 8000f70:	a80e      	add	r0, sp, #56	; 0x38
 8000f72:	f000 fc29 	bl	80017c8 <xatoi>
 8000f76:	2800      	cmp	r0, #0
 8000f78:	f43f a9c8 	beq.w	800030c <main+0xac>
				Finfo.ftime = ((p1 & 31) << 11) | ((p2 & 63) << 5) | ((p3 >> 1) & 31);
 8000f7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000f7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8000f80:	015b      	lsls	r3, r3, #5
 8000f82:	f3c2 0244 	ubfx	r2, r2, #1, #5
 8000f86:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
				put_rc(f_utime(ptr, &Finfo));
 8000f8e:	4631      	mov	r1, r6
				Finfo.ftime = ((p1 & 31) << 11) | ((p2 & 63) << 5) | ((p3 >> 1) & 31);
 8000f90:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
				put_rc(f_utime(ptr, &Finfo));
 8000f94:	980e      	ldr	r0, [sp, #56]	; 0x38
				Finfo.ftime = ((p1 & 31) << 11) | ((p2 & 63) << 5) | ((p3 >> 1) & 31);
 8000f96:	80f3      	strh	r3, [r6, #6]
				put_rc(f_utime(ptr, &Finfo));
 8000f98:	f003 fa45 	bl	8004426 <f_utime>
 8000f9c:	f7ff f8ca 	bl	8000134 <put_rc>
				break;
 8000fa0:	f7ff b9b4 	b.w	800030c <main+0xac>

			case 'x' : /* fx <src.name> <dst.name> - Copy a file */
				while (*ptr == ' ') ptr++;
 8000fa4:	3001      	adds	r0, #1
 8000fa6:	900e      	str	r0, [sp, #56]	; 0x38
 8000fa8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000faa:	7803      	ldrb	r3, [r0, #0]
 8000fac:	2b20      	cmp	r3, #32
 8000fae:	d0f9      	beq.n	8000fa4 <main+0xd44>
				ptr2 = strchr(ptr, ' ');
 8000fb0:	2120      	movs	r1, #32
 8000fb2:	f003 feab 	bl	8004d0c <strchr>
				if (!ptr2) break;
 8000fb6:	2800      	cmp	r0, #0
 8000fb8:	f43f a9a8 	beq.w	800030c <main+0xac>
				*ptr2++ = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f800 3b01 	strb.w	r3, [r0], #1
 8000fc2:	4606      	mov	r6, r0
				while (*ptr2 == ' ') ptr2++;
 8000fc4:	7833      	ldrb	r3, [r6, #0]
 8000fc6:	3001      	adds	r0, #1
 8000fc8:	2b20      	cmp	r3, #32
 8000fca:	d0fa      	beq.n	8000fc2 <main+0xd62>
				xprintf("Opening \"%s\"", ptr);
 8000fcc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8000fce:	4862      	ldr	r0, [pc, #392]	; (8001158 <main+0xef8>)
 8000fd0:	f000 fb36 	bl	8001640 <xprintf>
				res = f_open(&File[0], ptr, FA_OPEN_EXISTING | FA_READ);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8000fd8:	485d      	ldr	r0, [pc, #372]	; (8001150 <main+0xef0>)
 8000fda:	f002 fb6d 	bl	80036b8 <f_open>
 8000fde:	4681      	mov	r9, r0
				xputc('\n');
 8000fe0:	200a      	movs	r0, #10
 8000fe2:	f000 fa1f 	bl	8001424 <xputc>
				if (res) {
 8000fe6:	f1b9 0f00 	cmp.w	r9, #0
 8000fea:	d004      	beq.n	8000ff6 <main+0xd96>
					put_rc(res);
 8000fec:	4648      	mov	r0, r9
 8000fee:	f7ff f8a1 	bl	8000134 <put_rc>
					break;
 8000ff2:	f7ff b98b 	b.w	800030c <main+0xac>
				}
				xprintf("Creating \"%s\"", ptr2);
 8000ff6:	4631      	mov	r1, r6
 8000ff8:	4858      	ldr	r0, [pc, #352]	; (800115c <main+0xefc>)
 8000ffa:	f000 fb21 	bl	8001640 <xprintf>
				res = f_open(&File[1], ptr2, FA_CREATE_ALWAYS | FA_WRITE);
 8000ffe:	220a      	movs	r2, #10
 8001000:	4631      	mov	r1, r6
 8001002:	4857      	ldr	r0, [pc, #348]	; (8001160 <main+0xf00>)
 8001004:	f002 fb58 	bl	80036b8 <f_open>
 8001008:	4681      	mov	r9, r0
				xputc('\n');
 800100a:	200a      	movs	r0, #10
 800100c:	f000 fa0a 	bl	8001424 <xputc>
				if (res) {
 8001010:	f1b9 0f00 	cmp.w	r9, #0
 8001014:	d007      	beq.n	8001026 <main+0xdc6>
					put_rc(res);
 8001016:	4648      	mov	r0, r9
 8001018:	f7ff f88c 	bl	8000134 <put_rc>
					f_close(&File[0]);
 800101c:	484c      	ldr	r0, [pc, #304]	; (8001150 <main+0xef0>)
 800101e:	f002 fdd6 	bl	8003bce <f_close>
					break;
 8001022:	f7ff b973 	b.w	800030c <main+0xac>
				}
				xprintf("Copying file...");
				Timer = 0;
 8001026:	4e4f      	ldr	r6, [pc, #316]	; (8001164 <main+0xf04>)
				xprintf("Copying file...");
 8001028:	484f      	ldr	r0, [pc, #316]	; (8001168 <main+0xf08>)
				p1 = 0;
				for (;;) {
					res = f_read(&File[0], Buff, blen, &s1);
 800102a:	f8df a124 	ldr.w	sl, [pc, #292]	; 8001150 <main+0xef0>
				xprintf("Copying file...");
 800102e:	f000 fb07 	bl	8001640 <xprintf>
				Timer = 0;
 8001032:	f8c6 9000 	str.w	r9, [r6]
				p1 = 0;
 8001036:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
					res = f_read(&File[0], Buff, blen, &s1);
 800103a:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8001178 <main+0xf18>
					if (res || s1 == 0) break;   /* error or eof */
					res = f_write(&File[1], Buff, s1, &s2);
 800103e:	f50a 7b0a 	add.w	fp, sl, #552	; 0x228
					res = f_read(&File[0], Buff, blen, &s1);
 8001042:	ab12      	add	r3, sp, #72	; 0x48
 8001044:	462a      	mov	r2, r5
 8001046:	4649      	mov	r1, r9
 8001048:	4650      	mov	r0, sl
 800104a:	f002 fc13 	bl	8003874 <f_read>
					if (res || s1 == 0) break;   /* error or eof */
 800104e:	b970      	cbnz	r0, 800106e <main+0xe0e>
 8001050:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001052:	b162      	cbz	r2, 800106e <main+0xe0e>
					res = f_write(&File[1], Buff, s1, &s2);
 8001054:	ab13      	add	r3, sp, #76	; 0x4c
 8001056:	4649      	mov	r1, r9
 8001058:	4658      	mov	r0, fp
 800105a:	f002 fcb1 	bl	80039c0 <f_write>
					p1 += s2;
 800105e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001060:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8001062:	4413      	add	r3, r2
 8001064:	930f      	str	r3, [sp, #60]	; 0x3c
					if (res || s2 < s1) break;   /* error or disk full */
 8001066:	b910      	cbnz	r0, 800106e <main+0xe0e>
 8001068:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800106a:	429a      	cmp	r2, r3
 800106c:	d2e9      	bcs.n	8001042 <main+0xde2>
				}
				xprintf("\n%lu bytes copied with %lu kB/sec.\n", p1, p1 / Timer);
 800106e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8001070:	6832      	ldr	r2, [r6, #0]
 8001072:	483e      	ldr	r0, [pc, #248]	; (800116c <main+0xf0c>)
 8001074:	fbb1 f2f2 	udiv	r2, r1, r2
 8001078:	f000 fae2 	bl	8001640 <xprintf>
				f_close(&File[0]);
 800107c:	4834      	ldr	r0, [pc, #208]	; (8001150 <main+0xef0>)
 800107e:	f002 fda6 	bl	8003bce <f_close>
				f_close(&File[1]);
 8001082:	4837      	ldr	r0, [pc, #220]	; (8001160 <main+0xf00>)
 8001084:	f002 fda3 	bl	8003bce <f_close>
				break;
 8001088:	f7ff b940 	b.w	800030c <main+0xac>
#if FF_FS_RPATH
			case 'g' :	/* fg <path> - Change current directory */
				while (*ptr == ' ') ptr++;
 800108c:	3001      	adds	r0, #1
 800108e:	900e      	str	r0, [sp, #56]	; 0x38
 8001090:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001092:	7803      	ldrb	r3, [r0, #0]
 8001094:	2b20      	cmp	r3, #32
 8001096:	d0f9      	beq.n	800108c <main+0xe2c>
				put_rc(f_chdir(ptr));
 8001098:	f002 fdb8 	bl	8003c0c <f_chdir>
 800109c:	f7ff f84a 	bl	8000134 <put_rc>
				break;
 80010a0:	f7ff b934 	b.w	800030c <main+0xac>
#if FF_FS_RPATH >= 2
			case 'q' :	/* fq - Show current dir path */
				res = f_getcwd(Line, sizeof Line);
 80010a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a8:	4620      	mov	r0, r4
 80010aa:	f002 fddd 	bl	8003c68 <f_getcwd>
				if (res)
 80010ae:	b118      	cbz	r0, 80010b8 <main+0xe58>
					put_rc(res);
 80010b0:	f7ff f840 	bl	8000134 <put_rc>
 80010b4:	f7ff b92a 	b.w	800030c <main+0xac>
				else
					xprintf("%s\n", Line);
 80010b8:	4621      	mov	r1, r4
 80010ba:	482d      	ldr	r0, [pc, #180]	; (8001170 <main+0xf10>)
 80010bc:	f000 fac0 	bl	8001640 <xprintf>
 80010c0:	f7ff b924 	b.w	800030c <main+0xac>
				break;
#endif
#endif
#if FF_USE_LABEL
			case 'b' :	/* fb <name> - Set volume label */
				while (*ptr == ' ') ptr++;
 80010c4:	3001      	adds	r0, #1
 80010c6:	900e      	str	r0, [sp, #56]	; 0x38
 80010c8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80010ca:	7803      	ldrb	r3, [r0, #0]
 80010cc:	2b20      	cmp	r3, #32
 80010ce:	d0f9      	beq.n	80010c4 <main+0xe64>
				put_rc(f_setlabel(ptr));
 80010d0:	f003 fa20 	bl	8004514 <f_setlabel>
 80010d4:	f7ff f82e 	bl	8000134 <put_rc>
				break;
 80010d8:	f7ff b918 	b.w	800030c <main+0xac>
#endif	/* FF_USE_LABEL */
#if FF_USE_MKFS
			case 'm' :	/* fm <type> <csize> - Create file system */
				if (!xatoi(&ptr, &p2) || !xatoi(&ptr, &p3)) break;
 80010dc:	a910      	add	r1, sp, #64	; 0x40
 80010de:	a80e      	add	r0, sp, #56	; 0x38
 80010e0:	f000 fb72 	bl	80017c8 <xatoi>
 80010e4:	2800      	cmp	r0, #0
 80010e6:	f43f a911 	beq.w	800030c <main+0xac>
 80010ea:	a911      	add	r1, sp, #68	; 0x44
 80010ec:	a80e      	add	r0, sp, #56	; 0x38
 80010ee:	f000 fb6b 	bl	80017c8 <xatoi>
 80010f2:	2800      	cmp	r0, #0
 80010f4:	f43f a90a 	beq.w	800030c <main+0xac>
				xprintf("The volume will be formatted. Are you sure? (Y/n)=");
 80010f8:	481e      	ldr	r0, [pc, #120]	; (8001174 <main+0xf14>)
 80010fa:	f000 faa1 	bl	8001640 <xprintf>
				xgets(Line, sizeof Line);
 80010fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001102:	4620      	mov	r0, r4
 8001104:	f000 fb22 	bl	800174c <xgets>
				if (Line[0] == 'Y')
 8001108:	7823      	ldrb	r3, [r4, #0]
 800110a:	2b59      	cmp	r3, #89	; 0x59
 800110c:	f47f a8fe 	bne.w	800030c <main+0xac>
					put_rc(f_mkfs("", (BYTE)p2, (DWORD)p3, Buff, sizeof Buff));
 8001110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001114:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800111c:	4b16      	ldr	r3, [pc, #88]	; (8001178 <main+0xf18>)
 800111e:	4817      	ldr	r0, [pc, #92]	; (800117c <main+0xf1c>)
 8001120:	f003 fa7c 	bl	800461c <f_mkfs>
 8001124:	f7ff f806 	bl	8000134 <put_rc>
 8001128:	f7ff b8f0 	b.w	800030c <main+0xac>
				break;
#endif	/* FF_USE_MKFS */
			case 'z' :	/* fz [<size>] - Change/Show R/W length for fr/fw/fx command */
				if (xatoi(&ptr, &p1) && p1 >= 1 && p1 <= (long)sizeof Buff)
 800112c:	a90f      	add	r1, sp, #60	; 0x3c
 800112e:	a80e      	add	r0, sp, #56	; 0x38
 8001130:	f000 fb4a 	bl	80017c8 <xatoi>
 8001134:	b128      	cbz	r0, 8001142 <main+0xee2>
 8001136:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001138:	1e5a      	subs	r2, r3, #1
 800113a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800113e:	bf38      	it	cc
 8001140:	461d      	movcc	r5, r3
					blen = p1;
				xprintf("blen=%u\n", blen);
 8001142:	4629      	mov	r1, r5
 8001144:	480e      	ldr	r0, [pc, #56]	; (8001180 <main+0xf20>)
 8001146:	f000 fa7b 	bl	8001640 <xprintf>
				break;
 800114a:	f7ff b8df 	b.w	800030c <main+0xac>
 800114e:	bf00      	nop
 8001150:	20000504 	.word	0x20000504
 8001154:	2000046c 	.word	0x2000046c
 8001158:	08005911 	.word	0x08005911
 800115c:	0800591e 	.word	0x0800591e
 8001160:	2000072c 	.word	0x2000072c
 8001164:	20000954 	.word	0x20000954
 8001168:	0800592c 	.word	0x0800592c
 800116c:	0800593c 	.word	0x0800593c
 8001170:	0800587a 	.word	0x0800587a
 8001174:	08005960 	.word	0x08005960
 8001178:	2000095c 	.word	0x2000095c
 800117c:	080057e8 	.word	0x080057e8
 8001180:	08005993 	.word	0x08005993
			}
			break;

		case 't' :	/* t [<year> <mon> <mday> <hour> <min> <sec>] - Set/Show RTC */
			if (xatoi(&ptr, &p1)) {
 8001184:	a90f      	add	r1, sp, #60	; 0x3c
 8001186:	a80e      	add	r0, sp, #56	; 0x38
 8001188:	f000 fb1e 	bl	80017c8 <xatoi>
 800118c:	b358      	cbz	r0, 80011e6 <main+0xf86>
				rtc.year = (WORD)p1;
 800118e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
				xatoi(&ptr, &p1); rtc.month = (BYTE)p1;
 8001190:	a90f      	add	r1, sp, #60	; 0x3c
 8001192:	a80e      	add	r0, sp, #56	; 0x38
				rtc.year = (WORD)p1;
 8001194:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
				xatoi(&ptr, &p1); rtc.month = (BYTE)p1;
 8001198:	f000 fb16 	bl	80017c8 <xatoi>
 800119c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
				xatoi(&ptr, &p1); rtc.mday = (BYTE)p1;
 800119e:	a90f      	add	r1, sp, #60	; 0x3c
 80011a0:	a80e      	add	r0, sp, #56	; 0x38
				xatoi(&ptr, &p1); rtc.month = (BYTE)p1;
 80011a2:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
				xatoi(&ptr, &p1); rtc.mday = (BYTE)p1;
 80011a6:	f000 fb0f 	bl	80017c8 <xatoi>
 80011aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
				xatoi(&ptr, &p1); rtc.hour = (BYTE)p1;
 80011ac:	a90f      	add	r1, sp, #60	; 0x3c
 80011ae:	a80e      	add	r0, sp, #56	; 0x38
				xatoi(&ptr, &p1); rtc.mday = (BYTE)p1;
 80011b0:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
				xatoi(&ptr, &p1); rtc.hour = (BYTE)p1;
 80011b4:	f000 fb08 	bl	80017c8 <xatoi>
 80011b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
				xatoi(&ptr, &p1); rtc.min = (BYTE)p1;
 80011ba:	a90f      	add	r1, sp, #60	; 0x3c
 80011bc:	a80e      	add	r0, sp, #56	; 0x38
				xatoi(&ptr, &p1); rtc.hour = (BYTE)p1;
 80011be:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
				xatoi(&ptr, &p1); rtc.min = (BYTE)p1;
 80011c2:	f000 fb01 	bl	80017c8 <xatoi>
 80011c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 				if (!xatoi(&ptr, &p1)) break;
 80011c8:	a90f      	add	r1, sp, #60	; 0x3c
 80011ca:	a80e      	add	r0, sp, #56	; 0x38
				xatoi(&ptr, &p1); rtc.min = (BYTE)p1;
 80011cc:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
 				if (!xatoi(&ptr, &p1)) break;
 80011d0:	f000 fafa 	bl	80017c8 <xatoi>
 80011d4:	2800      	cmp	r0, #0
 80011d6:	f43f a899 	beq.w	800030c <main+0xac>
				rtc.sec = (BYTE)p1;
 80011da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
				rtc_settime(&rtc);
 80011dc:	a818      	add	r0, sp, #96	; 0x60
				rtc.sec = (BYTE)p1;
 80011de:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
				rtc_settime(&rtc);
 80011e2:	f000 fc6d 	bl	8001ac0 <rtc_settime>
			}
			rtc_gettime(&rtc);
 80011e6:	a818      	add	r0, sp, #96	; 0x60
 80011e8:	f000 fbf8 	bl	80019dc <rtc_gettime>
			xprintf("%u/%u/%u %s %02u:%02u:%02u\n", rtc.year, rtc.month, rtc.mday, &days[rtc.wday*4], rtc.hour, rtc.min, rtc.sec);
 80011ec:	f89d 0066 	ldrb.w	r0, [sp, #102]	; 0x66
 80011f0:	f89d 6067 	ldrb.w	r6, [sp, #103]	; 0x67
 80011f4:	9003      	str	r0, [sp, #12]
 80011f6:	f89d 0065 	ldrb.w	r0, [sp, #101]	; 0x65
 80011fa:	f89d 3063 	ldrb.w	r3, [sp, #99]	; 0x63
 80011fe:	9002      	str	r0, [sp, #8]
 8001200:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 8001204:	f89d 2062 	ldrb.w	r2, [sp, #98]	; 0x62
 8001208:	9001      	str	r0, [sp, #4]
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <main+0xfc0>)
 800120c:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 8001210:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 8001214:	9000      	str	r0, [sp, #0]
 8001216:	4803      	ldr	r0, [pc, #12]	; (8001224 <main+0xfc4>)
 8001218:	f000 fa12 	bl	8001640 <xprintf>
			break;
 800121c:	f7ff b876 	b.w	800030c <main+0xac>
 8001220:	0800558c 	.word	0x0800558c
 8001224:	0800599c 	.word	0x0800599c

08001228 <Exception_Trap>:
/*--------------------------------------------------------------------/
/ Unexpected Exception/IRQ Trap                                       /
/--------------------------------------------------------------------*/

void Exception_Trap (void)
{
 8001228:	e7fe      	b.n	8001228 <Exception_Trap>

0800122a <IRQ_Trap>:
	for (;;) ;
}


void IRQ_Trap (void)
{
 800122a:	e7fe      	b.n	800122a <IRQ_Trap>

0800122c <SVC_Handler>:
/*--------------------------------------------------------------------/
/ Default SVC Handler                                                 /
/--------------------------------------------------------------------*/

void SVC_Handler (void)
{
 800122c:	e7fe      	b.n	800122c <SVC_Handler>

0800122e <Reset_Handler>:
	VTOR = (uint32_t)vector;
 800122e:	4a12      	ldr	r2, [pc, #72]	; (8001278 <Reset_Handler+0x4a>)
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <Reset_Handler+0x4e>)
	RCC_CR = RCCCR_HSE | RCCCR_PLL | 0x83;
 8001232:	4913      	ldr	r1, [pc, #76]	; (8001280 <Reset_Handler+0x52>)
	VTOR = (uint32_t)vector;
 8001234:	601a      	str	r2, [r3, #0]
	RCC_CFGR = RCCCF;
 8001236:	4a13      	ldr	r2, [pc, #76]	; (8001284 <Reset_Handler+0x56>)
 8001238:	4b13      	ldr	r3, [pc, #76]	; (8001288 <Reset_Handler+0x5a>)
 800123a:	601a      	str	r2, [r3, #0]
	RCC_CR = RCCCR_HSE | RCCCR_PLL | 0x83;
 800123c:	4a13      	ldr	r2, [pc, #76]	; (800128c <Reset_Handler+0x5e>)
 800123e:	6011      	str	r1, [r2, #0]
		while (!(RCC_CR & 0x02000000)) ;
 8001240:	6811      	ldr	r1, [r2, #0]
 8001242:	0189      	lsls	r1, r1, #6
 8001244:	d5fc      	bpl.n	8001240 <Reset_Handler+0x12>
		RCC_CFGR |= 2;
 8001246:	681a      	ldr	r2, [r3, #0]
	for (s = _sidata, d = _sdata; d < _edata; *d++ = *s++) ;
 8001248:	4911      	ldr	r1, [pc, #68]	; (8001290 <Reset_Handler+0x62>)
		RCC_CFGR |= 2;
 800124a:	f042 0202 	orr.w	r2, r2, #2
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	4a10      	ldr	r2, [pc, #64]	; (8001294 <Reset_Handler+0x66>)
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <Reset_Handler+0x6a>)
	for (s = _sidata, d = _sdata; d < _edata; *d++ = *s++) ;
 8001254:	428b      	cmp	r3, r1
 8001256:	d307      	bcc.n	8001268 <Reset_Handler+0x3a>
	for (d = _sbss; d < _ebss; *d++ = 0) ;
 8001258:	2100      	movs	r1, #0
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <Reset_Handler+0x6e>)
 800125c:	4a10      	ldr	r2, [pc, #64]	; (80012a0 <Reset_Handler+0x72>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d307      	bcc.n	8001272 <Reset_Handler+0x44>
	main();
 8001262:	f7fe fffd 	bl	8000260 <main>
 8001266:	e7fe      	b.n	8001266 <Reset_Handler+0x38>
	for (s = _sidata, d = _sdata; d < _edata; *d++ = *s++) ;
 8001268:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800126c:	f843 0b04 	str.w	r0, [r3], #4
 8001270:	e7f0      	b.n	8001254 <Reset_Handler+0x26>
	for (d = _sbss; d < _ebss; *d++ = 0) ;
 8001272:	f843 1b04 	str.w	r1, [r3], #4
 8001276:	e7f2      	b.n	800125e <Reset_Handler+0x30>
 8001278:	08000000 	.word	0x08000000
 800127c:	e000ed08 	.word	0xe000ed08
 8001280:	01000083 	.word	0x01000083
 8001284:	00100070 	.word	0x00100070
 8001288:	40021004 	.word	0x40021004
 800128c:	40021000 	.word	0x40021000
 8001290:	20000004 	.word	0x20000004
 8001294:	08005ea0 	.word	0x08005ea0
 8001298:	20000000 	.word	0x20000000
 800129c:	20000004 	.word	0x20000004
 80012a0:	20001a98 	.word	0x20001a98

080012a4 <USART1_IRQHandler>:



void USART1_IRQHandler (void)
{
	uint32_t sr = USART1_SR;	/* Interrupt flags */
 80012a4:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <USART1_IRQHandler+0x6c>)
{
 80012a6:	b510      	push	{r4, lr}
	uint32_t sr = USART1_SR;	/* Interrupt flags */
 80012a8:	8818      	ldrh	r0, [r3, #0]
 80012aa:	b280      	uxth	r0, r0
	uint8_t d;
	int i;


	if (sr & _BV(5)) {	/* RXNE is set: Rx ready */
 80012ac:	0682      	lsls	r2, r0, #26
 80012ae:	d513      	bpl.n	80012d8 <USART1_IRQHandler+0x34>
		d = USART1_DR;	/* Get received byte */
		i = Fifo1.rct;
 80012b0:	4a18      	ldr	r2, [pc, #96]	; (8001314 <USART1_IRQHandler+0x70>)
		d = USART1_DR;	/* Get received byte */
 80012b2:	8899      	ldrh	r1, [r3, #4]
		i = Fifo1.rct;
 80012b4:	8953      	ldrh	r3, [r2, #10]
		d = USART1_DR;	/* Get received byte */
 80012b6:	b289      	uxth	r1, r1
		i = Fifo1.rct;
 80012b8:	b29b      	uxth	r3, r3
		if (i < UART1_RXB) {	/* Store it into the rx fifo if not full */
 80012ba:	2b7f      	cmp	r3, #127	; 0x7f
 80012bc:	d80c      	bhi.n	80012d8 <USART1_IRQHandler+0x34>
			Fifo1.rct = ++i;
 80012be:	3301      	adds	r3, #1
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	8153      	strh	r3, [r2, #10]
			i = Fifo1.rwi;
 80012c4:	8913      	ldrh	r3, [r2, #8]
		d = USART1_DR;	/* Get received byte */
 80012c6:	b2c9      	uxtb	r1, r1
			i = Fifo1.rwi;
 80012c8:	b29b      	uxth	r3, r3
			Fifo1.rbuf[i] = d;
 80012ca:	18d4      	adds	r4, r2, r3
			Fifo1.rwi = ++i % UART1_RXB;
 80012cc:	3301      	adds	r3, #1
 80012ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			Fifo1.rbuf[i] = d;
 80012d2:	f884 108c 	strb.w	r1, [r4, #140]	; 0x8c
			Fifo1.rwi = ++i % UART1_RXB;
 80012d6:	8113      	strh	r3, [r2, #8]
		}
	}

	if (sr & _BV(7)) {	/* TXE is set: Tx ready */
 80012d8:	0603      	lsls	r3, r0, #24
 80012da:	d510      	bpl.n	80012fe <USART1_IRQHandler+0x5a>
		i = Fifo1.tct;
 80012dc:	4a0d      	ldr	r2, [pc, #52]	; (8001314 <USART1_IRQHandler+0x70>)
 80012de:	8893      	ldrh	r3, [r2, #4]
 80012e0:	b29b      	uxth	r3, r3
		if (i--) {	/* There is any data in the tx fifo */
 80012e2:	b16b      	cbz	r3, 8001300 <USART1_IRQHandler+0x5c>
			Fifo1.tct = (uint16_t)i;
 80012e4:	3b01      	subs	r3, #1
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	8093      	strh	r3, [r2, #4]
			i = Fifo1.tri;
 80012ea:	8813      	ldrh	r3, [r2, #0]
			USART1_DR = Fifo1.tbuf[i];
 80012ec:	480a      	ldr	r0, [pc, #40]	; (8001318 <USART1_IRQHandler+0x74>)
			i = Fifo1.tri;
 80012ee:	b29b      	uxth	r3, r3
			USART1_DR = Fifo1.tbuf[i];
 80012f0:	18d1      	adds	r1, r2, r3
 80012f2:	7b09      	ldrb	r1, [r1, #12]
			Fifo1.tri = ++i % UART1_TXB;
 80012f4:	3301      	adds	r3, #1
			USART1_DR = Fifo1.tbuf[i];
 80012f6:	8001      	strh	r1, [r0, #0]
			Fifo1.tri = ++i % UART1_TXB;
 80012f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		} else {	/* No data in the tx fifo */
			USART1_CR1 &= ~_BV(7);		/* Clear TXEIE - Disable TXE irq */
 80012fc:	8013      	strh	r3, [r2, #0]
		}
	}
}
 80012fe:	bd10      	pop	{r4, pc}
			USART1_CR1 &= ~_BV(7);		/* Clear TXEIE - Disable TXE irq */
 8001300:	4a06      	ldr	r2, [pc, #24]	; (800131c <USART1_IRQHandler+0x78>)
 8001302:	8813      	ldrh	r3, [r2, #0]
 8001304:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001308:	041b      	lsls	r3, r3, #16
 800130a:	0c1b      	lsrs	r3, r3, #16
 800130c:	e7f6      	b.n	80012fc <USART1_IRQHandler+0x58>
 800130e:	bf00      	nop
 8001310:	40013800 	.word	0x40013800
 8001314:	20000006 	.word	0x20000006
 8001318:	40013804 	.word	0x40013804
 800131c:	4001380c 	.word	0x4001380c

08001320 <uart1_test>:



int uart1_test (void)
{
	return Fifo1.rct;
 8001320:	4b01      	ldr	r3, [pc, #4]	; (8001328 <uart1_test+0x8>)
 8001322:	8958      	ldrh	r0, [r3, #10]
}
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	20000006 	.word	0x20000006

0800132c <uart1_getc>:
{
	uint8_t d;
	int i;

	/* Wait while rx fifo is empty */
	while (!Fifo1.rct) ;
 800132c:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <uart1_getc+0x2c>)
 800132e:	8953      	ldrh	r3, [r2, #10]
 8001330:	b29b      	uxth	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d0fb      	beq.n	800132e <uart1_getc+0x2>

	i = Fifo1.rri;			/* Get a byte from rx fifo */
 8001336:	88d3      	ldrh	r3, [r2, #6]
 8001338:	b29b      	uxth	r3, r3
	d = Fifo1.rbuf[i];
 800133a:	18d1      	adds	r1, r2, r3
 800133c:	f891 008c 	ldrb.w	r0, [r1, #140]	; 0x8c
	Fifo1.rri = ++i % UART1_RXB;
 8001340:	3301      	adds	r3, #1
 8001342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	d = Fifo1.rbuf[i];
 8001346:	b2c0      	uxtb	r0, r0
	Fifo1.rri = ++i % UART1_RXB;
 8001348:	80d3      	strh	r3, [r2, #6]
	__disable_irq();
 800134a:	b672      	cpsid	i
	Fifo1.rct--;
 800134c:	8953      	ldrh	r3, [r2, #10]
 800134e:	3b01      	subs	r3, #1
 8001350:	b29b      	uxth	r3, r3
 8001352:	8153      	strh	r3, [r2, #10]
	__enable_irq();
 8001354:	b662      	cpsie	i

	return d;
}
 8001356:	4770      	bx	lr
 8001358:	20000006 	.word	0x20000006

0800135c <uart1_putc>:
void uart1_putc (uint8_t d)
{
	int i;

	/* Wait for tx fifo is not full */
	while (Fifo1.tct >= UART1_TXB) ;
 800135c:	4a0b      	ldr	r2, [pc, #44]	; (800138c <uart1_putc+0x30>)
 800135e:	8893      	ldrh	r3, [r2, #4]
 8001360:	2b7f      	cmp	r3, #127	; 0x7f
 8001362:	d8fc      	bhi.n	800135e <uart1_putc+0x2>

	i = Fifo1.twi;		/* Put a byte into Tx fifo */
 8001364:	8853      	ldrh	r3, [r2, #2]
 8001366:	b29b      	uxth	r3, r3
	Fifo1.tbuf[i] = d;
 8001368:	18d1      	adds	r1, r2, r3
	Fifo1.twi = ++i % UART1_TXB;
 800136a:	3301      	adds	r3, #1
 800136c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	Fifo1.tbuf[i] = d;
 8001370:	7308      	strb	r0, [r1, #12]
	Fifo1.twi = ++i % UART1_TXB;
 8001372:	8053      	strh	r3, [r2, #2]
	__disable_irq();
 8001374:	b672      	cpsid	i
	Fifo1.tct++;
 8001376:	8893      	ldrh	r3, [r2, #4]
 8001378:	3301      	adds	r3, #1
 800137a:	b29b      	uxth	r3, r3
 800137c:	8093      	strh	r3, [r2, #4]
	USART1_CR1 |= _BV(7);	/* Set TXEIE - Enable TXE irq */
 800137e:	4a04      	ldr	r2, [pc, #16]	; (8001390 <uart1_putc+0x34>)
 8001380:	8813      	ldrh	r3, [r2, #0]
 8001382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001386:	8013      	strh	r3, [r2, #0]
	__enable_irq();
 8001388:	b662      	cpsie	i
}
 800138a:	4770      	bx	lr
 800138c:	20000006 	.word	0x20000006
 8001390:	4001380c 	.word	0x4001380c

08001394 <uart1_init>:



void uart1_init (uint32_t bps)
{
	__disable_irqn(USART1_IRQn);	/* Disable USART1 interrupts */
 8001394:	2120      	movs	r1, #32
 8001396:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <uart1_init+0x70>)

	/* Attach USART1 module to I/O pads */
#if USE_UART1 == 1
	__enable_peripheral(IOPAEN);
 8001398:	4a1b      	ldr	r2, [pc, #108]	; (8001408 <uart1_init+0x74>)
{
 800139a:	b510      	push	{r4, lr}
	__disable_irqn(USART1_IRQn);	/* Disable USART1 interrupts */
 800139c:	6019      	str	r1, [r3, #0]
	__enable_peripheral(IOPAEN);
 800139e:	6813      	ldr	r3, [r2, #0]
	__gpio_conf_bit(GPIOA, 9, ALT_PP);
 80013a0:	4c1a      	ldr	r4, [pc, #104]	; (800140c <uart1_init+0x78>)
	__enable_peripheral(IOPAEN);
 80013a2:	f043 0304 	orr.w	r3, r3, #4
 80013a6:	6013      	str	r3, [r2, #0]
	__gpio_conf_bit(GPIOA, 9, ALT_PP);
 80013a8:	6823      	ldr	r3, [r4, #0]
 80013aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013ae:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80013b2:	6023      	str	r3, [r4, #0]
	__gpio_conf_bit(GPIOA, 10, IN_HIZ);
 80013b4:	6823      	ldr	r3, [r4, #0]
 80013b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80013ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013be:	6023      	str	r3, [r4, #0]
	__enable_peripheral(IOPBEN);
	__gpio_conf_bit(GPIOB, 6, ALT_PP);
	__gpio_conf_bit(GPIOB, 7, IN_HIZ);
#endif

	__enable_peripheral(USART1EN);	/* Enable USART module */
 80013c0:	6813      	ldr	r3, [r2, #0]
 80013c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c6:	6013      	str	r3, [r2, #0]
	__reset_peripheral(USART1EN);	/* Reset USART module */
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <uart1_init+0x7c>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80013d8:	601a      	str	r2, [r3, #0]
	USART1_BRR = F_PCLK2 / bps;		/* Set bit rate */
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <uart1_init+0x80>)
	USART1_CR1 = 0x202C;			/* Enable USART in N81, Enable RXNE irq */
 80013dc:	f242 022c 	movw	r2, #8236	; 0x202c
	USART1_BRR = F_PCLK2 / bps;		/* Set bit rate */
 80013e0:	fbb3 f0f0 	udiv	r0, r3, r0
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <uart1_init+0x84>)
 80013e6:	b280      	uxth	r0, r0
 80013e8:	8018      	strh	r0, [r3, #0]
	USART1_CR1 = 0x202C;			/* Enable USART in N81, Enable RXNE irq */
 80013ea:	809a      	strh	r2, [r3, #4]

	/* Clear Tx/Rx fifo */
	Fifo1.tri = 0; Fifo1.twi = 0; Fifo1.tct = 0;
 80013ec:	2200      	movs	r2, #0
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <uart1_init+0x88>)
 80013f0:	801a      	strh	r2, [r3, #0]
 80013f2:	805a      	strh	r2, [r3, #2]
 80013f4:	809a      	strh	r2, [r3, #4]
	Fifo1.rri = 0; Fifo1.rwi = 0; Fifo1.rct = 0;
 80013f6:	80da      	strh	r2, [r3, #6]
 80013f8:	811a      	strh	r2, [r3, #8]
 80013fa:	815a      	strh	r2, [r3, #10]

	__enable_irqn(USART1_IRQn);	/* Enable USART1 interrupts */
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <uart1_init+0x8c>)
 80013fe:	6019      	str	r1, [r3, #0]
}
 8001400:	bd10      	pop	{r4, pc}
 8001402:	bf00      	nop
 8001404:	e000e184 	.word	0xe000e184
 8001408:	40021018 	.word	0x40021018
 800140c:	40010804 	.word	0x40010804
 8001410:	4002100c 	.word	0x4002100c
 8001414:	016e3600 	.word	0x016e3600
 8001418:	40013808 	.word	0x40013808
 800141c:	20000006 	.word	0x20000006
 8001420:	e000e104 	.word	0xe000e104

08001424 <xputc>:
/* Put a character                              */
/*----------------------------------------------*/

void xputc (char c)
{
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
 8001424:	280a      	cmp	r0, #10
{
 8001426:	b510      	push	{r4, lr}
 8001428:	4604      	mov	r4, r0
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
 800142a:	d102      	bne.n	8001432 <xputc+0xe>
 800142c:	200d      	movs	r0, #13
 800142e:	f7ff fff9 	bl	8001424 <xputc>

	if (outptr) {
 8001432:	4a07      	ldr	r2, [pc, #28]	; (8001450 <xputc+0x2c>)
 8001434:	6813      	ldr	r3, [r2, #0]
 8001436:	b11b      	cbz	r3, 8001440 <xputc+0x1c>
		*outptr++ = (unsigned char)c;
 8001438:	1c59      	adds	r1, r3, #1
 800143a:	6011      	str	r1, [r2, #0]
 800143c:	701c      	strb	r4, [r3, #0]
		return;
	}

	if (xfunc_out) xfunc_out((unsigned char)c);
}
 800143e:	bd10      	pop	{r4, pc}
	if (xfunc_out) xfunc_out((unsigned char)c);
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <xputc+0x30>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0fa      	beq.n	800143e <xputc+0x1a>
 8001448:	4620      	mov	r0, r4
}
 800144a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (xfunc_out) xfunc_out((unsigned char)c);
 800144e:	4718      	bx	r3
 8001450:	20000114 	.word	0x20000114
 8001454:	20001a94 	.word	0x20001a94

08001458 <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 8001458:	b510      	push	{r4, lr}
 800145a:	1e44      	subs	r4, r0, #1
	while (*str)
 800145c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001460:	b900      	cbnz	r0, 8001464 <xputs+0xc>
		xputc(*str++);
}
 8001462:	bd10      	pop	{r4, pc}
		xputc(*str++);
 8001464:	f7ff ffde 	bl	8001424 <xputc>
 8001468:	e7f8      	b.n	800145c <xputs+0x4>

0800146a <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 800146a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800146e:	4602      	mov	r2, r0
 8001470:	460c      	mov	r4, r1
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
 8001472:	7810      	ldrb	r0, [r2, #0]
		if (!c) break;				/* End of format? */
 8001474:	2800      	cmp	r0, #0
 8001476:	f000 80d0 	beq.w	800161a <xvprintf+0x1b0>
		if (c != '%') {				/* Pass through it if not a % sequense */
 800147a:	2825      	cmp	r0, #37	; 0x25
 800147c:	d004      	beq.n	8001488 <xvprintf+0x1e>
		c = *fmt++;					/* Get a char */
 800147e:	1c56      	adds	r6, r2, #1
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 8001480:	f7ff ffd0 	bl	8001424 <xputc>
 8001484:	46a0      	mov	r8, r4
 8001486:	e058      	b.n	800153a <xvprintf+0xd0>
		c = *fmt++;					/* Get first char of the sequense */
 8001488:	7853      	ldrb	r3, [r2, #1]
		if (c == '0') {				/* Flag: '0' padded */
 800148a:	2b30      	cmp	r3, #48	; 0x30
 800148c:	d127      	bne.n	80014de <xvprintf+0x74>
			f = 1; c = *fmt++;
 800148e:	1cd6      	adds	r6, r2, #3
 8001490:	7893      	ldrb	r3, [r2, #2]
 8001492:	2201      	movs	r2, #1
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 8001494:	2700      	movs	r7, #0
			w = w * 10 + c - '0';
 8001496:	200a      	movs	r0, #10
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 8001498:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800149c:	2909      	cmp	r1, #9
 800149e:	d927      	bls.n	80014f0 <xvprintf+0x86>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80014a0:	f003 01df 	and.w	r1, r3, #223	; 0xdf
 80014a4:	294c      	cmp	r1, #76	; 0x4c
			f |= 4; c = *fmt++;
 80014a6:	bf02      	ittt	eq
 80014a8:	7833      	ldrbeq	r3, [r6, #0]
 80014aa:	f042 0204 	orreq.w	r2, r2, #4
 80014ae:	3601      	addeq	r6, #1
		if (!c) break;				/* End of format? */
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 80b2 	beq.w	800161a <xvprintf+0x1b0>
		if (d >= 'a') d -= 0x20;
 80014b6:	2b60      	cmp	r3, #96	; 0x60
 80014b8:	bf92      	itee	ls
 80014ba:	4618      	movls	r0, r3
 80014bc:	f1a3 0020 	subhi.w	r0, r3, #32
 80014c0:	b2c0      	uxtbhi	r0, r0
		switch (d) {				/* Type is... */
 80014c2:	284f      	cmp	r0, #79	; 0x4f
 80014c4:	f000 809d 	beq.w	8001602 <xvprintf+0x198>
 80014c8:	d819      	bhi.n	80014fe <xvprintf+0x94>
 80014ca:	2843      	cmp	r0, #67	; 0x43
 80014cc:	f000 808d 	beq.w	80015ea <xvprintf+0x180>
 80014d0:	2844      	cmp	r0, #68	; 0x44
 80014d2:	d035      	beq.n	8001540 <xvprintf+0xd6>
 80014d4:	2842      	cmp	r0, #66	; 0x42
 80014d6:	f000 8091 	beq.w	80015fc <xvprintf+0x192>
			xputc(c); continue;
 80014da:	4618      	mov	r0, r3
 80014dc:	e7d0      	b.n	8001480 <xvprintf+0x16>
			if (c == '-') {			/* Flag: left justified */
 80014de:	2b2d      	cmp	r3, #45	; 0x2d
		c = *fmt++;					/* Get first char of the sequense */
 80014e0:	bf13      	iteet	ne
 80014e2:	1c96      	addne	r6, r2, #2
				f = 2; c = *fmt++;
 80014e4:	1cd6      	addeq	r6, r2, #3
 80014e6:	7893      	ldrbeq	r3, [r2, #2]
		f = 0;
 80014e8:	2200      	movne	r2, #0
				f = 2; c = *fmt++;
 80014ea:	bf08      	it	eq
 80014ec:	2202      	moveq	r2, #2
 80014ee:	e7d1      	b.n	8001494 <xvprintf+0x2a>
			w = w * 10 + c - '0';
 80014f0:	fb00 3307 	mla	r3, r0, r7, r3
 80014f4:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 80014f8:	f816 3b01 	ldrb.w	r3, [r6], #1
 80014fc:	e7cc      	b.n	8001498 <xvprintf+0x2e>
		switch (d) {				/* Type is... */
 80014fe:	2855      	cmp	r0, #85	; 0x55
 8001500:	d01e      	beq.n	8001540 <xvprintf+0xd6>
 8001502:	2858      	cmp	r0, #88	; 0x58
 8001504:	d077      	beq.n	80015f6 <xvprintf+0x18c>
 8001506:	2853      	cmp	r0, #83	; 0x53
 8001508:	d1e7      	bne.n	80014da <xvprintf+0x70>
			p = va_arg(arp, char*);
 800150a:	6825      	ldr	r5, [r4, #0]
 800150c:	f104 0804 	add.w	r8, r4, #4
			for (j = 0; p[j]; j++) ;
 8001510:	462b      	mov	r3, r5
 8001512:	1b5c      	subs	r4, r3, r5
 8001514:	f813 1b01 	ldrb.w	r1, [r3], #1
 8001518:	2900      	cmp	r1, #0
 800151a:	d1fa      	bne.n	8001512 <xvprintf+0xa8>
			while (!(f & 2) && j++ < w) xputc(' ');
 800151c:	f002 0a02 	and.w	sl, r2, #2
 8001520:	f104 0901 	add.w	r9, r4, #1
 8001524:	f1ba 0f00 	cmp.w	sl, #0
 8001528:	d102      	bne.n	8001530 <xvprintf+0xc6>
 800152a:	42bc      	cmp	r4, r7
 800152c:	d353      	bcc.n	80015d6 <xvprintf+0x16c>
 800152e:	464c      	mov	r4, r9
			xputs(p);
 8001530:	4628      	mov	r0, r5
 8001532:	f7ff ff91 	bl	8001458 <xputs>
			while (j++ < w) xputc(' ');
 8001536:	42bc      	cmp	r4, r7
 8001538:	d352      	bcc.n	80015e0 <xvprintf+0x176>
			xputc(c); continue;
 800153a:	4644      	mov	r4, r8
 800153c:	4632      	mov	r2, r6
 800153e:	e798      	b.n	8001472 <xvprintf+0x8>
			r = 10; break;
 8001540:	f04f 0c0a 	mov.w	ip, #10
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 8001544:	2844      	cmp	r0, #68	; 0x44
 8001546:	f104 0804 	add.w	r8, r4, #4
 800154a:	6821      	ldr	r1, [r4, #0]
 800154c:	d104      	bne.n	8001558 <xvprintf+0xee>
		if (d == 'D' && (v & 0x80000000)) {
 800154e:	2900      	cmp	r1, #0
			v = 0 - v;
 8001550:	bfbc      	itt	lt
 8001552:	4249      	neglt	r1, r1
			f |= 8;
 8001554:	f042 0208 	orrlt.w	r2, r2, #8
 8001558:	2b78      	cmp	r3, #120	; 0x78
 800155a:	bf0c      	ite	eq
 800155c:	f04f 0e27 	moveq.w	lr, #39	; 0x27
 8001560:	f04f 0e07 	movne.w	lr, #7
		}
		i = 0;
 8001564:	2000      	movs	r0, #0
		do {
			d = (char)(v % r); v /= r;
 8001566:	fbb1 f4fc 	udiv	r4, r1, ip
 800156a:	fb0c 1514 	mls	r5, ip, r4, r1
 800156e:	b2eb      	uxtb	r3, r5
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8001570:	2d09      	cmp	r5, #9
 8001572:	bf84      	itt	hi
 8001574:	4473      	addhi	r3, lr
 8001576:	b2db      	uxtbhi	r3, r3
			s[i++] = d + '0';
 8001578:	3330      	adds	r3, #48	; 0x30
			d = (char)(v % r); v /= r;
 800157a:	4621      	mov	r1, r4
			s[i++] = d + '0';
 800157c:	1c45      	adds	r5, r0, #1
 800157e:	f80d 3000 	strb.w	r3, [sp, r0]
		} while (v && i < sizeof(s));
 8001582:	b114      	cbz	r4, 800158a <xvprintf+0x120>
 8001584:	2d10      	cmp	r5, #16
 8001586:	d13f      	bne.n	8001608 <xvprintf+0x19e>
 8001588:	200f      	movs	r0, #15
		if (f & 8) s[i++] = '-';
 800158a:	0713      	lsls	r3, r2, #28
 800158c:	d505      	bpl.n	800159a <xvprintf+0x130>
 800158e:	ab04      	add	r3, sp, #16
 8001590:	441d      	add	r5, r3
 8001592:	232d      	movs	r3, #45	; 0x2d
 8001594:	f805 3c10 	strb.w	r3, [r5, #-16]
 8001598:	1c85      	adds	r5, r0, #2
		j = i; d = (f & 1) ? '0' : ' ';
 800159a:	f012 0f01 	tst.w	r2, #1
 800159e:	bf0c      	ite	eq
 80015a0:	f04f 0a20 	moveq.w	sl, #32
 80015a4:	f04f 0a30 	movne.w	sl, #48	; 0x30
 80015a8:	462b      	mov	r3, r5
		while (!(f & 2) && j++ < w) xputc(d);
 80015aa:	f002 0402 	and.w	r4, r2, #2
 80015ae:	f103 0901 	add.w	r9, r3, #1
 80015b2:	bb84      	cbnz	r4, 8001616 <xvprintf+0x1ac>
 80015b4:	42bb      	cmp	r3, r7
 80015b6:	d329      	bcc.n	800160c <xvprintf+0x1a2>
		do xputc(s[--i]); while(i);
 80015b8:	3d01      	subs	r5, #1
 80015ba:	f81d 0005 	ldrb.w	r0, [sp, r5]
 80015be:	f7ff ff31 	bl	8001424 <xputc>
 80015c2:	2d00      	cmp	r5, #0
 80015c4:	d1f8      	bne.n	80015b8 <xvprintf+0x14e>
		while (j++ < w) xputc(' ');
 80015c6:	454f      	cmp	r7, r9
 80015c8:	d9b7      	bls.n	800153a <xvprintf+0xd0>
 80015ca:	2020      	movs	r0, #32
 80015cc:	f7ff ff2a 	bl	8001424 <xputc>
 80015d0:	f109 0901 	add.w	r9, r9, #1
 80015d4:	e7f7      	b.n	80015c6 <xvprintf+0x15c>
			while (!(f & 2) && j++ < w) xputc(' ');
 80015d6:	2020      	movs	r0, #32
 80015d8:	f7ff ff24 	bl	8001424 <xputc>
 80015dc:	464c      	mov	r4, r9
 80015de:	e79f      	b.n	8001520 <xvprintf+0xb6>
			while (j++ < w) xputc(' ');
 80015e0:	2020      	movs	r0, #32
 80015e2:	f7ff ff1f 	bl	8001424 <xputc>
 80015e6:	3401      	adds	r4, #1
 80015e8:	e7a5      	b.n	8001536 <xvprintf+0xcc>
			xputc((char)va_arg(arp, int)); continue;
 80015ea:	7820      	ldrb	r0, [r4, #0]
 80015ec:	f104 0804 	add.w	r8, r4, #4
 80015f0:	f7ff ff18 	bl	8001424 <xputc>
 80015f4:	e7a1      	b.n	800153a <xvprintf+0xd0>
			r = 16; break;
 80015f6:	f04f 0c10 	mov.w	ip, #16
 80015fa:	e7a3      	b.n	8001544 <xvprintf+0xda>
			r = 2; break;
 80015fc:	f04f 0c02 	mov.w	ip, #2
 8001600:	e7a0      	b.n	8001544 <xvprintf+0xda>
			r = 8; break;
 8001602:	f04f 0c08 	mov.w	ip, #8
 8001606:	e79d      	b.n	8001544 <xvprintf+0xda>
 8001608:	4628      	mov	r0, r5
 800160a:	e7ac      	b.n	8001566 <xvprintf+0xfc>
		while (!(f & 2) && j++ < w) xputc(d);
 800160c:	4650      	mov	r0, sl
 800160e:	f7ff ff09 	bl	8001424 <xputc>
 8001612:	464b      	mov	r3, r9
 8001614:	e7cb      	b.n	80015ae <xvprintf+0x144>
 8001616:	4699      	mov	r9, r3
 8001618:	e7ce      	b.n	80015b8 <xvprintf+0x14e>
	}
}
 800161a:	b004      	add	sp, #16
 800161c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001620 <xfputs>:
{
 8001620:	b570      	push	{r4, r5, r6, lr}
	pf = xfunc_out;		/* Save current output device */
 8001622:	4c06      	ldr	r4, [pc, #24]	; (800163c <xfputs+0x1c>)
 8001624:	1e4d      	subs	r5, r1, #1
 8001626:	6826      	ldr	r6, [r4, #0]
	xfunc_out = func;	/* Switch output to specified device */
 8001628:	6020      	str	r0, [r4, #0]
	while (*str)		/* Put the string */
 800162a:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800162e:	b908      	cbnz	r0, 8001634 <xfputs+0x14>
	xfunc_out = pf;		/* Restore output device */
 8001630:	6026      	str	r6, [r4, #0]
}
 8001632:	bd70      	pop	{r4, r5, r6, pc}
		xputc(*str++);
 8001634:	f7ff fef6 	bl	8001424 <xputc>
 8001638:	e7f7      	b.n	800162a <xfputs+0xa>
 800163a:	bf00      	nop
 800163c:	20001a94 	.word	0x20001a94

08001640 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 8001640:	b40f      	push	{r0, r1, r2, r3}
 8001642:	b507      	push	{r0, r1, r2, lr}
 8001644:	a904      	add	r1, sp, #16
 8001646:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list arp;


	va_start(arp, fmt);
 800164a:	9101      	str	r1, [sp, #4]
	xvprintf(fmt, arp);
 800164c:	f7ff ff0d 	bl	800146a <xvprintf>
	va_end(arp);
}
 8001650:	b003      	add	sp, #12
 8001652:	f85d eb04 	ldr.w	lr, [sp], #4
 8001656:	b004      	add	sp, #16
 8001658:	4770      	bx	lr

0800165a <xsprintf>:
void xsprintf (			/* Put a formatted string to the memory */
	char* buff,			/* Pointer to the output buffer */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 800165a:	b40e      	push	{r1, r2, r3}
 800165c:	b517      	push	{r0, r1, r2, r4, lr}
 800165e:	a905      	add	r1, sp, #20
 8001660:	f851 3b04 	ldr.w	r3, [r1], #4
	va_list arp;


	outptr = buff;		/* Switch destination for memory */
 8001664:	4c07      	ldr	r4, [pc, #28]	; (8001684 <xsprintf+0x2a>)

	va_start(arp, fmt);
 8001666:	9101      	str	r1, [sp, #4]
	outptr = buff;		/* Switch destination for memory */
 8001668:	6020      	str	r0, [r4, #0]
	xvprintf(fmt, arp);
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fefd 	bl	800146a <xvprintf>
	va_end(arp);

	*outptr = 0;		/* Terminate output string with a \0 */
 8001670:	2300      	movs	r3, #0
 8001672:	6822      	ldr	r2, [r4, #0]
	outptr = 0;			/* Switch destination for device */
 8001674:	6023      	str	r3, [r4, #0]
	*outptr = 0;		/* Terminate output string with a \0 */
 8001676:	7013      	strb	r3, [r2, #0]
}
 8001678:	b003      	add	sp, #12
 800167a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800167e:	b003      	add	sp, #12
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	20000114 	.word	0x20000114

08001688 <xfprintf>:
void xfprintf (					/* Put a formatted string to the specified device */
	void(*func)(unsigned char),	/* Pointer to the output function */
	const char*	fmt,			/* Pointer to the format string */
	...							/* Optional arguments */
)
{
 8001688:	b40e      	push	{r1, r2, r3}
 800168a:	b533      	push	{r0, r1, r4, r5, lr}
 800168c:	a905      	add	r1, sp, #20
 800168e:	f851 3b04 	ldr.w	r3, [r1], #4
	va_list arp;
	void (*pf)(unsigned char);


	pf = xfunc_out;		/* Save current output device */
 8001692:	4c06      	ldr	r4, [pc, #24]	; (80016ac <xfprintf+0x24>)
	xfunc_out = func;	/* Switch output to specified device */

	va_start(arp, fmt);
 8001694:	9101      	str	r1, [sp, #4]
	pf = xfunc_out;		/* Save current output device */
 8001696:	6825      	ldr	r5, [r4, #0]
	xfunc_out = func;	/* Switch output to specified device */
 8001698:	6020      	str	r0, [r4, #0]
	xvprintf(fmt, arp);
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff fee5 	bl	800146a <xvprintf>
	va_end(arp);

	xfunc_out = pf;		/* Restore output device */
 80016a0:	6025      	str	r5, [r4, #0]
}
 80016a2:	b002      	add	sp, #8
 80016a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80016a8:	b003      	add	sp, #12
 80016aa:	4770      	bx	lr
 80016ac:	20001a94 	.word	0x20001a94

080016b0 <put_dump>:
	const void* buff,		/* Pointer to the array to be dumped */
	unsigned long addr,		/* Heading address value */
	int len,				/* Number of items to be dumped */
	int width				/* Size of the items (DW_CHAR, DW_SHORT, DW_LONG) */
)
{
 80016b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016b2:	461e      	mov	r6, r3
 80016b4:	4604      	mov	r4, r0
	const unsigned char *bp;
	const unsigned short *sp;
	const unsigned long *lp;


	xprintf("%08lX:", addr);		/* address */
 80016b6:	4821      	ldr	r0, [pc, #132]	; (800173c <put_dump+0x8c>)
{
 80016b8:	4615      	mov	r5, r2
	xprintf("%08lX:", addr);		/* address */
 80016ba:	f7ff ffc1 	bl	8001640 <xprintf>

	switch (width) {
 80016be:	2e02      	cmp	r6, #2
 80016c0:	d030      	beq.n	8001724 <put_dump+0x74>
 80016c2:	2e04      	cmp	r6, #4
 80016c4:	d108      	bne.n	80016d8 <put_dump+0x28>
		while (--len);
		break;
	case DW_LONG:
		lp = buff;
		do								/* Hexdecimal dump */
			xprintf(" %08LX", *lp++);
 80016c6:	4e1e      	ldr	r6, [pc, #120]	; (8001740 <put_dump+0x90>)
 80016c8:	f854 1b04 	ldr.w	r1, [r4], #4
 80016cc:	4630      	mov	r0, r6
 80016ce:	f7ff ffb7 	bl	8001640 <xprintf>
		while (--len);
 80016d2:	3d01      	subs	r5, #1
 80016d4:	d1f8      	bne.n	80016c8 <put_dump+0x18>
 80016d6:	e00d      	b.n	80016f4 <put_dump+0x44>
	switch (width) {
 80016d8:	2e01      	cmp	r6, #1
 80016da:	d10b      	bne.n	80016f4 <put_dump+0x44>
 80016dc:	4626      	mov	r6, r4
			xprintf(" %02X", bp[i]);
 80016de:	4f19      	ldr	r7, [pc, #100]	; (8001744 <put_dump+0x94>)
		for (i = 0; i < len; i++)		/* Hexdecimal dump */
 80016e0:	1b33      	subs	r3, r6, r4
 80016e2:	429d      	cmp	r5, r3
 80016e4:	dc0e      	bgt.n	8001704 <put_dump+0x54>
		xputc(' ');
 80016e6:	2020      	movs	r0, #32
 80016e8:	f7ff fe9c 	bl	8001424 <xputc>
		for (i = 0; i < len; i++)		/* ASCII dump */
 80016ec:	4626      	mov	r6, r4
 80016ee:	1b33      	subs	r3, r6, r4
 80016f0:	429d      	cmp	r5, r3
 80016f2:	dc0d      	bgt.n	8001710 <put_dump+0x60>
		break;
	}

#if !_LF_CRLF
	xputc('\r');
 80016f4:	200d      	movs	r0, #13
 80016f6:	f7ff fe95 	bl	8001424 <xputc>
#endif
	xputc('\n');
}
 80016fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	xputc('\n');
 80016fe:	200a      	movs	r0, #10
 8001700:	f7ff be90 	b.w	8001424 <xputc>
			xprintf(" %02X", bp[i]);
 8001704:	f816 1b01 	ldrb.w	r1, [r6], #1
 8001708:	4638      	mov	r0, r7
 800170a:	f7ff ff99 	bl	8001640 <xprintf>
 800170e:	e7e7      	b.n	80016e0 <put_dump+0x30>
			xputc((bp[i] >= ' ' && bp[i] <= '~') ? bp[i] : '.');
 8001710:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001714:	f1a0 0320 	sub.w	r3, r0, #32
 8001718:	2b5e      	cmp	r3, #94	; 0x5e
 800171a:	bf88      	it	hi
 800171c:	202e      	movhi	r0, #46	; 0x2e
 800171e:	f7ff fe81 	bl	8001424 <xputc>
 8001722:	e7e4      	b.n	80016ee <put_dump+0x3e>
			xprintf(" %04X", *sp++);
 8001724:	4e08      	ldr	r6, [pc, #32]	; (8001748 <put_dump+0x98>)
 8001726:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 800172a:	f834 1b02 	ldrh.w	r1, [r4], #2
 800172e:	4630      	mov	r0, r6
 8001730:	f7ff ff86 	bl	8001640 <xprintf>
		while (--len);
 8001734:	42ac      	cmp	r4, r5
 8001736:	d1f8      	bne.n	800172a <put_dump+0x7a>
 8001738:	e7dc      	b.n	80016f4 <put_dump+0x44>
 800173a:	bf00      	nop
 800173c:	080059d0 	.word	0x080059d0
 8001740:	080059e3 	.word	0x080059e3
 8001744:	080059d7 	.word	0x080059d7
 8001748:	080059dd 	.word	0x080059dd

0800174c <xgets>:

int xgets (		/* 0:End of stream, 1:A line arrived */
	char* buff,	/* Pointer to the buffer */
	int len		/* Buffer length */
)
{
 800174c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int c, i;


	if (!xfunc_in) return 0;		/* No input function specified */
 8001750:	4e15      	ldr	r6, [pc, #84]	; (80017a8 <xgets+0x5c>)
{
 8001752:	4607      	mov	r7, r0
	if (!xfunc_in) return 0;		/* No input function specified */
 8001754:	6832      	ldr	r2, [r6, #0]
 8001756:	b912      	cbnz	r2, 800175e <xgets+0x12>
 8001758:	2000      	movs	r0, #0
		xputc('\r');
#endif
		xputc('\n');
#endif
	return 1;
}
 800175a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i = 0;
 800175e:	2400      	movs	r4, #0
		if (c >= ' ' && i < len - 1) {	/* Visible chars */
 8001760:	1e4d      	subs	r5, r1, #1
		c = xfunc_in();				/* Get a char from the incoming stream */
 8001762:	6833      	ldr	r3, [r6, #0]
 8001764:	4798      	blx	r3
		if (!c) return 0;			/* End of stream? */
 8001766:	2800      	cmp	r0, #0
 8001768:	d0f6      	beq.n	8001758 <xgets+0xc>
		if (c == '\r') break;		/* End of line? */
 800176a:	280d      	cmp	r0, #13
 800176c:	d012      	beq.n	8001794 <xgets+0x48>
		if (c == '\b' && i) {		/* Back space? */
 800176e:	2808      	cmp	r0, #8
 8001770:	d105      	bne.n	800177e <xgets+0x32>
 8001772:	2c00      	cmp	r4, #0
 8001774:	d0f5      	beq.n	8001762 <xgets+0x16>
			i--;
 8001776:	3c01      	subs	r4, #1
			xputc(c);
 8001778:	f7ff fe54 	bl	8001424 <xputc>
 800177c:	e7f1      	b.n	8001762 <xgets+0x16>
		if (c >= ' ' && i < len - 1) {	/* Visible chars */
 800177e:	281f      	cmp	r0, #31
 8001780:	ddef      	ble.n	8001762 <xgets+0x16>
 8001782:	42ac      	cmp	r4, r5
 8001784:	daed      	bge.n	8001762 <xgets+0x16>
			buff[i++] = c;
 8001786:	5538      	strb	r0, [r7, r4]
 8001788:	f104 0801 	add.w	r8, r4, #1
			xputc(c);
 800178c:	f7ff fe4a 	bl	8001424 <xputc>
			buff[i++] = c;
 8001790:	4644      	mov	r4, r8
 8001792:	e7e6      	b.n	8001762 <xgets+0x16>
	buff[i] = 0;	/* Terminate with a \0 */
 8001794:	2300      	movs	r3, #0
 8001796:	553b      	strb	r3, [r7, r4]
		xputc('\r');
 8001798:	f7ff fe44 	bl	8001424 <xputc>
		xputc('\n');
 800179c:	200a      	movs	r0, #10
 800179e:	f7ff fe41 	bl	8001424 <xputc>
	return 1;
 80017a2:	2001      	movs	r0, #1
 80017a4:	e7d9      	b.n	800175a <xgets+0xe>
 80017a6:	bf00      	nop
 80017a8:	20001a90 	.word	0x20001a90

080017ac <xfgets>:
int xfgets (	/* 0:End of stream, 1:A line arrived */
	unsigned char (*func)(void),	/* Pointer to the input stream function */
	char* buff,	/* Pointer to the buffer */
	int len		/* Buffer length */
)
{
 80017ac:	b538      	push	{r3, r4, r5, lr}
 80017ae:	460b      	mov	r3, r1
	unsigned char (*pf)(void);
	int n;


	pf = xfunc_in;			/* Save current input device */
 80017b0:	4c04      	ldr	r4, [pc, #16]	; (80017c4 <xfgets+0x18>)
	xfunc_in = func;		/* Switch input to specified device */
	n = xgets(buff, len);	/* Get a line */
 80017b2:	4611      	mov	r1, r2
	pf = xfunc_in;			/* Save current input device */
 80017b4:	6825      	ldr	r5, [r4, #0]
	xfunc_in = func;		/* Switch input to specified device */
 80017b6:	6020      	str	r0, [r4, #0]
	n = xgets(buff, len);	/* Get a line */
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ffc7 	bl	800174c <xgets>
	xfunc_in = pf;			/* Restore input device */
 80017be:	6025      	str	r5, [r4, #0]

	return n;
}
 80017c0:	bd38      	pop	{r3, r4, r5, pc}
 80017c2:	bf00      	nop
 80017c4:	20001a90 	.word	0x20001a90

080017c8 <xatoi>:
{
	unsigned long val;
	unsigned char c, r, s = 0;


	*res = 0;
 80017c8:	2300      	movs	r3, #0
{
 80017ca:	b570      	push	{r4, r5, r6, lr}
	*res = 0;
 80017cc:	600b      	str	r3, [r1, #0]

	while ((c = **str) == ' ') (*str)++;	/* Skip leading spaces */
 80017ce:	6802      	ldr	r2, [r0, #0]
 80017d0:	7813      	ldrb	r3, [r2, #0]
 80017d2:	2b20      	cmp	r3, #32
 80017d4:	d01d      	beq.n	8001812 <xatoi+0x4a>

	if (c == '-') {		/* negative? */
 80017d6:	2b2d      	cmp	r3, #45	; 0x2d
		s = 1;
		c = *(++(*str));
 80017d8:	bf01      	itttt	eq
 80017da:	1c53      	addeq	r3, r2, #1
 80017dc:	6003      	streq	r3, [r0, #0]
 80017de:	7853      	ldrbeq	r3, [r2, #1]
		s = 1;
 80017e0:	2601      	moveq	r6, #1
	unsigned char c, r, s = 0;
 80017e2:	bf18      	it	ne
 80017e4:	2600      	movne	r6, #0
	}

	if (c == '0') {
 80017e6:	2b30      	cmp	r3, #48	; 0x30
 80017e8:	d123      	bne.n	8001832 <xatoi+0x6a>
		c = *(++(*str));
 80017ea:	6802      	ldr	r2, [r0, #0]
 80017ec:	1c53      	adds	r3, r2, #1
 80017ee:	6003      	str	r3, [r0, #0]
 80017f0:	7853      	ldrb	r3, [r2, #1]
		switch (c) {
 80017f2:	2b62      	cmp	r3, #98	; 0x62
 80017f4:	d010      	beq.n	8001818 <xatoi+0x50>
 80017f6:	2b78      	cmp	r3, #120	; 0x78
 80017f8:	d113      	bne.n	8001822 <xatoi+0x5a>
		case 'x':		/* hexdecimal */
			r = 16; c = *(++(*str));
 80017fa:	2510      	movs	r5, #16
 80017fc:	1c93      	adds	r3, r2, #2
 80017fe:	6003      	str	r3, [r0, #0]
 8001800:	7893      	ldrb	r3, [r2, #2]
	} else {
		if (c < '0' || c > '9') return 0;	/* EOL or invalid char */
		r = 10;			/* decimal */
	}

	val = 0;
 8001802:	2400      	movs	r4, #0
	while (c > ' ') {
 8001804:	2b20      	cmp	r3, #32
 8001806:	d81c      	bhi.n	8001842 <xatoi+0x7a>
		}
		if (c >= r) return 0;		/* invalid char for current radix */
		val = val * r + c;
		c = *(++(*str));
	}
	if (s) val = 0 - val;			/* apply sign if needed */
 8001808:	b106      	cbz	r6, 800180c <xatoi+0x44>
 800180a:	4264      	negs	r4, r4

	*res = val;
 800180c:	600c      	str	r4, [r1, #0]
			if (c <= ' ') return 1;	/* single zero */
 800180e:	2001      	movs	r0, #1
 8001810:	e00e      	b.n	8001830 <xatoi+0x68>
	while ((c = **str) == ' ') (*str)++;	/* Skip leading spaces */
 8001812:	3201      	adds	r2, #1
 8001814:	6002      	str	r2, [r0, #0]
 8001816:	e7da      	b.n	80017ce <xatoi+0x6>
			r = 2; c = *(++(*str));
 8001818:	1c93      	adds	r3, r2, #2
 800181a:	6003      	str	r3, [r0, #0]
 800181c:	7893      	ldrb	r3, [r2, #2]
 800181e:	2502      	movs	r5, #2
			break;
 8001820:	e7ef      	b.n	8001802 <xatoi+0x3a>
			if (c <= ' ') return 1;	/* single zero */
 8001822:	2b20      	cmp	r3, #32
 8001824:	d9f3      	bls.n	800180e <xatoi+0x46>
			if (c < '0' || c > '9') return 0;	/* invalid char */
 8001826:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800182a:	2a09      	cmp	r2, #9
 800182c:	d907      	bls.n	800183e <xatoi+0x76>
 800182e:	2000      	movs	r0, #0
	return 1;
}
 8001830:	bd70      	pop	{r4, r5, r6, pc}
		if (c < '0' || c > '9') return 0;	/* EOL or invalid char */
 8001832:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001836:	2a09      	cmp	r2, #9
 8001838:	d8f9      	bhi.n	800182e <xatoi+0x66>
		r = 10;			/* decimal */
 800183a:	250a      	movs	r5, #10
 800183c:	e7e1      	b.n	8001802 <xatoi+0x3a>
			r = 8;		/* octal */
 800183e:	2508      	movs	r5, #8
 8001840:	e7df      	b.n	8001802 <xatoi+0x3a>
		if (c >= 'a') c -= 0x20;
 8001842:	2b60      	cmp	r3, #96	; 0x60
 8001844:	bf84      	itt	hi
 8001846:	3b20      	subhi	r3, #32
 8001848:	b2db      	uxtbhi	r3, r3
		c -= '0';
 800184a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800184e:	b2d2      	uxtb	r2, r2
		if (c >= 17) {
 8001850:	2a10      	cmp	r2, #16
 8001852:	d903      	bls.n	800185c <xatoi+0x94>
			c -= 7;
 8001854:	3b37      	subs	r3, #55	; 0x37
 8001856:	b2da      	uxtb	r2, r3
			if (c <= 9) return 0;	/* invalid char */
 8001858:	2a09      	cmp	r2, #9
 800185a:	d9e8      	bls.n	800182e <xatoi+0x66>
		if (c >= r) return 0;		/* invalid char for current radix */
 800185c:	42aa      	cmp	r2, r5
 800185e:	d2e6      	bcs.n	800182e <xatoi+0x66>
		c = *(++(*str));
 8001860:	6803      	ldr	r3, [r0, #0]
		val = val * r + c;
 8001862:	fb04 2405 	mla	r4, r4, r5, r2
		c = *(++(*str));
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	6002      	str	r2, [r0, #0]
 800186a:	785b      	ldrb	r3, [r3, #1]
 800186c:	e7ca      	b.n	8001804 <xatoi+0x3c>
 800186e:	bf00      	nop

08001870 <rtc_initialize>:
int rtc_initialize (void)	/* 1:RTC is available, 0:RTC is not available */
{
	uint32_t n;

	/* Enable BKP and PWR module */
	__enable_peripheral(BKPEN);
 8001870:	4b24      	ldr	r3, [pc, #144]	; (8001904 <rtc_initialize+0x94>)
{
 8001872:	b570      	push	{r4, r5, r6, lr}
	__enable_peripheral(BKPEN);
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800187a:	601a      	str	r2, [r3, #0]
	__enable_peripheral(PWREN);
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001882:	601a      	str	r2, [r3, #0]

	PWR_CR |= _BV(8);	/* Enable write access to backup domain */
 8001884:	4a20      	ldr	r2, [pc, #128]	; (8001908 <rtc_initialize+0x98>)
 8001886:	6813      	ldr	r3, [r2, #0]
 8001888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800188c:	6013      	str	r3, [r2, #0]

	RCC_BDCR = 0x00008101;	/* Enable LSE oscillator */
 800188e:	f248 1301 	movw	r3, #33025	; 0x8101
 8001892:	f502 32d0 	add.w	r2, r2, #106496	; 0x1a000
 8001896:	3220      	adds	r2, #32
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	4b1c      	ldr	r3, [pc, #112]	; (800190c <rtc_initialize+0x9c>)
	for (n = 8000000; n && !(RCC_BDCR & _BV(1)); n--) ;	/* Wait for LSE start and stable */
 800189c:	6811      	ldr	r1, [r2, #0]
 800189e:	078e      	lsls	r6, r1, #30
 80018a0:	d50f      	bpl.n	80018c2 <rtc_initialize+0x52>
	if (n) {
		for (n = 100000; n && !(RTC_CRL & _BV(5)); n--) ;
 80018a2:	491b      	ldr	r1, [pc, #108]	; (8001910 <rtc_initialize+0xa0>)
 80018a4:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <rtc_initialize+0xa4>)
 80018a6:	460c      	mov	r4, r1
 80018a8:	8808      	ldrh	r0, [r1, #0]
 80018aa:	0685      	lsls	r5, r0, #26
 80018ac:	d510      	bpl.n	80018d0 <rtc_initialize+0x60>
		if (n) {
			RTC_CRL = _BV(4);					/* Enter RTC configuration mode */
 80018ae:	2010      	movs	r0, #16
			RTC_PRLH = 0; RTC_PRLL = F_LSE - 1;	/* Set RTC clock divider for 1 sec tick */
 80018b0:	f647 76ff 	movw	r6, #32767	; 0x7fff
			RTC_CRL = _BV(4);					/* Enter RTC configuration mode */
 80018b4:	8008      	strh	r0, [r1, #0]
			RTC_PRLH = 0; RTC_PRLL = F_LSE - 1;	/* Set RTC clock divider for 1 sec tick */
 80018b6:	2000      	movs	r0, #0
 80018b8:	4d17      	ldr	r5, [pc, #92]	; (8001918 <rtc_initialize+0xa8>)
 80018ba:	8028      	strh	r0, [r5, #0]
 80018bc:	80ae      	strh	r6, [r5, #4]
			RTC_CRL = 0;						/* Exit RTC configuration mode */
 80018be:	8008      	strh	r0, [r1, #0]
 80018c0:	e00b      	b.n	80018da <rtc_initialize+0x6a>
	for (n = 8000000; n && !(RCC_BDCR & _BV(1)); n--) ;	/* Wait for LSE start and stable */
 80018c2:	3b01      	subs	r3, #1
 80018c4:	d1ea      	bne.n	800189c <rtc_initialize+0x2c>
	}

	if (n) {
		rtcok = 1;		/* RTC is available */
	} else {
		rtcok = 0;		/* RTC is not available */
 80018c6:	2300      	movs	r3, #0
 80018c8:	4914      	ldr	r1, [pc, #80]	; (800191c <rtc_initialize+0xac>)
 80018ca:	700b      	strb	r3, [r1, #0]
		RCC_BDCR = 0;	/* Stop LSE oscillator */
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	e00d      	b.n	80018ec <rtc_initialize+0x7c>
		for (n = 100000; n && !(RTC_CRL & _BV(5)); n--) ;
 80018d0:	3b01      	subs	r3, #1
 80018d2:	d1e9      	bne.n	80018a8 <rtc_initialize+0x38>
 80018d4:	e7f7      	b.n	80018c6 <rtc_initialize+0x56>
			for ( ; n && !(RTC_CRL & _BV(5)); n--) ;	/* Wait for RTC internal process */
 80018d6:	3b01      	subs	r3, #1
 80018d8:	d0f5      	beq.n	80018c6 <rtc_initialize+0x56>
 80018da:	8821      	ldrh	r1, [r4, #0]
 80018dc:	0688      	lsls	r0, r1, #26
 80018de:	d5fa      	bpl.n	80018d6 <rtc_initialize+0x66>
			for ( ; n && !(RTC_CRL & _BV(3)); n--) ;	/* Wait for RTC is in sync */
 80018e0:	8821      	ldrh	r1, [r4, #0]
 80018e2:	0709      	lsls	r1, r1, #28
 80018e4:	d50a      	bpl.n	80018fc <rtc_initialize+0x8c>
		rtcok = 1;		/* RTC is available */
 80018e6:	2201      	movs	r2, #1
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <rtc_initialize+0xac>)
 80018ea:	701a      	strb	r2, [r3, #0]
	}

	PWR_CR &= ~_BV(8);	/* Inhibit write access to backup domain */
 80018ec:	4a06      	ldr	r2, [pc, #24]	; (8001908 <rtc_initialize+0x98>)
 80018ee:	6813      	ldr	r3, [r2, #0]
 80018f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018f4:	6013      	str	r3, [r2, #0]

	return rtcok;
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <rtc_initialize+0xac>)
 80018f8:	7818      	ldrb	r0, [r3, #0]
}
 80018fa:	bd70      	pop	{r4, r5, r6, pc}
			for ( ; n && !(RTC_CRL & _BV(3)); n--) ;	/* Wait for RTC is in sync */
 80018fc:	3b01      	subs	r3, #1
 80018fe:	d1ef      	bne.n	80018e0 <rtc_initialize+0x70>
 8001900:	e7e1      	b.n	80018c6 <rtc_initialize+0x56>
 8001902:	bf00      	nop
 8001904:	4002101c 	.word	0x4002101c
 8001908:	40007000 	.word	0x40007000
 800190c:	007a1200 	.word	0x007a1200
 8001910:	40002804 	.word	0x40002804
 8001914:	000186a0 	.word	0x000186a0
 8001918:	40002808 	.word	0x40002808
 800191c:	20000118 	.word	0x20000118

08001920 <rtc_setutc>:
/*------------------------------------------*/
/* Set time in UTC                          */
/*------------------------------------------*/

int rtc_setutc (uint32_t tmr)
{
 8001920:	b530      	push	{r4, r5, lr}
	uint32_t n = 0;


	if (rtcok) {
 8001922:	4b19      	ldr	r3, [pc, #100]	; (8001988 <rtc_setutc+0x68>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	b32b      	cbz	r3, 8001974 <rtc_setutc+0x54>
		PWR_CR |= _BV(8);		/* Enable write access to backup domain */
 8001928:	4a18      	ldr	r2, [pc, #96]	; (800198c <rtc_setutc+0x6c>)
 800192a:	6813      	ldr	r3, [r2, #0]
 800192c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001930:	6013      	str	r3, [r2, #0]
		for (n = 100000; n && !(RTC_CRL & _BV(5)); n--) ;	/* Wait for end of RTC internal process */
 8001932:	f5a2 428f 	sub.w	r2, r2, #18304	; 0x4780
 8001936:	3a7c      	subs	r2, #124	; 0x7c
 8001938:	4615      	mov	r5, r2
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <rtc_setutc+0x70>)
 800193c:	8811      	ldrh	r1, [r2, #0]
 800193e:	0689      	lsls	r1, r1, #26
 8001940:	d510      	bpl.n	8001964 <rtc_setutc+0x44>
		if (n) {
			RTC_CRL = _BV(4);		/* Enter RTC configuration mode */
 8001942:	2110      	movs	r1, #16
 8001944:	8011      	strh	r1, [r2, #0]
			RTC_CNTL = tmr; RTC_CNTH = tmr >> 16;	/* Set time counter */
 8001946:	4913      	ldr	r1, [pc, #76]	; (8001994 <rtc_setutc+0x74>)
 8001948:	b284      	uxth	r4, r0
 800194a:	0c00      	lsrs	r0, r0, #16
 800194c:	800c      	strh	r4, [r1, #0]
 800194e:	f821 0c04 	strh.w	r0, [r1, #-4]
			RTC_PRLL = F_LSE - 1; RTC_PRLH = 0; 	/* Set RTC clock divider for 1 sec tick */
 8001952:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8001956:	f821 0c10 	strh.w	r0, [r1, #-16]
 800195a:	2100      	movs	r1, #0
 800195c:	480e      	ldr	r0, [pc, #56]	; (8001998 <rtc_setutc+0x78>)
 800195e:	8001      	strh	r1, [r0, #0]
			RTC_CRL = 0;			/* Exit RTC configuration mode */
 8001960:	8011      	strh	r1, [r2, #0]
 8001962:	e00d      	b.n	8001980 <rtc_setutc+0x60>
		for (n = 100000; n && !(RTC_CRL & _BV(5)); n--) ;	/* Wait for end of RTC internal process */
 8001964:	3b01      	subs	r3, #1
 8001966:	d1e9      	bne.n	800193c <rtc_setutc+0x1c>
 8001968:	2300      	movs	r3, #0
			for ( ; n && !(RTC_CRL & _BV(5)); n--) ;	/* Wait for end of RTC internal process */
		}
		PWR_CR &= ~_BV(8);		/* Inhibit write access to backup domain */
 800196a:	4908      	ldr	r1, [pc, #32]	; (800198c <rtc_setutc+0x6c>)
 800196c:	680a      	ldr	r2, [r1, #0]
 800196e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001972:	600a      	str	r2, [r1, #0]
	}

	return n ? 1 : 0;
 8001974:	1c18      	adds	r0, r3, #0
 8001976:	bf18      	it	ne
 8001978:	2001      	movne	r0, #1
}
 800197a:	bd30      	pop	{r4, r5, pc}
			for ( ; n && !(RTC_CRL & _BV(5)); n--) ;	/* Wait for end of RTC internal process */
 800197c:	3b01      	subs	r3, #1
 800197e:	d0f3      	beq.n	8001968 <rtc_setutc+0x48>
 8001980:	882a      	ldrh	r2, [r5, #0]
 8001982:	0692      	lsls	r2, r2, #26
 8001984:	d5fa      	bpl.n	800197c <rtc_setutc+0x5c>
 8001986:	e7f0      	b.n	800196a <rtc_setutc+0x4a>
 8001988:	20000118 	.word	0x20000118
 800198c:	40007000 	.word	0x40007000
 8001990:	000186a0 	.word	0x000186a0
 8001994:	4000281c 	.word	0x4000281c
 8001998:	40002808 	.word	0x40002808

0800199c <rtc_getutc>:
/*------------------------------------------*/
/* Get time in UTC                          */
/*------------------------------------------*/

int rtc_getutc (uint32_t* tmr)
{
 800199c:	b530      	push	{r4, r5, lr}
	uint32_t t1, t2;


	if (rtcok) {
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <rtc_getutc+0x34>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	b193      	cbz	r3, 80019ca <rtc_getutc+0x2e>
		/* Read RTC counter */
		t1 = RTC_CNTH << 16 | RTC_CNTL;
 80019a4:	490b      	ldr	r1, [pc, #44]	; (80019d4 <rtc_getutc+0x38>)
 80019a6:	4a0c      	ldr	r2, [pc, #48]	; (80019d8 <rtc_getutc+0x3c>)
 80019a8:	880c      	ldrh	r4, [r1, #0]
 80019aa:	8813      	ldrh	r3, [r2, #0]
 80019ac:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80019b0:	460c      	mov	r4, r1
 80019b2:	4611      	mov	r1, r2
		do {
			t2 = t1;
			t1 = RTC_CNTH << 16 | RTC_CNTL;	
 80019b4:	8825      	ldrh	r5, [r4, #0]
 80019b6:	880a      	ldrh	r2, [r1, #0]
 80019b8:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
		} while (t1 != t2);
 80019bc:	429a      	cmp	r2, r3
 80019be:	d102      	bne.n	80019c6 <rtc_getutc+0x2a>
		*tmr = t1;
 80019c0:	6003      	str	r3, [r0, #0]
 80019c2:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80019c4:	bd30      	pop	{r4, r5, pc}
		} while (t1 != t2);
 80019c6:	4613      	mov	r3, r2
 80019c8:	e7f4      	b.n	80019b4 <rtc_getutc+0x18>
	return 0;
 80019ca:	4618      	mov	r0, r3
 80019cc:	e7fa      	b.n	80019c4 <rtc_getutc+0x28>
 80019ce:	bf00      	nop
 80019d0:	20000118 	.word	0x20000118
 80019d4:	40002818 	.word	0x40002818
 80019d8:	4000281c 	.word	0x4000281c

080019dc <rtc_gettime>:
/*------------------------------------------*/
/* Get time in calendar form                */
/*------------------------------------------*/

int rtc_gettime (RTCTIME* rtc)
{
 80019dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80019de:	4604      	mov	r4, r0
	uint32_t utc, n, i, d;

	if (!rtc_getutc(&utc)) return 0;
 80019e0:	a801      	add	r0, sp, #4
 80019e2:	f7ff ffdb 	bl	800199c <rtc_getutc>
 80019e6:	2800      	cmp	r0, #0
 80019e8:	d05a      	beq.n	8001aa0 <rtc_gettime+0xc4>

	utc += (long)(_RTC_TDIF * 3600);

	rtc->sec = (uint8_t)(utc % 60); utc /= 60;
 80019ea:	223c      	movs	r2, #60	; 0x3c
	utc += (long)(_RTC_TDIF * 3600);
 80019ec:	9b01      	ldr	r3, [sp, #4]
	rtc->hour = (uint8_t)(utc % 24); utc /= 24;
	rtc->wday = (uint8_t)((utc + 4) % 7);
	rtc->year = (uint16_t)(1970 + utc / 1461 * 4); utc %= 1461;
	n = ((utc >= 1096) ? utc - 1 : utc) / 365;
	rtc->year += n;
	utc -= n * 365 + (n > 2 ? 1 : 0);
 80019ee:	2500      	movs	r5, #0
	utc += (long)(_RTC_TDIF * 3600);
 80019f0:	f503 43fd 	add.w	r3, r3, #32384	; 0x7e80
 80019f4:	3310      	adds	r3, #16
	rtc->sec = (uint8_t)(utc % 60); utc /= 60;
 80019f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80019fa:	fb02 3110 	mls	r1, r2, r0, r3
 80019fe:	71a1      	strb	r1, [r4, #6]
	rtc->min = (uint8_t)(utc % 60); utc /= 60;
 8001a00:	fbb0 f1f2 	udiv	r1, r0, r2
 8001a04:	fb02 0211 	mls	r2, r2, r1, r0
 8001a08:	7162      	strb	r2, [r4, #5]
 8001a0a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
	rtc->hour = (uint8_t)(utc % 24); utc /= 24;
 8001a0e:	2018      	movs	r0, #24
	rtc->min = (uint8_t)(utc % 60); utc /= 60;
 8001a10:	fbb3 f2f2 	udiv	r2, r3, r2
	rtc->hour = (uint8_t)(utc % 24); utc /= 24;
 8001a14:	fbb2 f1f0 	udiv	r1, r2, r0
 8001a18:	fb00 2211 	mls	r2, r0, r1, r2
 8001a1c:	4925      	ldr	r1, [pc, #148]	; (8001ab4 <rtc_gettime+0xd8>)
 8001a1e:	7122      	strb	r2, [r4, #4]
 8001a20:	fbb3 f1f1 	udiv	r1, r3, r1
	rtc->wday = (uint8_t)((utc + 4) % 7);
 8001a24:	2207      	movs	r2, #7
 8001a26:	1d08      	adds	r0, r1, #4
 8001a28:	fbb0 f2f2 	udiv	r2, r0, r2
 8001a2c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8001a30:	1a82      	subs	r2, r0, r2
	rtc->year = (uint16_t)(1970 + utc / 1461 * 4); utc %= 1461;
 8001a32:	f240 50b5 	movw	r0, #1461	; 0x5b5
	rtc->wday = (uint8_t)((utc + 4) % 7);
 8001a36:	71e2      	strb	r2, [r4, #7]
	rtc->year = (uint16_t)(1970 + utc / 1461 * 4); utc %= 1461;
 8001a38:	4a1f      	ldr	r2, [pc, #124]	; (8001ab8 <rtc_gettime+0xdc>)
	for (i = 0; i < 12; i++) {
		d = samurai[i];
 8001a3a:	4e20      	ldr	r6, [pc, #128]	; (8001abc <rtc_gettime+0xe0>)
	rtc->year = (uint16_t)(1970 + utc / 1461 * 4); utc %= 1461;
 8001a3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a40:	fbb1 f2f0 	udiv	r2, r1, r0
 8001a44:	fb00 1212 	mls	r2, r0, r2, r1
	n = ((utc >= 1096) ? utc - 1 : utc) / 365;
 8001a48:	f5b2 6f89 	cmp.w	r2, #1096	; 0x448
 8001a4c:	bf36      	itet	cc
 8001a4e:	f240 116d 	movwcc	r1, #365	; 0x16d
 8001a52:	2103      	movcs	r1, #3
 8001a54:	fbb2 f1f1 	udivcc	r1, r2, r1
	rtc->year = (uint16_t)(1970 + utc / 1461 * 4); utc %= 1461;
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	f203 73b2 	addw	r3, r3, #1970	; 0x7b2
 8001a5e:	b29b      	uxth	r3, r3
	rtc->year += n;
 8001a60:	440b      	add	r3, r1
 8001a62:	8023      	strh	r3, [r4, #0]
	utc -= n * 365 + (n > 2 ? 1 : 0);
 8001a64:	f240 136d 	movw	r3, #365	; 0x16d
 8001a68:	fb03 2311 	mls	r3, r3, r1, r2
 8001a6c:	2903      	cmp	r1, #3
 8001a6e:	bf08      	it	eq
 8001a70:	3b01      	subeq	r3, #1
	for (i = 0; i < 12; i++) {
 8001a72:	462a      	mov	r2, r5
	utc -= n * 365 + (n > 2 ? 1 : 0);
 8001a74:	9301      	str	r3, [sp, #4]
		if (i == 1 && n == 2) d++;
 8001a76:	2a01      	cmp	r2, #1
		d = samurai[i];
 8001a78:	5d90      	ldrb	r0, [r2, r6]
		if (i == 1 && n == 2) d++;
 8001a7a:	d107      	bne.n	8001a8c <rtc_gettime+0xb0>
 8001a7c:	2902      	cmp	r1, #2
 8001a7e:	d100      	bne.n	8001a82 <rtc_gettime+0xa6>
 8001a80:	3001      	adds	r0, #1
		if (utc < d) break;
 8001a82:	4283      	cmp	r3, r0
 8001a84:	d304      	bcc.n	8001a90 <rtc_gettime+0xb4>
		utc -= d;
 8001a86:	1a1b      	subs	r3, r3, r0
	for (i = 0; i < 12; i++) {
 8001a88:	2202      	movs	r2, #2
 8001a8a:	e010      	b.n	8001aae <rtc_gettime+0xd2>
		if (utc < d) break;
 8001a8c:	4283      	cmp	r3, r0
 8001a8e:	d209      	bcs.n	8001aa4 <rtc_gettime+0xc8>
 8001a90:	b105      	cbz	r5, 8001a94 <rtc_gettime+0xb8>
 8001a92:	9301      	str	r3, [sp, #4]
	}
	rtc->month = (uint8_t)(1 + i);
	rtc->mday = (uint8_t)(1 + utc);

	return 1;
 8001a94:	2001      	movs	r0, #1
	rtc->mday = (uint8_t)(1 + utc);
 8001a96:	9b01      	ldr	r3, [sp, #4]
	rtc->month = (uint8_t)(1 + i);
 8001a98:	3201      	adds	r2, #1
	rtc->mday = (uint8_t)(1 + utc);
 8001a9a:	3301      	adds	r3, #1
	rtc->month = (uint8_t)(1 + i);
 8001a9c:	70a2      	strb	r2, [r4, #2]
	rtc->mday = (uint8_t)(1 + utc);
 8001a9e:	70e3      	strb	r3, [r4, #3]
}
 8001aa0:	b002      	add	sp, #8
 8001aa2:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < 12; i++) {
 8001aa4:	3201      	adds	r2, #1
 8001aa6:	2a0c      	cmp	r2, #12
		utc -= d;
 8001aa8:	eba3 0300 	sub.w	r3, r3, r0
	for (i = 0; i < 12; i++) {
 8001aac:	d0f1      	beq.n	8001a92 <rtc_gettime+0xb6>
 8001aae:	2501      	movs	r5, #1
 8001ab0:	e7e1      	b.n	8001a76 <rtc_gettime+0x9a>
 8001ab2:	bf00      	nop
 8001ab4:	00015180 	.word	0x00015180
 8001ab8:	07861f80 	.word	0x07861f80
 8001abc:	080059ea 	.word	0x080059ea

08001ac0 <rtc_settime>:
{
	uint32_t utc, i, y;


	y = rtc->year - 1970;
	if (y > 2106 || !rtc->month || !rtc->mday) return 0;
 8001ac0:	f640 023a 	movw	r2, #2106	; 0x83a
	y = rtc->year - 1970;
 8001ac4:	8803      	ldrh	r3, [r0, #0]
{
 8001ac6:	b4f0      	push	{r4, r5, r6, r7}
	y = rtc->year - 1970;
 8001ac8:	f2a3 73b2 	subw	r3, r3, #1970	; 0x7b2
	if (y > 2106 || !rtc->month || !rtc->mday) return 0;
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d837      	bhi.n	8001b40 <rtc_settime+0x80>
 8001ad0:	7886      	ldrb	r6, [r0, #2]
 8001ad2:	b3ae      	cbz	r6, 8001b40 <rtc_settime+0x80>
 8001ad4:	78c2      	ldrb	r2, [r0, #3]
 8001ad6:	b39a      	cbz	r2, 8001b40 <rtc_settime+0x80>

	utc = y / 4 * 1461; y %= 4;
	utc += y * 365 + (y > 2 ? 1 : 0);
 8001ad8:	f240 116d 	movw	r1, #365	; 0x16d
 8001adc:	f240 54b5 	movw	r4, #1461	; 0x5b5
	utc = y / 4 * 1461; y %= 4;
 8001ae0:	f003 0503 	and.w	r5, r3, #3
	utc += y * 365 + (y > 2 ? 1 : 0);
 8001ae4:	4369      	muls	r1, r5
	utc = y / 4 * 1461; y %= 4;
 8001ae6:	089b      	lsrs	r3, r3, #2
 8001ae8:	fb04 1303 	mla	r3, r4, r3, r1
	for (i = 0; i < 12 && i + 1 < rtc->month; i++) {
 8001aec:	2400      	movs	r4, #0
	utc += y * 365 + (y > 2 ? 1 : 0);
 8001aee:	2d03      	cmp	r5, #3
 8001af0:	bf08      	it	eq
 8001af2:	3301      	addeq	r3, #1
		utc += samurai[i];
 8001af4:	4f14      	ldr	r7, [pc, #80]	; (8001b48 <rtc_settime+0x88>)
	for (i = 0; i < 12 && i + 1 < rtc->month; i++) {
 8001af6:	1c61      	adds	r1, r4, #1
 8001af8:	42b1      	cmp	r1, r6
 8001afa:	d20c      	bcs.n	8001b16 <rtc_settime+0x56>
		utc += samurai[i];
 8001afc:	f817 c004 	ldrb.w	ip, [r7, r4]
		if (i == 1 && y == 2) utc++;
 8001b00:	2c01      	cmp	r4, #1
		utc += samurai[i];
 8001b02:	4463      	add	r3, ip
		if (i == 1 && y == 2) utc++;
 8001b04:	d105      	bne.n	8001b12 <rtc_settime+0x52>
 8001b06:	2d02      	cmp	r5, #2
 8001b08:	d100      	bne.n	8001b0c <rtc_settime+0x4c>
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	2102      	movs	r1, #2
 8001b0e:	460c      	mov	r4, r1
 8001b10:	e7f1      	b.n	8001af6 <rtc_settime+0x36>
	for (i = 0; i < 12 && i + 1 < rtc->month; i++) {
 8001b12:	290c      	cmp	r1, #12
 8001b14:	d1fb      	bne.n	8001b0e <rtc_settime+0x4e>
	}
	utc += rtc->mday - 1;
	utc *= 86400;
	utc += rtc->hour * 3600 + rtc->min * 60 + rtc->sec;
 8001b16:	213c      	movs	r1, #60	; 0x3c
 8001b18:	7944      	ldrb	r4, [r0, #5]
	utc += rtc->mday - 1;
 8001b1a:	3a01      	subs	r2, #1
	utc += rtc->hour * 3600 + rtc->min * 60 + rtc->sec;
 8001b1c:	4361      	muls	r1, r4
 8001b1e:	f44f 6461 	mov.w	r4, #3600	; 0xe10
	utc += rtc->mday - 1;
 8001b22:	4413      	add	r3, r2
	utc += rtc->hour * 3600 + rtc->min * 60 + rtc->sec;
 8001b24:	7902      	ldrb	r2, [r0, #4]
 8001b26:	7980      	ldrb	r0, [r0, #6]
 8001b28:	fb04 1202 	mla	r2, r4, r2, r1

	utc -= (long)(_RTC_TDIF * 3600);

	return rtc_setutc(utc);
}
 8001b2c:	bcf0      	pop	{r4, r5, r6, r7}
	utc += rtc->hour * 3600 + rtc->min * 60 + rtc->sec;
 8001b2e:	4402      	add	r2, r0
	utc -= (long)(_RTC_TDIF * 3600);
 8001b30:	f5a2 42fd 	sub.w	r2, r2, #32384	; 0x7e80
	return rtc_setutc(utc);
 8001b34:	4805      	ldr	r0, [pc, #20]	; (8001b4c <rtc_settime+0x8c>)
	utc -= (long)(_RTC_TDIF * 3600);
 8001b36:	3a10      	subs	r2, #16
	return rtc_setutc(utc);
 8001b38:	fb00 2003 	mla	r0, r0, r3, r2
 8001b3c:	f7ff bef0 	b.w	8001920 <rtc_setutc>
}
 8001b40:	2000      	movs	r0, #0
 8001b42:	bcf0      	pop	{r4, r5, r6, r7}
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	080059ea 	.word	0x080059ea
 8001b4c:	00015180 	.word	0x00015180

08001b50 <xchg_spi>:
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
	SPIx_DR = dat;				/* Start an SPI transaction */
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <xchg_spi+0x18>)
	while ((SPIx_SR & 0x83) != 0x03) ;	/* Wait for end of the transaction */
 8001b52:	4906      	ldr	r1, [pc, #24]	; (8001b6c <xchg_spi+0x1c>)
	SPIx_DR = dat;				/* Start an SPI transaction */
 8001b54:	8018      	strh	r0, [r3, #0]
	while ((SPIx_SR & 0x83) != 0x03) ;	/* Wait for end of the transaction */
 8001b56:	880a      	ldrh	r2, [r1, #0]
 8001b58:	f002 0283 	and.w	r2, r2, #131	; 0x83
 8001b5c:	2a03      	cmp	r2, #3
 8001b5e:	d1fa      	bne.n	8001b56 <xchg_spi+0x6>
	return (BYTE)SPIx_DR;		/* Return received byte */
 8001b60:	8818      	ldrh	r0, [r3, #0]
}
 8001b62:	b2c0      	uxtb	r0, r0
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	4001300c 	.word	0x4001300c
 8001b6c:	40013008 	.word	0x40013008

08001b70 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8001b70:	b510      	push	{r4, lr}
	BYTE d;


	Timer2 = wt;
 8001b72:	4c07      	ldr	r4, [pc, #28]	; (8001b90 <wait_ready+0x20>)
 8001b74:	6020      	str	r0, [r4, #0]
	do {
		d = xchg_spi(0xFF);
 8001b76:	20ff      	movs	r0, #255	; 0xff
 8001b78:	f7ff ffea 	bl	8001b50 <xchg_spi>
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && Timer2);	/* Wait for card goes ready or timeout */
 8001b7c:	28ff      	cmp	r0, #255	; 0xff
 8001b7e:	d002      	beq.n	8001b86 <wait_ready+0x16>
 8001b80:	6823      	ldr	r3, [r4, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f7      	bne.n	8001b76 <wait_ready+0x6>

	return (d == 0xFF) ? 1 : 0;
}
 8001b86:	f1a0 03ff 	sub.w	r3, r0, #255	; 0xff
 8001b8a:	4258      	negs	r0, r3
 8001b8c:	4158      	adcs	r0, r3
 8001b8e:	bd10      	pop	{r4, pc}
 8001b90:	2000011c 	.word	0x2000011c

08001b94 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
 8001b94:	2210      	movs	r2, #16
 8001b96:	4b02      	ldr	r3, [pc, #8]	; (8001ba0 <deselect+0xc>)
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8001b98:	20ff      	movs	r0, #255	; 0xff
	CS_HIGH();		/* Set CS# high */
 8001b9a:	601a      	str	r2, [r3, #0]
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8001b9c:	e7d8      	b.n	8001b50 <xchg_spi>
 8001b9e:	bf00      	nop
 8001ba0:	40010810 	.word	0x40010810

08001ba4 <select>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:OK, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
 8001ba4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <select+0x28>)
{
 8001baa:	b510      	push	{r4, lr}
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8001bac:	20ff      	movs	r0, #255	; 0xff
	CS_LOW();		/* Set CS# low */
 8001bae:	601a      	str	r2, [r3, #0]
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8001bb0:	f7ff ffce 	bl	8001b50 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8001bb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bb8:	f7ff ffda 	bl	8001b70 <wait_ready>
 8001bbc:	4604      	mov	r4, r0
 8001bbe:	b918      	cbnz	r0, 8001bc8 <select+0x24>

	deselect();
 8001bc0:	f7ff ffe8 	bl	8001b94 <deselect>
	return 0;	/* Timeout */
}
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	bd10      	pop	{r4, pc}
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8001bc8:	2401      	movs	r4, #1
 8001bca:	e7fb      	b.n	8001bc4 <select+0x20>
 8001bcc:	40010810 	.word	0x40010810

08001bd0 <send_cmd>:
)
{
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8001bd0:	0602      	lsls	r2, r0, #24
{
 8001bd2:	b538      	push	{r3, r4, r5, lr}
 8001bd4:	4604      	mov	r4, r0
 8001bd6:	460d      	mov	r5, r1
	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8001bd8:	d507      	bpl.n	8001bea <send_cmd+0x1a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
 8001bda:	2100      	movs	r1, #0
 8001bdc:	2037      	movs	r0, #55	; 0x37
 8001bde:	f7ff fff7 	bl	8001bd0 <send_cmd>
		if (res > 1) return res;
 8001be2:	2801      	cmp	r0, #1
 8001be4:	d82b      	bhi.n	8001c3e <send_cmd+0x6e>
		cmd &= 0x7F;
 8001be6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8001bea:	2c0c      	cmp	r4, #12
 8001bec:	d128      	bne.n	8001c40 <send_cmd+0x70>
		deselect();
		if (!select()) return 0xFF;
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8001bee:	f044 0040 	orr.w	r0, r4, #64	; 0x40
 8001bf2:	f7ff ffad 	bl	8001b50 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8001bf6:	0e28      	lsrs	r0, r5, #24
 8001bf8:	f7ff ffaa 	bl	8001b50 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8001bfc:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8001c00:	f7ff ffa6 	bl	8001b50 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8001c04:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8001c08:	f7ff ffa2 	bl	8001b50 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8001c0c:	b2e8      	uxtb	r0, r5
 8001c0e:	f7ff ff9f 	bl	8001b50 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8001c12:	b1ec      	cbz	r4, 8001c50 <send_cmd+0x80>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8001c14:	2c08      	cmp	r4, #8
 8001c16:	bf14      	ite	ne
 8001c18:	2001      	movne	r0, #1
 8001c1a:	2087      	moveq	r0, #135	; 0x87
	xchg_spi(n);
 8001c1c:	f7ff ff98 	bl	8001b50 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8001c20:	2c0c      	cmp	r4, #12
 8001c22:	d102      	bne.n	8001c2a <send_cmd+0x5a>
 8001c24:	20ff      	movs	r0, #255	; 0xff
 8001c26:	f7ff ff93 	bl	8001b50 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8001c2a:	240a      	movs	r4, #10
	n = 10;								/* Wait for response (10 bytes max) */
	do {
		res = xchg_spi(0xFF);
 8001c2c:	20ff      	movs	r0, #255	; 0xff
 8001c2e:	f7ff ff8f 	bl	8001b50 <xchg_spi>
	} while ((res & 0x80) && --n);
 8001c32:	0603      	lsls	r3, r0, #24
 8001c34:	d503      	bpl.n	8001c3e <send_cmd+0x6e>
 8001c36:	3c01      	subs	r4, #1
 8001c38:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8001c3c:	d1f6      	bne.n	8001c2c <send_cmd+0x5c>

	return res;							/* Return received response */
}
 8001c3e:	bd38      	pop	{r3, r4, r5, pc}
		deselect();
 8001c40:	f7ff ffa8 	bl	8001b94 <deselect>
		if (!select()) return 0xFF;
 8001c44:	f7ff ffae 	bl	8001ba4 <select>
 8001c48:	2800      	cmp	r0, #0
 8001c4a:	d1d0      	bne.n	8001bee <send_cmd+0x1e>
 8001c4c:	20ff      	movs	r0, #255	; 0xff
 8001c4e:	e7f6      	b.n	8001c3e <send_cmd+0x6e>
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8001c50:	2095      	movs	r0, #149	; 0x95
 8001c52:	e7e3      	b.n	8001c1c <send_cmd+0x4c>

08001c54 <rcvr_datablock>:
	Timer1 = 200;
 8001c54:	22c8      	movs	r2, #200	; 0xc8
{
 8001c56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c58:	4604      	mov	r4, r0
 8001c5a:	460d      	mov	r5, r1
	Timer1 = 200;
 8001c5c:	4e28      	ldr	r6, [pc, #160]	; (8001d00 <rcvr_datablock+0xac>)
 8001c5e:	6072      	str	r2, [r6, #4]
		token = xchg_spi(0xFF);
 8001c60:	20ff      	movs	r0, #255	; 0xff
 8001c62:	f7ff ff75 	bl	8001b50 <xchg_spi>
	} while ((token == 0xFF) && Timer1);
 8001c66:	28ff      	cmp	r0, #255	; 0xff
 8001c68:	d103      	bne.n	8001c72 <rcvr_datablock+0x1e>
 8001c6a:	6870      	ldr	r0, [r6, #4]
 8001c6c:	2800      	cmp	r0, #0
 8001c6e:	d1f7      	bne.n	8001c60 <rcvr_datablock+0xc>
}
 8001c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8001c72:	28fe      	cmp	r0, #254	; 0xfe
 8001c74:	d141      	bne.n	8001cfa <rcvr_datablock+0xa6>
	SPIx_CR1 &= ~_BV(6);
 8001c76:	4a23      	ldr	r2, [pc, #140]	; (8001d04 <rcvr_datablock+0xb0>)
		while ((SPIx_SR & 0x83) != 0x03) ;	/* Wait for end of the SPI transaction */
 8001c78:	4f23      	ldr	r7, [pc, #140]	; (8001d08 <rcvr_datablock+0xb4>)
	SPIx_CR1 &= ~_BV(6);
 8001c7a:	8813      	ldrh	r3, [r2, #0]
 8001c7c:	463e      	mov	r6, r7
 8001c7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c82:	041b      	lsls	r3, r3, #16
 8001c84:	0c1b      	lsrs	r3, r3, #16
 8001c86:	8013      	strh	r3, [r2, #0]
	SPIx_CR1 |= (_BV(6) | _BV(11));	/* Put SPI into 16-bit mode */
 8001c88:	8813      	ldrh	r3, [r2, #0]
	btr -= 2;
 8001c8a:	1ea9      	subs	r1, r5, #2
	SPIx_CR1 |= (_BV(6) | _BV(11));	/* Put SPI into 16-bit mode */
 8001c8c:	f443 6304 	orr.w	r3, r3, #2112	; 0x840
 8001c90:	8013      	strh	r3, [r2, #0]
	SPIx_DR = 0xFFFF;		/* Start the first SPI transaction */
 8001c92:	f64f 72ff 	movw	r2, #65535	; 0xffff
		SPIx_DR = 0xFFFF;					/* Start next transaction */
 8001c96:	4610      	mov	r0, r2
	SPIx_DR = 0xFFFF;		/* Start the first SPI transaction */
 8001c98:	4b1c      	ldr	r3, [pc, #112]	; (8001d0c <rcvr_datablock+0xb8>)
 8001c9a:	801a      	strh	r2, [r3, #0]
		while ((SPIx_SR & 0x83) != 0x03) ;	/* Wait for end of the SPI transaction */
 8001c9c:	883a      	ldrh	r2, [r7, #0]
 8001c9e:	f002 0283 	and.w	r2, r2, #131	; 0x83
 8001ca2:	2a03      	cmp	r2, #3
 8001ca4:	d1fa      	bne.n	8001c9c <rcvr_datablock+0x48>
		buff[1] = d; buff[0] = d >> 8; 		/* Store received data */
 8001ca6:	4625      	mov	r5, r4
		d = SPIx_DR;						/* Get received word */
 8001ca8:	881a      	ldrh	r2, [r3, #0]
	} while (btr -= 2);
 8001caa:	3902      	subs	r1, #2
		d = SPIx_DR;						/* Get received word */
 8001cac:	b292      	uxth	r2, r2
		SPIx_DR = 0xFFFF;					/* Start next transaction */
 8001cae:	8018      	strh	r0, [r3, #0]
		buff[1] = d; buff[0] = d >> 8; 		/* Store received data */
 8001cb0:	7062      	strb	r2, [r4, #1]
 8001cb2:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8001cb6:	f805 2b02 	strb.w	r2, [r5], #2
	} while (btr -= 2);
 8001cba:	d11c      	bne.n	8001cf6 <rcvr_datablock+0xa2>
	while ((SPIx_SR & 0x83) != 0x03) ;		/* Wait for end of the SPI transaction */
 8001cbc:	8832      	ldrh	r2, [r6, #0]
 8001cbe:	f002 0283 	and.w	r2, r2, #131	; 0x83
 8001cc2:	2a03      	cmp	r2, #3
 8001cc4:	d1fa      	bne.n	8001cbc <rcvr_datablock+0x68>
	d = SPIx_DR;							/* Get last word received */
 8001cc6:	881b      	ldrh	r3, [r3, #0]
	SPIx_CR1 &= ~(_BV(6) | _BV(11));	/* Put SPI into 8-bit mode */
 8001cc8:	4a0e      	ldr	r2, [pc, #56]	; (8001d04 <rcvr_datablock+0xb0>)
	d = SPIx_DR;							/* Get last word received */
 8001cca:	b29b      	uxth	r3, r3
	buff[1] = d; buff[0] = d >> 8;			/* Store it */
 8001ccc:	70e3      	strb	r3, [r4, #3]
 8001cce:	0a1b      	lsrs	r3, r3, #8
 8001cd0:	70a3      	strb	r3, [r4, #2]
	SPIx_CR1 &= ~(_BV(6) | _BV(11));	/* Put SPI into 8-bit mode */
 8001cd2:	8813      	ldrh	r3, [r2, #0]
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8001cd4:	20ff      	movs	r0, #255	; 0xff
	SPIx_CR1 &= ~(_BV(6) | _BV(11));	/* Put SPI into 8-bit mode */
 8001cd6:	f423 6304 	bic.w	r3, r3, #2112	; 0x840
 8001cda:	041b      	lsls	r3, r3, #16
 8001cdc:	0c1b      	lsrs	r3, r3, #16
 8001cde:	8013      	strh	r3, [r2, #0]
	SPIx_CR1 |= _BV(6);
 8001ce0:	8813      	ldrh	r3, [r2, #0]
 8001ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ce6:	8013      	strh	r3, [r2, #0]
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8001ce8:	f7ff ff32 	bl	8001b50 <xchg_spi>
 8001cec:	20ff      	movs	r0, #255	; 0xff
 8001cee:	f7ff ff2f 	bl	8001b50 <xchg_spi>
 8001cf2:	2001      	movs	r0, #1
 8001cf4:	e7bc      	b.n	8001c70 <rcvr_datablock+0x1c>
		buff += 2;
 8001cf6:	462c      	mov	r4, r5
 8001cf8:	e7d0      	b.n	8001c9c <rcvr_datablock+0x48>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	e7b8      	b.n	8001c70 <rcvr_datablock+0x1c>
 8001cfe:	bf00      	nop
 8001d00:	2000011c 	.word	0x2000011c
 8001d04:	40013000 	.word	0x40013000
 8001d08:	40013008 	.word	0x40013008
 8001d0c:	4001300c 	.word	0x4001300c

08001d10 <xmit_datablock.part.1>:
int xmit_datablock (	/* 1:OK, 0:Failed */
 8001d10:	b570      	push	{r4, r5, r6, lr}
		while ((SPIx_SR & 0x83) != 0x03) ;	/* Wait for end of the SPI transaction */
 8001d12:	4d23      	ldr	r5, [pc, #140]	; (8001da0 <xmit_datablock.part.1+0x90>)
	SPIx_CR1 &= ~_BV(6);
 8001d14:	4a23      	ldr	r2, [pc, #140]	; (8001da4 <xmit_datablock.part.1+0x94>)
 8001d16:	462e      	mov	r6, r5
 8001d18:	8813      	ldrh	r3, [r2, #0]
 8001d1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d1e:	041b      	lsls	r3, r3, #16
 8001d20:	0c1b      	lsrs	r3, r3, #16
 8001d22:	8013      	strh	r3, [r2, #0]
	SPIx_CR1 |= (_BV(6) | _BV(11));		/* Put SPI into 16-bit mode */
 8001d24:	8813      	ldrh	r3, [r2, #0]
 8001d26:	f443 6304 	orr.w	r3, r3, #2112	; 0x840
 8001d2a:	8013      	strh	r3, [r2, #0]
	d = buff[0] << 8 | buff[1]; buff += 2;
 8001d2c:	7803      	ldrb	r3, [r0, #0]
 8001d2e:	7842      	ldrb	r2, [r0, #1]
 8001d30:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	SPIx_DR = d;	/* Send the first word */
 8001d34:	4b1c      	ldr	r3, [pc, #112]	; (8001da8 <xmit_datablock.part.1+0x98>)
 8001d36:	801a      	strh	r2, [r3, #0]
 8001d38:	1d02      	adds	r2, r0, #4
 8001d3a:	f200 2002 	addw	r0, r0, #514	; 0x202
		d = buff[0] << 8 | buff[1]; buff += 2;	/* Word to send next */
 8001d3e:	f812 4c02 	ldrb.w	r4, [r2, #-2]
 8001d42:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8001d46:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
		while ((SPIx_SR & 0x83) != 0x03) ;	/* Wait for end of the SPI transaction */
 8001d4a:	882c      	ldrh	r4, [r5, #0]
 8001d4c:	f004 0483 	and.w	r4, r4, #131	; 0x83
 8001d50:	2c03      	cmp	r4, #3
 8001d52:	d1fa      	bne.n	8001d4a <xmit_datablock.part.1+0x3a>
 8001d54:	3202      	adds	r2, #2
	} while (btx -= 2);
 8001d56:	4290      	cmp	r0, r2
		SPIx_DR;							/* Discard received word */
 8001d58:	881c      	ldrh	r4, [r3, #0]
		SPIx_DR = d;						/* Start next transaction */
 8001d5a:	8019      	strh	r1, [r3, #0]
	} while (btx -= 2);
 8001d5c:	d1ef      	bne.n	8001d3e <xmit_datablock.part.1+0x2e>
	while ((SPIx_SR & 0x83) != 0x03) ;	/* Wait for end of the SPI transaction */
 8001d5e:	8832      	ldrh	r2, [r6, #0]
 8001d60:	f002 0283 	and.w	r2, r2, #131	; 0x83
 8001d64:	2a03      	cmp	r2, #3
 8001d66:	d1fa      	bne.n	8001d5e <xmit_datablock.part.1+0x4e>
	SPIx_CR1 &= ~(_BV(6) | _BV(11));	/* Put SPI into 8-bit mode */
 8001d68:	4a0e      	ldr	r2, [pc, #56]	; (8001da4 <xmit_datablock.part.1+0x94>)
	SPIx_DR;							/* Discard received word */
 8001d6a:	881b      	ldrh	r3, [r3, #0]
	SPIx_CR1 &= ~(_BV(6) | _BV(11));	/* Put SPI into 8-bit mode */
 8001d6c:	8813      	ldrh	r3, [r2, #0]
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8001d6e:	20ff      	movs	r0, #255	; 0xff
	SPIx_CR1 &= ~(_BV(6) | _BV(11));	/* Put SPI into 8-bit mode */
 8001d70:	f423 6304 	bic.w	r3, r3, #2112	; 0x840
 8001d74:	041b      	lsls	r3, r3, #16
 8001d76:	0c1b      	lsrs	r3, r3, #16
 8001d78:	8013      	strh	r3, [r2, #0]
	SPIx_CR1 |= _BV(6);
 8001d7a:	8813      	ldrh	r3, [r2, #0]
 8001d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d80:	8013      	strh	r3, [r2, #0]
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8001d82:	f7ff fee5 	bl	8001b50 <xchg_spi>
 8001d86:	20ff      	movs	r0, #255	; 0xff
 8001d88:	f7ff fee2 	bl	8001b50 <xchg_spi>
		resp = xchg_spi(0xFF);				/* Receive data resp */
 8001d8c:	20ff      	movs	r0, #255	; 0xff
 8001d8e:	f7ff fedf 	bl	8001b50 <xchg_spi>
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8001d92:	f000 001f 	and.w	r0, r0, #31
}
 8001d96:	1f43      	subs	r3, r0, #5
 8001d98:	4258      	negs	r0, r3
 8001d9a:	4158      	adcs	r0, r3
 8001d9c:	bd70      	pop	{r4, r5, r6, pc}
 8001d9e:	bf00      	nop
 8001da0:	40013008 	.word	0x40013008
 8001da4:	40013000 	.word	0x40013000
 8001da8:	4001300c 	.word	0x4001300c

08001dac <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8001dac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only drive 0 */
 8001dae:	2800      	cmp	r0, #0
 8001db0:	f040 80ce 	bne.w	8001f50 <disk_initialize+0x1a4>
	SPIxENABLE();		/* Enable SPI function */
 8001db4:	4b67      	ldr	r3, [pc, #412]	; (8001f54 <disk_initialize+0x1a8>)
 8001db6:	4968      	ldr	r1, [pc, #416]	; (8001f58 <disk_initialize+0x1ac>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001dbe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 8001dca:	f042 0204 	orr.w	r2, r2, #4
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
	for (Timer1 = 10; Timer1; ) ;	/* 10ms */
 8001dd2:	4d62      	ldr	r5, [pc, #392]	; (8001f5c <disk_initialize+0x1b0>)
	SPIxENABLE();		/* Enable SPI function */
 8001dd4:	f042 0210 	orr.w	r2, r2, #16
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	f5a3 3384 	sub.w	r3, r3, #67584	; 0x10800
 8001dde:	3b18      	subs	r3, #24
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001de6:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001df2:	f442 0230 	orr.w	r2, r2, #11534336	; 0xb00000
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	2240      	movs	r2, #64	; 0x40
 8001dfa:	600a      	str	r2, [r1, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e02:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8001e0e:	f042 4230 	orr.w	r2, r2, #2952790016	; 0xb0000000
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	2210      	movs	r2, #16
 8001e16:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
 8001e1a:	6803      	ldr	r3, [r0, #0]
 8001e1c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001e20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e24:	6003      	str	r3, [r0, #0]
 8001e26:	f44f 7051 	mov.w	r0, #836	; 0x344
 8001e2a:	4b4d      	ldr	r3, [pc, #308]	; (8001f60 <disk_initialize+0x1b4>)
 8001e2c:	8018      	strh	r0, [r3, #0]
	for (Timer1 = 10; Timer1; ) ;	/* 10ms */
 8001e2e:	230a      	movs	r3, #10
	CS_HIGH();			/* Set CS# high */
 8001e30:	600a      	str	r2, [r1, #0]
	for (Timer1 = 10; Timer1; ) ;	/* 10ms */
 8001e32:	606b      	str	r3, [r5, #4]
 8001e34:	686b      	ldr	r3, [r5, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1fc      	bne.n	8001e34 <disk_initialize+0x88>
	init_spi();							/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8001e3a:	4b4a      	ldr	r3, [pc, #296]	; (8001f64 <disk_initialize+0x1b8>)
 8001e3c:	781a      	ldrb	r2, [r3, #0]
 8001e3e:	461e      	mov	r6, r3
 8001e40:	f012 0f02 	tst.w	r2, #2
 8001e44:	d003      	beq.n	8001e4e <disk_initialize+0xa2>
 8001e46:	7818      	ldrb	r0, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
	} else {			/* Failed */
		Stat = STA_NOINIT;
	}

	return Stat;
 8001e48:	b2c0      	uxtb	r0, r0
}
 8001e4a:	b003      	add	sp, #12
 8001e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	FCLK_SLOW();
 8001e4e:	240a      	movs	r4, #10
 8001e50:	4a43      	ldr	r2, [pc, #268]	; (8001f60 <disk_initialize+0x1b4>)
 8001e52:	8813      	ldrh	r3, [r2, #0]
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001e5a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001e5e:	8013      	strh	r3, [r2, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8001e60:	20ff      	movs	r0, #255	; 0xff
 8001e62:	3c01      	subs	r4, #1
 8001e64:	f7ff fe74 	bl	8001b50 <xchg_spi>
 8001e68:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8001e6c:	d1f8      	bne.n	8001e60 <disk_initialize+0xb4>
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8001e6e:	4621      	mov	r1, r4
 8001e70:	4620      	mov	r0, r4
 8001e72:	f7ff fead 	bl	8001bd0 <send_cmd>
 8001e76:	2801      	cmp	r0, #1
 8001e78:	4607      	mov	r7, r0
 8001e7a:	d165      	bne.n	8001f48 <disk_initialize+0x19c>
		Timer1 = 1000;						/* Initialization timeout = 1 sec */
 8001e7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8001e80:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001e84:	2008      	movs	r0, #8
		Timer1 = 1000;						/* Initialization timeout = 1 sec */
 8001e86:	606b      	str	r3, [r5, #4]
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8001e88:	f7ff fea2 	bl	8001bd0 <send_cmd>
 8001e8c:	2801      	cmp	r0, #1
 8001e8e:	d141      	bne.n	8001f14 <disk_initialize+0x168>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8001e90:	af01      	add	r7, sp, #4
 8001e92:	20ff      	movs	r0, #255	; 0xff
 8001e94:	f7ff fe5c 	bl	8001b50 <xchg_spi>
 8001e98:	5538      	strb	r0, [r7, r4]
 8001e9a:	3401      	adds	r4, #1
 8001e9c:	2c04      	cmp	r4, #4
 8001e9e:	d1f8      	bne.n	8001e92 <disk_initialize+0xe6>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8001ea0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d14f      	bne.n	8001f48 <disk_initialize+0x19c>
 8001ea8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001eac:	2baa      	cmp	r3, #170	; 0xaa
 8001eae:	d14b      	bne.n	8001f48 <disk_initialize+0x19c>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8001eb0:	686b      	ldr	r3, [r5, #4]
 8001eb2:	b133      	cbz	r3, 8001ec2 <disk_initialize+0x116>
 8001eb4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001eb8:	20a9      	movs	r0, #169	; 0xa9
 8001eba:	f7ff fe89 	bl	8001bd0 <send_cmd>
 8001ebe:	2800      	cmp	r0, #0
 8001ec0:	d1f6      	bne.n	8001eb0 <disk_initialize+0x104>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8001ec2:	686b      	ldr	r3, [r5, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d03f      	beq.n	8001f48 <disk_initialize+0x19c>
 8001ec8:	2100      	movs	r1, #0
 8001eca:	203a      	movs	r0, #58	; 0x3a
 8001ecc:	f7ff fe80 	bl	8001bd0 <send_cmd>
 8001ed0:	2800      	cmp	r0, #0
 8001ed2:	d139      	bne.n	8001f48 <disk_initialize+0x19c>
 8001ed4:	4604      	mov	r4, r0
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8001ed6:	20ff      	movs	r0, #255	; 0xff
 8001ed8:	f7ff fe3a 	bl	8001b50 <xchg_spi>
 8001edc:	5538      	strb	r0, [r7, r4]
 8001ede:	3401      	adds	r4, #1
 8001ee0:	2c04      	cmp	r4, #4
 8001ee2:	d1f8      	bne.n	8001ed6 <disk_initialize+0x12a>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8001ee4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001ee8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001eec:	bf14      	ite	ne
 8001eee:	240c      	movne	r4, #12
 8001ef0:	2404      	moveq	r4, #4
	CardType = ty;	/* Card type */
 8001ef2:	722c      	strb	r4, [r5, #8]
	deselect();
 8001ef4:	f7ff fe4e 	bl	8001b94 <deselect>
	if (ty) {			/* OK */
 8001ef8:	b344      	cbz	r4, 8001f4c <disk_initialize+0x1a0>
		FCLK_FAST();			/* Set fast clock */
 8001efa:	4a19      	ldr	r2, [pc, #100]	; (8001f60 <disk_initialize+0x1b4>)
 8001efc:	8813      	ldrh	r3, [r2, #0]
 8001efe:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001f02:	041b      	lsls	r3, r3, #16
 8001f04:	0c1b      	lsrs	r3, r3, #16
 8001f06:	8013      	strh	r3, [r2, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8001f08:	7833      	ldrb	r3, [r6, #0]
 8001f0a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		Stat = STA_NOINIT;
 8001f0e:	7033      	strb	r3, [r6, #0]
	return Stat;
 8001f10:	7830      	ldrb	r0, [r6, #0]
 8001f12:	e799      	b.n	8001e48 <disk_initialize+0x9c>
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8001f14:	4621      	mov	r1, r4
 8001f16:	20a9      	movs	r0, #169	; 0xa9
 8001f18:	f7ff fe5a 	bl	8001bd0 <send_cmd>
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8001f1c:	2802      	cmp	r0, #2
 8001f1e:	bf36      	itet	cc
 8001f20:	2402      	movcc	r4, #2
 8001f22:	2401      	movcs	r4, #1
 8001f24:	27a9      	movcc	r7, #169	; 0xa9
			while (Timer1 && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8001f26:	686b      	ldr	r3, [r5, #4]
 8001f28:	b12b      	cbz	r3, 8001f36 <disk_initialize+0x18a>
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4638      	mov	r0, r7
 8001f2e:	f7ff fe4f 	bl	8001bd0 <send_cmd>
 8001f32:	2800      	cmp	r0, #0
 8001f34:	d1f7      	bne.n	8001f26 <disk_initialize+0x17a>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8001f36:	686b      	ldr	r3, [r5, #4]
 8001f38:	b133      	cbz	r3, 8001f48 <disk_initialize+0x19c>
 8001f3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f3e:	2010      	movs	r0, #16
 8001f40:	f7ff fe46 	bl	8001bd0 <send_cmd>
 8001f44:	2800      	cmp	r0, #0
 8001f46:	d0d4      	beq.n	8001ef2 <disk_initialize+0x146>
				ty = 0;
 8001f48:	2400      	movs	r4, #0
 8001f4a:	e7d2      	b.n	8001ef2 <disk_initialize+0x146>
		Stat = STA_NOINIT;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e7de      	b.n	8001f0e <disk_initialize+0x162>
	if (drv) return STA_NOINIT;			/* Supports only drive 0 */
 8001f50:	2001      	movs	r0, #1
 8001f52:	e77a      	b.n	8001e4a <disk_initialize+0x9e>
 8001f54:	40021018 	.word	0x40021018
 8001f58:	40010810 	.word	0x40010810
 8001f5c:	2000011c 	.word	0x2000011c
 8001f60:	40013000 	.word	0x40013000
 8001f64:	20000000 	.word	0x20000000

08001f68 <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive number (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8001f68:	b918      	cbnz	r0, 8001f72 <disk_status+0xa>

	return Stat;	/* Return disk status */
 8001f6a:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <disk_status+0x10>)
 8001f6c:	7818      	ldrb	r0, [r3, #0]
 8001f6e:	b2c0      	uxtb	r0, r0
 8001f70:	4770      	bx	lr
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8001f72:	2001      	movs	r0, #1
}
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	20000000 	.word	0x20000000

08001f7c <disk_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8001f7c:	b538      	push	{r3, r4, r5, lr}
 8001f7e:	460d      	mov	r5, r1
 8001f80:	461c      	mov	r4, r3
 8001f82:	4611      	mov	r1, r2
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8001f84:	bb88      	cbnz	r0, 8001fea <disk_read+0x6e>
 8001f86:	b383      	cbz	r3, 8001fea <disk_read+0x6e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8001f88:	4b1a      	ldr	r3, [pc, #104]	; (8001ff4 <disk_read+0x78>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	07da      	lsls	r2, r3, #31
 8001f8e:	d42e      	bmi.n	8001fee <disk_read+0x72>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8001f90:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <disk_read+0x7c>)
 8001f92:	7a1b      	ldrb	r3, [r3, #8]
 8001f94:	071b      	lsls	r3, r3, #28
 8001f96:	bf58      	it	pl
 8001f98:	0249      	lslpl	r1, r1, #9

	if (count == 1) {	/* Single sector read */
 8001f9a:	2c01      	cmp	r4, #1
 8001f9c:	d111      	bne.n	8001fc2 <disk_read+0x46>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8001f9e:	2011      	movs	r0, #17
 8001fa0:	f7ff fe16 	bl	8001bd0 <send_cmd>
 8001fa4:	b938      	cbnz	r0, 8001fb6 <disk_read+0x3a>
			&& rcvr_datablock(buff, 512)) {
 8001fa6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001faa:	4628      	mov	r0, r5
 8001fac:	f7ff fe52 	bl	8001c54 <rcvr_datablock>
 8001fb0:	fab0 f480 	clz	r4, r0
 8001fb4:	0964      	lsrs	r4, r4, #5
				buff += 512;
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();
 8001fb6:	f7ff fded 	bl	8001b94 <deselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8001fba:	1c20      	adds	r0, r4, #0
 8001fbc:	bf18      	it	ne
 8001fbe:	2001      	movne	r0, #1
}
 8001fc0:	bd38      	pop	{r3, r4, r5, pc}
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8001fc2:	2012      	movs	r0, #18
 8001fc4:	f7ff fe04 	bl	8001bd0 <send_cmd>
 8001fc8:	2800      	cmp	r0, #0
 8001fca:	d1f4      	bne.n	8001fb6 <disk_read+0x3a>
				if (!rcvr_datablock(buff, 512)) break;
 8001fcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fd0:	4628      	mov	r0, r5
 8001fd2:	f7ff fe3f 	bl	8001c54 <rcvr_datablock>
 8001fd6:	b118      	cbz	r0, 8001fe0 <disk_read+0x64>
			} while (--count);
 8001fd8:	3c01      	subs	r4, #1
				buff += 512;
 8001fda:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 8001fde:	d1f5      	bne.n	8001fcc <disk_read+0x50>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	200c      	movs	r0, #12
 8001fe4:	f7ff fdf4 	bl	8001bd0 <send_cmd>
 8001fe8:	e7e5      	b.n	8001fb6 <disk_read+0x3a>
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8001fea:	2004      	movs	r0, #4
 8001fec:	e7e8      	b.n	8001fc0 <disk_read+0x44>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8001fee:	2003      	movs	r0, #3
 8001ff0:	e7e6      	b.n	8001fc0 <disk_read+0x44>
 8001ff2:	bf00      	nop
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	2000011c 	.word	0x2000011c

08001ffc <disk_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8001ffc:	b570      	push	{r4, r5, r6, lr}
 8001ffe:	460d      	mov	r5, r1
 8002000:	4616      	mov	r6, r2
 8002002:	461c      	mov	r4, r3
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002004:	2800      	cmp	r0, #0
 8002006:	d152      	bne.n	80020ae <disk_write+0xb2>
 8002008:	2b00      	cmp	r3, #0
 800200a:	d050      	beq.n	80020ae <disk_write+0xb2>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800200c:	4b2b      	ldr	r3, [pc, #172]	; (80020bc <disk_write+0xc0>)
 800200e:	781a      	ldrb	r2, [r3, #0]
 8002010:	07d0      	lsls	r0, r2, #31
 8002012:	d44e      	bmi.n	80020b2 <disk_write+0xb6>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	0759      	lsls	r1, r3, #29
 8002018:	d44d      	bmi.n	80020b6 <disk_write+0xba>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800201a:	4b29      	ldr	r3, [pc, #164]	; (80020c0 <disk_write+0xc4>)
 800201c:	7a1b      	ldrb	r3, [r3, #8]
 800201e:	071a      	lsls	r2, r3, #28
 8002020:	bf58      	it	pl
 8002022:	0276      	lslpl	r6, r6, #9

	if (count == 1) {	/* Single sector write */
 8002024:	2c01      	cmp	r4, #1
 8002026:	d11b      	bne.n	8002060 <disk_write+0x64>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8002028:	4631      	mov	r1, r6
 800202a:	2018      	movs	r0, #24
 800202c:	f7ff fdd0 	bl	8001bd0 <send_cmd>
 8002030:	b130      	cbz	r0, 8002040 <disk_write+0x44>
{
 8002032:	2401      	movs	r4, #1
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
		}
	}
	deselect();
 8002034:	f7ff fdae 	bl	8001b94 <deselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002038:	1c20      	adds	r0, r4, #0
 800203a:	bf18      	it	ne
 800203c:	2001      	movne	r0, #1
}
 800203e:	bd70      	pop	{r4, r5, r6, pc}
	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8002040:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002044:	f7ff fd94 	bl	8001b70 <wait_ready>
 8002048:	2800      	cmp	r0, #0
 800204a:	d0f2      	beq.n	8002032 <disk_write+0x36>
	xchg_spi(token);					/* Send token */
 800204c:	20fe      	movs	r0, #254	; 0xfe
 800204e:	f7ff fd7f 	bl	8001b50 <xchg_spi>
 8002052:	4628      	mov	r0, r5
 8002054:	f7ff fe5c 	bl	8001d10 <xmit_datablock.part.1>
			&& xmit_datablock(buff, 0xFE)) {
 8002058:	fab0 f480 	clz	r4, r0
 800205c:	0964      	lsrs	r4, r4, #5
 800205e:	e7e9      	b.n	8002034 <disk_write+0x38>
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8002060:	f013 0f06 	tst.w	r3, #6
 8002064:	d003      	beq.n	800206e <disk_write+0x72>
 8002066:	4621      	mov	r1, r4
 8002068:	2097      	movs	r0, #151	; 0x97
 800206a:	f7ff fdb1 	bl	8001bd0 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800206e:	4631      	mov	r1, r6
 8002070:	2019      	movs	r0, #25
 8002072:	f7ff fdad 	bl	8001bd0 <send_cmd>
 8002076:	2800      	cmp	r0, #0
 8002078:	d1dc      	bne.n	8002034 <disk_write+0x38>
	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800207a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800207e:	f7ff fd77 	bl	8001b70 <wait_ready>
 8002082:	b150      	cbz	r0, 800209a <disk_write+0x9e>
	xchg_spi(token);					/* Send token */
 8002084:	20fc      	movs	r0, #252	; 0xfc
 8002086:	f7ff fd63 	bl	8001b50 <xchg_spi>
 800208a:	4628      	mov	r0, r5
 800208c:	f7ff fe40 	bl	8001d10 <xmit_datablock.part.1>
				if (!xmit_datablock(buff, 0xFC)) break;
 8002090:	b118      	cbz	r0, 800209a <disk_write+0x9e>
			} while (--count);
 8002092:	3c01      	subs	r4, #1
				buff += 512;
 8002094:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 8002098:	d1ef      	bne.n	800207a <disk_write+0x7e>
	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800209a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800209e:	f7ff fd67 	bl	8001b70 <wait_ready>
 80020a2:	2800      	cmp	r0, #0
 80020a4:	d0c5      	beq.n	8002032 <disk_write+0x36>
	xchg_spi(token);					/* Send token */
 80020a6:	20fd      	movs	r0, #253	; 0xfd
 80020a8:	f7ff fd52 	bl	8001b50 <xchg_spi>
 80020ac:	e7c2      	b.n	8002034 <disk_write+0x38>
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80020ae:	2004      	movs	r0, #4
 80020b0:	e7c5      	b.n	800203e <disk_write+0x42>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80020b2:	2003      	movs	r0, #3
 80020b4:	e7c3      	b.n	800203e <disk_write+0x42>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80020b6:	2002      	movs	r0, #2
 80020b8:	e7c1      	b.n	800203e <disk_write+0x42>
 80020ba:	bf00      	nop
 80020bc:	20000000 	.word	0x20000000
 80020c0:	2000011c 	.word	0x2000011c

080020c4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80020c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c6:	4616      	mov	r6, r2
 80020c8:	b085      	sub	sp, #20
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80020ca:	2800      	cmp	r0, #0
 80020cc:	f040 80db 	bne.w	8002286 <disk_ioctl+0x1c2>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80020d0:	4b6f      	ldr	r3, [pc, #444]	; (8002290 <disk_ioctl+0x1cc>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	07d8      	lsls	r0, r3, #31
 80020d6:	f100 80d8 	bmi.w	800228a <disk_ioctl+0x1c6>

	res = RES_ERROR;

	switch (cmd) {
 80020da:	2904      	cmp	r1, #4
 80020dc:	f200 80d1 	bhi.w	8002282 <disk_ioctl+0x1be>
 80020e0:	e8df f001 	tbb	[pc, r1]
 80020e4:	4acf0903 	.word	0x4acf0903
 80020e8:	97          	.byte	0x97
 80020e9:	00          	.byte	0x00
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (select()) res = RES_OK;
 80020ea:	f7ff fd5b 	bl	8001ba4 <select>
 80020ee:	fab0 f480 	clz	r4, r0
 80020f2:	0964      	lsrs	r4, r4, #5
 80020f4:	e006      	b.n	8002104 <disk_ioctl+0x40>
		break;

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80020f6:	2100      	movs	r1, #0
 80020f8:	2009      	movs	r0, #9
 80020fa:	f7ff fd69 	bl	8001bd0 <send_cmd>
 80020fe:	4604      	mov	r4, r0
 8002100:	b128      	cbz	r0, 800210e <disk_ioctl+0x4a>
	res = RES_ERROR;
 8002102:	2401      	movs	r4, #1

	default:
		res = RES_PARERR;
	}

	deselect();
 8002104:	f7ff fd46 	bl	8001b94 <deselect>

	return res;
}
 8002108:	4620      	mov	r0, r4
 800210a:	b005      	add	sp, #20
 800210c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800210e:	2110      	movs	r1, #16
 8002110:	4668      	mov	r0, sp
 8002112:	f7ff fd9f 	bl	8001c54 <rcvr_datablock>
 8002116:	2800      	cmp	r0, #0
 8002118:	d0f3      	beq.n	8002102 <disk_ioctl+0x3e>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800211a:	f89d 3000 	ldrb.w	r3, [sp]
 800211e:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8002122:	099b      	lsrs	r3, r3, #6
 8002124:	2b01      	cmp	r3, #1
 8002126:	f89d 0009 	ldrb.w	r0, [sp, #9]
 800212a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800212e:	d109      	bne.n	8002144 <disk_ioctl+0x80>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8002130:	041a      	lsls	r2, r3, #16
 8002132:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 8002136:	eb00 2101 	add.w	r1, r0, r1, lsl #8
 800213a:	3201      	adds	r2, #1
 800213c:	440a      	add	r2, r1
				*(DWORD*)buff = csize << 10;
 800213e:	0292      	lsls	r2, r2, #10
 8002140:	6032      	str	r2, [r6, #0]
 8002142:	e7df      	b.n	8002104 <disk_ioctl+0x40>
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8002144:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	0292      	lsls	r2, r2, #10
 800214c:	eb03 1391 	add.w	r3, r3, r1, lsr #6
 8002150:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8002154:	4413      	add	r3, r2
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002156:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800215a:	f89d 100a 	ldrb.w	r1, [sp, #10]
 800215e:	f002 020f 	and.w	r2, r2, #15
 8002162:	eb02 12d1 	add.w	r2, r2, r1, lsr #7
 8002166:	0041      	lsls	r1, r0, #1
 8002168:	f001 0106 	and.w	r1, r1, #6
				*(DWORD*)buff = csize << (n - 9);
 800216c:	440a      	add	r2, r1
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800216e:	3301      	adds	r3, #1
				*(DWORD*)buff = csize << (n - 9);
 8002170:	3a07      	subs	r2, #7
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8002172:	4093      	lsls	r3, r2
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8002174:	6033      	str	r3, [r6, #0]
 8002176:	e7c5      	b.n	8002104 <disk_ioctl+0x40>
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8002178:	4b46      	ldr	r3, [pc, #280]	; (8002294 <disk_ioctl+0x1d0>)
 800217a:	7a1c      	ldrb	r4, [r3, #8]
 800217c:	f014 0104 	ands.w	r1, r4, #4
 8002180:	d01b      	beq.n	80021ba <disk_ioctl+0xf6>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8002182:	2100      	movs	r1, #0
 8002184:	208d      	movs	r0, #141	; 0x8d
 8002186:	f7ff fd23 	bl	8001bd0 <send_cmd>
 800218a:	2800      	cmp	r0, #0
 800218c:	d1b9      	bne.n	8002102 <disk_ioctl+0x3e>
				xchg_spi(0xFF);
 800218e:	20ff      	movs	r0, #255	; 0xff
 8002190:	f7ff fcde 	bl	8001b50 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8002194:	2110      	movs	r1, #16
 8002196:	4668      	mov	r0, sp
 8002198:	f7ff fd5c 	bl	8001c54 <rcvr_datablock>
 800219c:	2800      	cmp	r0, #0
 800219e:	d0b0      	beq.n	8002102 <disk_ioctl+0x3e>
 80021a0:	2430      	movs	r4, #48	; 0x30
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80021a2:	20ff      	movs	r0, #255	; 0xff
 80021a4:	3c01      	subs	r4, #1
 80021a6:	f7ff fcd3 	bl	8001b50 <xchg_spi>
 80021aa:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80021ae:	d1f8      	bne.n	80021a2 <disk_ioctl+0xde>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80021b0:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80021b4:	091a      	lsrs	r2, r3, #4
 80021b6:	2310      	movs	r3, #16
 80021b8:	e7db      	b.n	8002172 <disk_ioctl+0xae>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80021ba:	2009      	movs	r0, #9
 80021bc:	f7ff fd08 	bl	8001bd0 <send_cmd>
 80021c0:	4607      	mov	r7, r0
 80021c2:	2800      	cmp	r0, #0
 80021c4:	d19d      	bne.n	8002102 <disk_ioctl+0x3e>
 80021c6:	2110      	movs	r1, #16
 80021c8:	4668      	mov	r0, sp
 80021ca:	f7ff fd43 	bl	8001c54 <rcvr_datablock>
 80021ce:	2800      	cmp	r0, #0
 80021d0:	d097      	beq.n	8002102 <disk_ioctl+0x3e>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80021d2:	f014 0402 	ands.w	r4, r4, #2
 80021d6:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80021da:	f89d 100b 	ldrb.w	r1, [sp, #11]
 80021de:	d00d      	beq.n	80021fc <disk_ioctl+0x138>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80021e6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80021ea:	eb03 13d1 	add.w	r3, r3, r1, lsr #7
 80021ee:	0992      	lsrs	r2, r2, #6
 80021f0:	3301      	adds	r3, #1
 80021f2:	3a01      	subs	r2, #1
 80021f4:	4093      	lsls	r3, r2
 80021f6:	6033      	str	r3, [r6, #0]
				res = RES_OK;
 80021f8:	463c      	mov	r4, r7
 80021fa:	e783      	b.n	8002104 <disk_ioctl+0x40>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80021fc:	00ca      	lsls	r2, r1, #3
 80021fe:	f002 0218 	and.w	r2, r2, #24
 8002202:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8002206:	eb02 1251 	add.w	r2, r2, r1, lsr #5
 800220a:	3301      	adds	r3, #1
 800220c:	fb02 3303 	mla	r3, r2, r3, r3
 8002210:	e7b0      	b.n	8002174 <disk_ioctl+0xb0>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002212:	4b20      	ldr	r3, [pc, #128]	; (8002294 <disk_ioctl+0x1d0>)
 8002214:	7a1d      	ldrb	r5, [r3, #8]
 8002216:	f015 0f06 	tst.w	r5, #6
 800221a:	f43f af72 	beq.w	8002102 <disk_ioctl+0x3e>
		if (disk_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800221e:	466a      	mov	r2, sp
 8002220:	2133      	movs	r1, #51	; 0x33
 8002222:	2000      	movs	r0, #0
 8002224:	f7ff ff4e 	bl	80020c4 <disk_ioctl>
 8002228:	2800      	cmp	r0, #0
 800222a:	f47f af6a 	bne.w	8002102 <disk_ioctl+0x3e>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800222e:	f89d 3000 	ldrb.w	r3, [sp]
 8002232:	099b      	lsrs	r3, r3, #6
 8002234:	d104      	bne.n	8002240 <disk_ioctl+0x17c>
 8002236:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800223a:	065a      	lsls	r2, r3, #25
 800223c:	f57f af61 	bpl.w	8002102 <disk_ioctl+0x3e>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8002240:	e9d6 1400 	ldrd	r1, r4, [r6]
		if (!(CardType & CT_BLOCK)) {
 8002244:	072b      	lsls	r3, r5, #28
			st *= 512; ed *= 512;
 8002246:	bf58      	it	pl
 8002248:	0249      	lslpl	r1, r1, #9
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800224a:	f04f 0020 	mov.w	r0, #32
			st *= 512; ed *= 512;
 800224e:	bf58      	it	pl
 8002250:	0264      	lslpl	r4, r4, #9
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8002252:	f7ff fcbd 	bl	8001bd0 <send_cmd>
 8002256:	2800      	cmp	r0, #0
 8002258:	f47f af53 	bne.w	8002102 <disk_ioctl+0x3e>
 800225c:	4621      	mov	r1, r4
 800225e:	2021      	movs	r0, #33	; 0x21
 8002260:	f7ff fcb6 	bl	8001bd0 <send_cmd>
 8002264:	4601      	mov	r1, r0
 8002266:	2800      	cmp	r0, #0
 8002268:	f47f af4b 	bne.w	8002102 <disk_ioctl+0x3e>
 800226c:	2026      	movs	r0, #38	; 0x26
 800226e:	f7ff fcaf 	bl	8001bd0 <send_cmd>
 8002272:	2800      	cmp	r0, #0
 8002274:	f47f af45 	bne.w	8002102 <disk_ioctl+0x3e>
 8002278:	f247 5030 	movw	r0, #30000	; 0x7530
 800227c:	f7ff fc78 	bl	8001b70 <wait_ready>
 8002280:	e735      	b.n	80020ee <disk_ioctl+0x2a>
		res = RES_PARERR;
 8002282:	2404      	movs	r4, #4
 8002284:	e73e      	b.n	8002104 <disk_ioctl+0x40>
	if (drv) return RES_PARERR;					/* Check parameter */
 8002286:	2404      	movs	r4, #4
 8002288:	e73e      	b.n	8002108 <disk_ioctl+0x44>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800228a:	2403      	movs	r4, #3
 800228c:	e73c      	b.n	8002108 <disk_ioctl+0x44>
 800228e:	bf00      	nop
 8002290:	20000000 	.word	0x20000000
 8002294:	2000011c 	.word	0x2000011c

08002298 <disk_timerproc>:
{
	WORD n;
	BYTE s;


	n = Timer1;						/* 1kHz decrement timer stopped at 0 */
 8002298:	4a0d      	ldr	r2, [pc, #52]	; (80022d0 <disk_timerproc+0x38>)
 800229a:	6853      	ldr	r3, [r2, #4]
 800229c:	b29b      	uxth	r3, r3
	if (n) Timer1 = --n;
 800229e:	b113      	cbz	r3, 80022a6 <disk_timerproc+0xe>
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	6053      	str	r3, [r2, #4]
	n = Timer2;
 80022a6:	6813      	ldr	r3, [r2, #0]
 80022a8:	b29b      	uxth	r3, r3
	if (n) Timer2 = --n;
 80022aa:	b113      	cbz	r3, 80022b2 <disk_timerproc+0x1a>
 80022ac:	3b01      	subs	r3, #1
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	6013      	str	r3, [r2, #0]

	s = Stat;
 80022b2:	4a08      	ldr	r2, [pc, #32]	; (80022d4 <disk_timerproc+0x3c>)
	if (MMC_WP) {	/* Write protected */
		s |= STA_PROTECT;
	} else {		/* Write enabled */
		s &= ~STA_PROTECT;
	}
	if (MMC_CD) {	/* Card is in socket */
 80022b4:	4908      	ldr	r1, [pc, #32]	; (80022d8 <disk_timerproc+0x40>)
	s = Stat;
 80022b6:	7813      	ldrb	r3, [r2, #0]
	if (MMC_CD) {	/* Card is in socket */
 80022b8:	6809      	ldr	r1, [r1, #0]
	s = Stat;
 80022ba:	b2db      	uxtb	r3, r3
	if (MMC_CD) {	/* Card is in socket */
 80022bc:	06c9      	lsls	r1, r1, #27
		s &= ~STA_PROTECT;
 80022be:	bf4a      	itet	mi
 80022c0:	f003 03fb 	andmi.w	r3, r3, #251	; 0xfb
		s &= ~STA_NODISK;
 80022c4:	f003 03f9 	andpl.w	r3, r3, #249	; 0xf9
	} else {		/* Socket empty */
		s |= (STA_NODISK | STA_NOINIT);
 80022c8:	f043 0303 	orrmi.w	r3, r3, #3
	}
	Stat = s;
 80022cc:	7013      	strb	r3, [r2, #0]
}
 80022ce:	4770      	bx	lr
 80022d0:	2000011c 	.word	0x2000011c
 80022d4:	20000000 	.word	0x20000000
 80022d8:	40011008 	.word	0x40011008

080022dc <ld_dword>:
static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 80022dc:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 80022de:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 80022e0:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 80022e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 80022e6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80022ea:	4770      	bx	lr

080022ec <st_dword>:
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80022ec:	0a0b      	lsrs	r3, r1, #8
 80022ee:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80022f0:	7043      	strb	r3, [r0, #1]
 80022f2:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80022f4:	0e09      	lsrs	r1, r1, #24
 80022f6:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 80022f8:	70c1      	strb	r1, [r0, #3]
}
 80022fa:	4770      	bx	lr

080022fc <mem_set>:
}


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
 80022fc:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 80022fe:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 8002302:	4290      	cmp	r0, r2
 8002304:	d1fb      	bne.n	80022fe <mem_set+0x2>
}
 8002306:	4770      	bx	lr

08002308 <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 8002308:	b510      	push	{r4, lr}
 800230a:	4402      	add	r2, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 800230c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002310:	f811 4b01 	ldrb.w	r4, [r1], #1
	} while (--cnt && r == 0);
 8002314:	4290      	cmp	r0, r2
		r = *d++ - *s++;
 8002316:	eba3 0304 	sub.w	r3, r3, r4
	} while (--cnt && r == 0);
 800231a:	d001      	beq.n	8002320 <mem_cmp+0x18>
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f5      	beq.n	800230c <mem_cmp+0x4>

	return r;
}
 8002320:	4618      	mov	r0, r3
 8002322:	bd10      	pop	{r4, pc}

08002324 <clst2sect>:
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8002324:	69c3      	ldr	r3, [r0, #28]
	clst -= 2;		/* Cluster number is origin from 2 */
 8002326:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8002328:	3b02      	subs	r3, #2
 800232a:	428b      	cmp	r3, r1
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 800232c:	bf83      	ittte	hi
 800232e:	8943      	ldrhhi	r3, [r0, #10]
 8002330:	6b00      	ldrhi	r0, [r0, #48]	; 0x30
 8002332:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8002336:	2000      	movls	r0, #0
}
 8002338:	4770      	bx	lr

0800233a <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800233a:	4602      	mov	r2, r0
 800233c:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
 8002340:	2000      	movs	r0, #0
	UINT n = 11;

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8002342:	01c3      	lsls	r3, r0, #7
 8002344:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 8002348:	f812 0b01 	ldrb.w	r0, [r2], #1
 800234c:	4403      	add	r3, r0
	} while (--n);
 800234e:	428a      	cmp	r2, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8002350:	f003 00ff 	and.w	r0, r3, #255	; 0xff
	} while (--n);
 8002354:	d1f5      	bne.n	8002342 <sum_sfn+0x8>
	return sum;
}
 8002356:	4770      	bx	lr

08002358 <get_ldnumber>:
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8002358:	6803      	ldr	r3, [r0, #0]
{
 800235a:	b510      	push	{r4, lr}
	if (!tp) return vol;	/* Invalid path name? */
 800235c:	b15b      	cbz	r3, 8002376 <get_ldnumber+0x1e>
 800235e:	461a      	mov	r2, r3
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 8002360:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002364:	291f      	cmp	r1, #31
 8002366:	d911      	bls.n	800238c <get_ldnumber+0x34>
 8002368:	293a      	cmp	r1, #58	; 0x3a
 800236a:	d1f9      	bne.n	8002360 <get_ldnumber+0x8>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
		i = FF_VOLUMES;
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 800236c:	7819      	ldrb	r1, [r3, #0]
 800236e:	f1a1 0430 	sub.w	r4, r1, #48	; 0x30
 8002372:	2c09      	cmp	r4, #9
 8002374:	d902      	bls.n	800237c <get_ldnumber+0x24>
	if (!tp) return vol;	/* Invalid path name? */
 8002376:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800237a:	e006      	b.n	800238a <get_ldnumber+0x32>
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 800237c:	3302      	adds	r3, #2
 800237e:	429a      	cmp	r2, r3
 8002380:	d1f9      	bne.n	8002376 <get_ldnumber+0x1e>
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8002382:	2930      	cmp	r1, #48	; 0x30
 8002384:	d1f7      	bne.n	8002376 <get_ldnumber+0x1e>
			vol = i;		/* Drive number */
			*path = tt;		/* Snip the drive prefix off */
 8002386:	6002      	str	r2, [r0, #0]
 8002388:	2000      	movs	r0, #0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
}
 800238a:	bd10      	pop	{r4, pc}
	vol = CurrVol;	/* Default drive is current drive */
 800238c:	4b01      	ldr	r3, [pc, #4]	; (8002394 <get_ldnumber+0x3c>)
 800238e:	7818      	ldrb	r0, [r3, #0]
	return vol;		/* Return the default drive */
 8002390:	e7fb      	b.n	800238a <get_ldnumber+0x32>
 8002392:	bf00      	nop
 8002394:	20000128 	.word	0x20000128

08002398 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8002398:	b538      	push	{r3, r4, r5, lr}
 800239a:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800239c:	4604      	mov	r4, r0
 800239e:	b918      	cbnz	r0, 80023a8 <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
 80023a0:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80023a2:	2300      	movs	r3, #0
 80023a4:	602b      	str	r3, [r5, #0]
	return res;
}
 80023a6:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80023a8:	6803      	ldr	r3, [r0, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f8      	beq.n	80023a0 <validate+0x8>
 80023ae:	781a      	ldrb	r2, [r3, #0]
 80023b0:	2a00      	cmp	r2, #0
 80023b2:	d0f5      	beq.n	80023a0 <validate+0x8>
 80023b4:	8881      	ldrh	r1, [r0, #4]
 80023b6:	88da      	ldrh	r2, [r3, #6]
 80023b8:	4291      	cmp	r1, r2
 80023ba:	d1f1      	bne.n	80023a0 <validate+0x8>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80023bc:	7858      	ldrb	r0, [r3, #1]
 80023be:	f7ff fdd3 	bl	8001f68 <disk_status>
 80023c2:	f010 0001 	ands.w	r0, r0, #1
 80023c6:	d1eb      	bne.n	80023a0 <validate+0x8>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80023c8:	6823      	ldr	r3, [r4, #0]
 80023ca:	e7eb      	b.n	80023a4 <validate+0xc>

080023cc <tchar2uni>:
{
 80023cc:	b538      	push	{r3, r4, r5, lr}
	const TCHAR *p = *str;
 80023ce:	6803      	ldr	r3, [r0, #0]
{
 80023d0:	4604      	mov	r4, r0
	wc = (BYTE)*p++;			/* Get a byte */
 80023d2:	7818      	ldrb	r0, [r3, #0]
 80023d4:	1c5d      	adds	r5, r3, #1
	if (wc != 0) {
 80023d6:	b120      	cbz	r0, 80023e2 <tchar2uni+0x16>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 80023d8:	f240 11b5 	movw	r1, #437	; 0x1b5
 80023dc:	f002 fbf2 	bl	8004bc4 <ff_oem2uni>
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 80023e0:	b108      	cbz	r0, 80023e6 <tchar2uni+0x1a>
	*str = p;	/* Next read pointer */
 80023e2:	6025      	str	r5, [r4, #0]
}
 80023e4:	bd38      	pop	{r3, r4, r5, pc}
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 80023e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023ea:	e7fb      	b.n	80023e4 <tchar2uni+0x18>

080023ec <mem_cpy.part.0>:
static void mem_cpy (void* dst, const void* src, UINT cnt)
 80023ec:	3801      	subs	r0, #1
 80023ee:	440a      	add	r2, r1
			*d++ = *s++;
 80023f0:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 80023f4:	4291      	cmp	r1, r2
			*d++ = *s++;
 80023f6:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 80023fa:	d1f9      	bne.n	80023f0 <mem_cpy.part.0+0x4>
}
 80023fc:	4770      	bx	lr

080023fe <ld_clust.isra.3>:
	rv = rv << 8 | ptr[0];
 80023fe:	7eca      	ldrb	r2, [r1, #27]
 8002400:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8002402:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8002404:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8002408:	bf01      	itttt	eq
 800240a:	7d48      	ldrbeq	r0, [r1, #21]
 800240c:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800240e:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8002412:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8002416:	4618      	mov	r0, r3
 8002418:	4770      	bx	lr

0800241a <st_clust.isra.4>:
	*ptr++ = (BYTE)val; val >>= 8;
 800241a:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800241e:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8002420:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8002422:	7803      	ldrb	r3, [r0, #0]
 8002424:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8002426:	bf01      	itttt	eq
 8002428:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800242a:	750a      	strbeq	r2, [r1, #20]
 800242c:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 800242e:	754a      	strbeq	r2, [r1, #21]
}
 8002430:	4770      	bx	lr

08002432 <sync_window>:
{
 8002432:	b570      	push	{r4, r5, r6, lr}
	if (fs->wflag) {	/* Is the disk access window dirty */
 8002434:	78c3      	ldrb	r3, [r0, #3]
{
 8002436:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Is the disk access window dirty */
 8002438:	b90b      	cbnz	r3, 800243e <sync_window+0xc>
	FRESULT res = FR_OK;
 800243a:	2000      	movs	r0, #0
}
 800243c:	bd70      	pop	{r4, r5, r6, pc}
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 800243e:	f100 0638 	add.w	r6, r0, #56	; 0x38
 8002442:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002444:	2301      	movs	r3, #1
 8002446:	4631      	mov	r1, r6
 8002448:	7840      	ldrb	r0, [r0, #1]
 800244a:	f7ff fdd7 	bl	8001ffc <disk_write>
 800244e:	b980      	cbnz	r0, 8002472 <sync_window+0x40>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8002450:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002452:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002454:	6a22      	ldr	r2, [r4, #32]
 8002456:	1acb      	subs	r3, r1, r3
 8002458:	4293      	cmp	r3, r2
			fs->wflag = 0;	/* Clear window dirty flag */
 800245a:	70e0      	strb	r0, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800245c:	d2ed      	bcs.n	800243a <sync_window+0x8>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800245e:	78a3      	ldrb	r3, [r4, #2]
 8002460:	2b02      	cmp	r3, #2
 8002462:	d1ea      	bne.n	800243a <sync_window+0x8>
 8002464:	440a      	add	r2, r1
 8002466:	2301      	movs	r3, #1
 8002468:	4631      	mov	r1, r6
 800246a:	7860      	ldrb	r0, [r4, #1]
 800246c:	f7ff fdc6 	bl	8001ffc <disk_write>
 8002470:	e7e3      	b.n	800243a <sync_window+0x8>
			res = FR_DISK_ERR;
 8002472:	2001      	movs	r0, #1
 8002474:	e7e2      	b.n	800243c <sync_window+0xa>

08002476 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002476:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
 8002478:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800247a:	428b      	cmp	r3, r1
{
 800247c:	4606      	mov	r6, r0
 800247e:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002480:	d012      	beq.n	80024a8 <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 8002482:	f7ff ffd6 	bl	8002432 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8002486:	4604      	mov	r4, r0
 8002488:	b960      	cbnz	r0, 80024a4 <move_window+0x2e>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 800248a:	462a      	mov	r2, r5
 800248c:	2301      	movs	r3, #1
 800248e:	f106 0138 	add.w	r1, r6, #56	; 0x38
 8002492:	7870      	ldrb	r0, [r6, #1]
 8002494:	f7ff fd72 	bl	8001f7c <disk_read>
 8002498:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 800249a:	bf1c      	itt	ne
 800249c:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 80024a0:	2401      	movne	r4, #1
			fs->winsect = sector;
 80024a2:	6375      	str	r5, [r6, #52]	; 0x34
}
 80024a4:	4620      	mov	r0, r4
 80024a6:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 80024a8:	2400      	movs	r4, #0
 80024aa:	e7fb      	b.n	80024a4 <move_window+0x2e>

080024ac <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80024ac:	2300      	movs	r3, #0
{
 80024ae:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80024b0:	70c3      	strb	r3, [r0, #3]
 80024b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024b6:	6343      	str	r3, [r0, #52]	; 0x34
{
 80024b8:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80024ba:	f7ff ffdc 	bl	8002476 <move_window>
 80024be:	bb18      	cbnz	r0, 8002508 <check_fs+0x5c>
	rv = rv << 8 | ptr[0];
 80024c0:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
 80024c4:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
 80024c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 80024cc:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d11b      	bne.n	800250c <check_fs+0x60>
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 80024d4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80024d8:	2beb      	cmp	r3, #235	; 0xeb
 80024da:	d003      	beq.n	80024e4 <check_fs+0x38>
 80024dc:	3318      	adds	r3, #24
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d815      	bhi.n	8002510 <check_fs+0x64>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 80024e4:	2203      	movs	r2, #3
 80024e6:	490b      	ldr	r1, [pc, #44]	; (8002514 <check_fs+0x68>)
 80024e8:	f104 006e 	add.w	r0, r4, #110	; 0x6e
 80024ec:	f7ff ff0c 	bl	8002308 <mem_cmp>
 80024f0:	b148      	cbz	r0, 8002506 <check_fs+0x5a>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 80024f2:	2205      	movs	r2, #5
 80024f4:	4908      	ldr	r1, [pc, #32]	; (8002518 <check_fs+0x6c>)
 80024f6:	f104 008a 	add.w	r0, r4, #138	; 0x8a
 80024fa:	f7ff ff05 	bl	8002308 <mem_cmp>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 80024fe:	2800      	cmp	r0, #0
 8002500:	bf14      	ite	ne
 8002502:	2002      	movne	r0, #2
 8002504:	2000      	moveq	r0, #0
}
 8002506:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8002508:	2004      	movs	r0, #4
 800250a:	e7fc      	b.n	8002506 <check_fs+0x5a>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 800250c:	2003      	movs	r0, #3
 800250e:	e7fa      	b.n	8002506 <check_fs+0x5a>
	return 2;	/* Valid BS but not FAT */
 8002510:	2002      	movs	r0, #2
 8002512:	e7f8      	b.n	8002506 <check_fs+0x5a>
 8002514:	080059cc 	.word	0x080059cc
 8002518:	080059c4 	.word	0x080059c4

0800251c <find_volume>:
{
 800251c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	*rfs = 0;
 8002520:	2300      	movs	r3, #0
 8002522:	600b      	str	r3, [r1, #0]
{
 8002524:	4688      	mov	r8, r1
 8002526:	4616      	mov	r6, r2
	vol = get_ldnumber(path);
 8002528:	f7ff ff16 	bl	8002358 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800252c:	1e07      	subs	r7, r0, #0
 800252e:	f2c0 80c8 	blt.w	80026c2 <find_volume+0x1a6>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8002532:	4d9e      	ldr	r5, [pc, #632]	; (80027ac <find_volume+0x290>)
 8002534:	eb05 0387 	add.w	r3, r5, r7, lsl #2
 8002538:	685c      	ldr	r4, [r3, #4]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800253a:	2c00      	cmp	r4, #0
 800253c:	f000 80c3 	beq.w	80026c6 <find_volume+0x1aa>
	*rfs = fs;							/* Return pointer to the filesystem object */
 8002540:	f8c8 4000 	str.w	r4, [r8]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8002544:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8002546:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 800254a:	b173      	cbz	r3, 800256a <find_volume+0x4e>
		stat = disk_status(fs->pdrv);
 800254c:	7860      	ldrb	r0, [r4, #1]
 800254e:	f7ff fd0b 	bl	8001f68 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8002552:	07c1      	lsls	r1, r0, #31
 8002554:	d409      	bmi.n	800256a <find_volume+0x4e>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8002556:	2e00      	cmp	r6, #0
 8002558:	f000 80b7 	beq.w	80026ca <find_volume+0x1ae>
 800255c:	f010 0004 	ands.w	r0, r0, #4
 8002560:	d000      	beq.n	8002564 <find_volume+0x48>
				return FR_WRITE_PROTECTED;
 8002562:	200a      	movs	r0, #10
}
 8002564:	b004      	add	sp, #16
 8002566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	fs->fs_type = 0;					/* Clear the filesystem object */
 800256a:	2300      	movs	r3, #0
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800256c:	b2f8      	uxtb	r0, r7
	fs->fs_type = 0;					/* Clear the filesystem object */
 800256e:	7023      	strb	r3, [r4, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002570:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 8002572:	f7ff fc1b 	bl	8001dac <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8002576:	07c2      	lsls	r2, r0, #31
 8002578:	f100 80a9 	bmi.w	80026ce <find_volume+0x1b2>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800257c:	b10e      	cbz	r6, 8002582 <find_volume+0x66>
 800257e:	0743      	lsls	r3, r0, #29
 8002580:	d4ef      	bmi.n	8002562 <find_volume+0x46>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8002582:	2100      	movs	r1, #0
 8002584:	4620      	mov	r0, r4
 8002586:	f7ff ff91 	bl	80024ac <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800258a:	2802      	cmp	r0, #2
 800258c:	d17e      	bne.n	800268c <find_volume+0x170>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800258e:	2100      	movs	r1, #0
 8002590:	f504 76ff 	add.w	r6, r4, #510	; 0x1fe
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8002594:	f816 0c04 	ldrb.w	r0, [r6, #-4]
 8002598:	b110      	cbz	r0, 80025a0 <find_volume+0x84>
 800259a:	4630      	mov	r0, r6
 800259c:	f7ff fe9e 	bl	80022dc <ld_dword>
 80025a0:	f84d 0021 	str.w	r0, [sp, r1, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80025a4:	3101      	adds	r1, #1
 80025a6:	2904      	cmp	r1, #4
 80025a8:	f106 0610 	add.w	r6, r6, #16
 80025ac:	d1f2      	bne.n	8002594 <find_volume+0x78>
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80025ae:	2600      	movs	r6, #0
			bsect = br[i];
 80025b0:	f85d 7026 	ldr.w	r7, [sp, r6, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80025b4:	2f00      	cmp	r7, #0
 80025b6:	d061      	beq.n	800267c <find_volume+0x160>
 80025b8:	4639      	mov	r1, r7
 80025ba:	4620      	mov	r0, r4
 80025bc:	f7ff ff76 	bl	80024ac <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80025c0:	2801      	cmp	r0, #1
 80025c2:	d85c      	bhi.n	800267e <find_volume+0x162>
	rv = rv << 8 | ptr[0];
 80025c4:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80025c8:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80025cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80025d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025d4:	d15e      	bne.n	8002694 <find_volume+0x178>
	rv = rv << 8 | ptr[0];
 80025d6:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 80025da:	f894 604e 	ldrb.w	r6, [r4, #78]	; 0x4e
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80025de:	ea56 2603 	orrs.w	r6, r6, r3, lsl #8
 80025e2:	d104      	bne.n	80025ee <find_volume+0xd2>
 80025e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80025e8:	f7ff fe78 	bl	80022dc <ld_dword>
 80025ec:	4606      	mov	r6, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80025ee:	f894 a048 	ldrb.w	sl, [r4, #72]	; 0x48
		fs->fsize = fasize;
 80025f2:	6226      	str	r6, [r4, #32]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80025f4:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80025f8:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80025fa:	f884 a002 	strb.w	sl, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80025fe:	d849      	bhi.n	8002694 <find_volume+0x178>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8002600:	f894 8045 	ldrb.w	r8, [r4, #69]	; 0x45
 8002604:	fa1f f388 	uxth.w	r3, r8
 8002608:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800260a:	2b00      	cmp	r3, #0
 800260c:	d042      	beq.n	8002694 <find_volume+0x178>
 800260e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8002612:	ea13 0f08 	tst.w	r3, r8
 8002616:	d13d      	bne.n	8002694 <find_volume+0x178>
	rv = rv << 8 | ptr[0];
 8002618:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800261c:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8002620:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8002624:	f019 0f0f 	tst.w	r9, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8002628:	f8a4 9008 	strh.w	r9, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800262c:	d132      	bne.n	8002694 <find_volume+0x178>
	rv = rv << 8 | ptr[0];
 800262e:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
 8002632:	f894 004b 	ldrb.w	r0, [r4, #75]	; 0x4b
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8002636:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 800263a:	d103      	bne.n	8002644 <find_volume+0x128>
 800263c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002640:	f7ff fe4c 	bl	80022dc <ld_dword>
	rv = rv << 8 | ptr[0];
 8002644:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 8002648:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800264c:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8002650:	d020      	beq.n	8002694 <find_volume+0x178>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8002652:	fb06 fc0a 	mul.w	ip, r6, sl
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8002656:	eb03 1219 	add.w	r2, r3, r9, lsr #4
 800265a:	4462      	add	r2, ip
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800265c:	4290      	cmp	r0, r2
 800265e:	d319      	bcc.n	8002694 <find_volume+0x178>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8002660:	1a81      	subs	r1, r0, r2
 8002662:	fbb1 f1f8 	udiv	r1, r1, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002666:	b1a9      	cbz	r1, 8002694 <find_volume+0x178>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8002668:	4851      	ldr	r0, [pc, #324]	; (80027b0 <find_volume+0x294>)
 800266a:	4281      	cmp	r1, r0
 800266c:	d812      	bhi.n	8002694 <find_volume+0x178>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800266e:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8002672:	4281      	cmp	r1, r0
 8002674:	d92d      	bls.n	80026d2 <find_volume+0x1b6>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8002676:	f04f 0803 	mov.w	r8, #3
 800267a:	e032      	b.n	80026e2 <find_volume+0x1c6>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800267c:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800267e:	3601      	adds	r6, #1
 8002680:	2e04      	cmp	r6, #4
 8002682:	d195      	bne.n	80025b0 <find_volume+0x94>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002684:	2804      	cmp	r0, #4
 8002686:	d105      	bne.n	8002694 <find_volume+0x178>
 8002688:	2001      	movs	r0, #1
 800268a:	e76b      	b.n	8002564 <find_volume+0x48>
 800268c:	2804      	cmp	r0, #4
 800268e:	d0fb      	beq.n	8002688 <find_volume+0x16c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8002690:	2801      	cmp	r0, #1
 8002692:	d901      	bls.n	8002698 <find_volume+0x17c>
 8002694:	200d      	movs	r0, #13
 8002696:	e765      	b.n	8002564 <find_volume+0x48>
	bsect = 0;
 8002698:	2700      	movs	r7, #0
 800269a:	e793      	b.n	80025c4 <find_volume+0xa8>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800269c:	f1b9 0f00 	cmp.w	r9, #0
 80026a0:	d0f8      	beq.n	8002694 <find_volume+0x178>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80026a2:	f1b8 0f02 	cmp.w	r8, #2
 80026a6:	ea4f 0041 	mov.w	r0, r1, lsl #1
 80026aa:	bf18      	it	ne
 80026ac:	1840      	addne	r0, r0, r1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80026ae:	4463      	add	r3, ip
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80026b0:	bf18      	it	ne
 80026b2:	f001 0101 	andne.w	r1, r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80026b6:	62e3      	str	r3, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80026b8:	bf0c      	ite	eq
 80026ba:	4601      	moveq	r1, r0
 80026bc:	eb01 0150 	addne.w	r1, r1, r0, lsr #1
 80026c0:	e029      	b.n	8002716 <find_volume+0x1fa>
	if (vol < 0) return FR_INVALID_DRIVE;
 80026c2:	200b      	movs	r0, #11
 80026c4:	e74e      	b.n	8002564 <find_volume+0x48>
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 80026c6:	200c      	movs	r0, #12
 80026c8:	e74c      	b.n	8002564 <find_volume+0x48>
			return FR_OK;				/* The filesystem object is valid */
 80026ca:	4630      	mov	r0, r6
 80026cc:	e74a      	b.n	8002564 <find_volume+0x48>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80026ce:	2003      	movs	r0, #3
 80026d0:	e748      	b.n	8002564 <find_volume+0x48>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80026d2:	f640 78f5 	movw	r8, #4085	; 0xff5
 80026d6:	4541      	cmp	r1, r8
 80026d8:	bf94      	ite	ls
 80026da:	f04f 0801 	movls.w	r8, #1
 80026de:	f04f 0802 	movhi.w	r8, #2
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80026e2:	3102      	adds	r1, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80026e4:	443b      	add	r3, r7
		fs->database = bsect + sysect;					/* Data start sector */
 80026e6:	443a      	add	r2, r7
		if (fmt == FS_FAT32) {
 80026e8:	f1b8 0f03 	cmp.w	r8, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80026ec:	61e1      	str	r1, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80026ee:	6267      	str	r7, [r4, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80026f0:	62a3      	str	r3, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80026f2:	6322      	str	r2, [r4, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80026f4:	d1d2      	bne.n	800269c <find_volume+0x180>
	rv = rv << 8 | ptr[0];
 80026f6:	f894 2063 	ldrb.w	r2, [r4, #99]	; 0x63
 80026fa:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80026fe:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8002702:	d1c7      	bne.n	8002694 <find_volume+0x178>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8002704:	f1b9 0f00 	cmp.w	r9, #0
 8002708:	d1c4      	bne.n	8002694 <find_volume+0x178>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800270a:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800270e:	f7ff fde5 	bl	80022dc <ld_dword>
 8002712:	62e0      	str	r0, [r4, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8002714:	0089      	lsls	r1, r1, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8002716:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 800271a:	ebb6 2f51 	cmp.w	r6, r1, lsr #9
 800271e:	d3b9      	bcc.n	8002694 <find_volume+0x178>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8002720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002724:	e9c4 3304 	strd	r3, r3, [r4, #16]
		fs->fsi_flag = 0x80;
 8002728:	2380      	movs	r3, #128	; 0x80
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 800272a:	f1b8 0f03 	cmp.w	r8, #3
		fs->fsi_flag = 0x80;
 800272e:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8002730:	d12f      	bne.n	8002792 <find_volume+0x276>
	rv = rv << 8 | ptr[0];
 8002732:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 8002736:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 800273a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800273e:	2b01      	cmp	r3, #1
 8002740:	d127      	bne.n	8002792 <find_volume+0x276>
			&& move_window(fs, bsect + 1) == FR_OK)
 8002742:	1c79      	adds	r1, r7, #1
 8002744:	4620      	mov	r0, r4
 8002746:	f7ff fe96 	bl	8002476 <move_window>
 800274a:	bb10      	cbnz	r0, 8002792 <find_volume+0x276>
	rv = rv << 8 | ptr[0];
 800274c:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
 8002750:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
			fs->fsi_flag = 0;
 8002754:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 8002756:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800275a:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800275e:	4293      	cmp	r3, r2
 8002760:	d117      	bne.n	8002792 <find_volume+0x276>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8002762:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8002766:	f7ff fdb9 	bl	80022dc <ld_dword>
 800276a:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <find_volume+0x298>)
 800276c:	4298      	cmp	r0, r3
 800276e:	d110      	bne.n	8002792 <find_volume+0x276>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8002770:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8002774:	f7ff fdb2 	bl	80022dc <ld_dword>
 8002778:	4b0f      	ldr	r3, [pc, #60]	; (80027b8 <find_volume+0x29c>)
 800277a:	4298      	cmp	r0, r3
 800277c:	d109      	bne.n	8002792 <find_volume+0x276>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800277e:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8002782:	f7ff fdab 	bl	80022dc <ld_dword>
 8002786:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8002788:	f504 7009 	add.w	r0, r4, #548	; 0x224
 800278c:	f7ff fda6 	bl	80022dc <ld_dword>
 8002790:	6120      	str	r0, [r4, #16]
	fs->cdir = 0;			/* Initialize current directory */
 8002792:	2000      	movs	r0, #0
	fs->id = ++Fsid;		/* Volume mount ID */
 8002794:	892b      	ldrh	r3, [r5, #8]
	fs->fs_type = fmt;		/* FAT sub-type */
 8002796:	f884 8000 	strb.w	r8, [r4]
	fs->id = ++Fsid;		/* Volume mount ID */
 800279a:	3301      	adds	r3, #1
 800279c:	b29b      	uxth	r3, r3
 800279e:	812b      	strh	r3, [r5, #8]
 80027a0:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80027a2:	4b06      	ldr	r3, [pc, #24]	; (80027bc <find_volume+0x2a0>)
	fs->cdir = 0;			/* Initialize current directory */
 80027a4:	61a0      	str	r0, [r4, #24]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80027a6:	60e3      	str	r3, [r4, #12]
	return FR_OK;
 80027a8:	e6dc      	b.n	8002564 <find_volume+0x48>
 80027aa:	bf00      	nop
 80027ac:	20000128 	.word	0x20000128
 80027b0:	0ffffff5 	.word	0x0ffffff5
 80027b4:	41615252 	.word	0x41615252
 80027b8:	61417272 	.word	0x61417272
 80027bc:	20000132 	.word	0x20000132

080027c0 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80027c0:	2901      	cmp	r1, #1
{
 80027c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027c6:	4605      	mov	r5, r0
 80027c8:	460c      	mov	r4, r1
 80027ca:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80027cc:	d972      	bls.n	80028b4 <put_fat+0xf4>
 80027ce:	69c3      	ldr	r3, [r0, #28]
 80027d0:	428b      	cmp	r3, r1
 80027d2:	d96f      	bls.n	80028b4 <put_fat+0xf4>
		switch (fs->fs_type) {
 80027d4:	7803      	ldrb	r3, [r0, #0]
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d03f      	beq.n	800285a <put_fat+0x9a>
 80027da:	2b03      	cmp	r3, #3
 80027dc:	d050      	beq.n	8002880 <put_fat+0xc0>
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d168      	bne.n	80028b4 <put_fat+0xf4>
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 80027e2:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80027e6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80027e8:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 80027ec:	f7ff fe43 	bl	8002476 <move_window>
 80027f0:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 80027f2:	bb38      	cbnz	r0, 8002844 <put_fat+0x84>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 80027f4:	f014 0401 	ands.w	r4, r4, #1
			p = fs->win + bc++ % SS(fs);
 80027f8:	f105 0938 	add.w	r9, r5, #56	; 0x38
 80027fc:	f108 0a01 	add.w	sl, r8, #1
 8002800:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 8002804:	bf17      	itett	ne
 8002806:	f819 3008 	ldrbne.w	r3, [r9, r8]
 800280a:	b2fb      	uxtbeq	r3, r7
 800280c:	f003 020f 	andne.w	r2, r3, #15
 8002810:	013b      	lslne	r3, r7, #4
 8002812:	bf1c      	itt	ne
 8002814:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8002818:	4313      	orrne	r3, r2
 800281a:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
 800281e:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002820:	6aa9      	ldr	r1, [r5, #40]	; 0x28
			fs->wflag = 1;
 8002822:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002824:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 8002828:	4628      	mov	r0, r5
 800282a:	f7ff fe24 	bl	8002476 <move_window>
			if (res != FR_OK) break;
 800282e:	4606      	mov	r6, r0
 8002830:	b940      	cbnz	r0, 8002844 <put_fat+0x84>
			p = fs->win + bc % SS(fs);
 8002832:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 8002836:	b144      	cbz	r4, 800284a <put_fat+0x8a>
 8002838:	f3c7 1707 	ubfx	r7, r7, #4, #8
 800283c:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 8002840:	2301      	movs	r3, #1
 8002842:	70eb      	strb	r3, [r5, #3]
}
 8002844:	4630      	mov	r0, r6
 8002846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 800284a:	f819 300a 	ldrb.w	r3, [r9, sl]
 800284e:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8002852:	f023 030f 	bic.w	r3, r3, #15
 8002856:	431f      	orrs	r7, r3
 8002858:	e7f0      	b.n	800283c <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800285a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800285c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8002860:	f7ff fe09 	bl	8002476 <move_window>
			if (res != FR_OK) break;
 8002864:	4606      	mov	r6, r0
 8002866:	2800      	cmp	r0, #0
 8002868:	d1ec      	bne.n	8002844 <put_fat+0x84>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 800286a:	0064      	lsls	r4, r4, #1
 800286c:	f105 0338 	add.w	r3, r5, #56	; 0x38
 8002870:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 8002874:	551f      	strb	r7, [r3, r4]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8002876:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8002878:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 800287c:	7057      	strb	r7, [r2, #1]
 800287e:	e7df      	b.n	8002840 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8002880:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002882:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8002886:	f7ff fdf6 	bl	8002476 <move_window>
			if (res != FR_OK) break;
 800288a:	4606      	mov	r6, r0
 800288c:	2800      	cmp	r0, #0
 800288e:	d1d9      	bne.n	8002844 <put_fat+0x84>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8002890:	00a4      	lsls	r4, r4, #2
 8002892:	f105 0338 	add.w	r3, r5, #56	; 0x38
 8002896:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800289a:	441c      	add	r4, r3
 800289c:	4620      	mov	r0, r4
 800289e:	f7ff fd1d 	bl	80022dc <ld_dword>
 80028a2:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 80028a6:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80028aa:	4339      	orrs	r1, r7
 80028ac:	4620      	mov	r0, r4
 80028ae:	f7ff fd1d 	bl	80022ec <st_dword>
 80028b2:	e7c5      	b.n	8002840 <put_fat+0x80>
	FRESULT res = FR_INT_ERR;
 80028b4:	2602      	movs	r6, #2
 80028b6:	e7c5      	b.n	8002844 <put_fat+0x84>

080028b8 <get_fat.isra.9>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80028b8:	2901      	cmp	r1, #1
static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 80028ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028bc:	4605      	mov	r5, r0
 80028be:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80028c0:	d952      	bls.n	8002968 <get_fat.isra.9+0xb0>
 80028c2:	69c3      	ldr	r3, [r0, #28]
 80028c4:	4299      	cmp	r1, r3
 80028c6:	d24f      	bcs.n	8002968 <get_fat.isra.9+0xb0>
		switch (fs->fs_type) {
 80028c8:	7803      	ldrb	r3, [r0, #0]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d029      	beq.n	8002922 <get_fat.isra.9+0x6a>
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	d038      	beq.n	8002944 <get_fat.isra.9+0x8c>
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d148      	bne.n	8002968 <get_fat.isra.9+0xb0>
			bc = (UINT)clst; bc += bc / 2;
 80028d6:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80028da:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80028dc:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 80028e0:	f7ff fdc9 	bl	8002476 <move_window>
 80028e4:	b110      	cbz	r0, 80028ec <get_fat.isra.9+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80028e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80028ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80028ec:	6aa9      	ldr	r1, [r5, #40]	; 0x28
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 80028ee:	1c77      	adds	r7, r6, #1
 80028f0:	f3c6 0608 	ubfx	r6, r6, #0, #9
 80028f4:	442e      	add	r6, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80028f6:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 80028fa:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 80028fc:	f896 6038 	ldrb.w	r6, [r6, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002900:	f7ff fdb9 	bl	8002476 <move_window>
 8002904:	2800      	cmp	r0, #0
 8002906:	d1ee      	bne.n	80028e6 <get_fat.isra.9+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8002908:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800290c:	443d      	add	r5, r7
 800290e:	f895 0038 	ldrb.w	r0, [r5, #56]	; 0x38
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8002912:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8002914:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8002918:	bf4c      	ite	mi
 800291a:	0900      	lsrmi	r0, r0, #4
 800291c:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8002920:	e7e3      	b.n	80028ea <get_fat.isra.9+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002922:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002924:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8002928:	f7ff fda5 	bl	8002476 <move_window>
 800292c:	2800      	cmp	r0, #0
 800292e:	d1da      	bne.n	80028e6 <get_fat.isra.9+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8002930:	0064      	lsls	r4, r4, #1
 8002932:	3538      	adds	r5, #56	; 0x38
 8002934:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8002938:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
 800293a:	785b      	ldrb	r3, [r3, #1]
 800293c:	5d28      	ldrb	r0, [r5, r4]
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800293e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8002942:	e7d2      	b.n	80028ea <get_fat.isra.9+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002944:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002946:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800294a:	f7ff fd94 	bl	8002476 <move_window>
 800294e:	2800      	cmp	r0, #0
 8002950:	d1c9      	bne.n	80028e6 <get_fat.isra.9+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8002952:	00a4      	lsls	r4, r4, #2
 8002954:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8002958:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800295c:	4420      	add	r0, r4
 800295e:	f7ff fcbd 	bl	80022dc <ld_dword>
 8002962:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8002966:	e7c0      	b.n	80028ea <get_fat.isra.9+0x32>
			val = 1;	/* Internal error */
 8002968:	2001      	movs	r0, #1
 800296a:	e7be      	b.n	80028ea <get_fat.isra.9+0x32>

0800296c <dir_sdi>:
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800296c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
{
 8002970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002972:	4606      	mov	r6, r0
 8002974:	460d      	mov	r5, r1
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8002976:	d301      	bcc.n	800297c <dir_sdi+0x10>
		return FR_INT_ERR;
 8002978:	2002      	movs	r0, #2
}
 800297a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800297c:	06ca      	lsls	r2, r1, #27
 800297e:	d1fb      	bne.n	8002978 <dir_sdi+0xc>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8002980:	6882      	ldr	r2, [r0, #8]
	FATFS *fs = dp->obj.fs;
 8002982:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8002984:	6131      	str	r1, [r6, #16]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8002986:	b9c2      	cbnz	r2, 80029ba <dir_sdi+0x4e>
 8002988:	7823      	ldrb	r3, [r4, #0]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <dir_sdi+0x26>
		clst = fs->dirbase;
 800298e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8002990:	b9a3      	cbnz	r3, 80029bc <dir_sdi+0x50>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8002992:	8923      	ldrh	r3, [r4, #8]
 8002994:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8002998:	d9ee      	bls.n	8002978 <dir_sdi+0xc>
		dp->sect = fs->dirbase;
 800299a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800299c:	61b3      	str	r3, [r6, #24]
	if (dp->sect == 0) return FR_INT_ERR;
 800299e:	69b3      	ldr	r3, [r6, #24]
	dp->clust = clst;					/* Current cluster# */
 80029a0:	6172      	str	r2, [r6, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0e8      	beq.n	8002978 <dir_sdi+0xc>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80029a6:	eb03 2355 	add.w	r3, r3, r5, lsr #9
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80029aa:	3438      	adds	r4, #56	; 0x38
 80029ac:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80029b0:	442c      	add	r4, r5
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80029b2:	61b3      	str	r3, [r6, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80029b4:	61f4      	str	r4, [r6, #28]
	return FR_OK;
 80029b6:	2000      	movs	r0, #0
 80029b8:	e7df      	b.n	800297a <dir_sdi+0xe>
 80029ba:	4613      	mov	r3, r2
		while (ofs >= csz) {				/* Follow cluster chain */
 80029bc:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80029be:	8967      	ldrh	r7, [r4, #10]
 80029c0:	027f      	lsls	r7, r7, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 80029c2:	42bd      	cmp	r5, r7
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80029c4:	4611      	mov	r1, r2
		while (ofs >= csz) {				/* Follow cluster chain */
 80029c6:	d204      	bcs.n	80029d2 <dir_sdi+0x66>
		dp->sect = clst2sect(fs, clst);
 80029c8:	4620      	mov	r0, r4
 80029ca:	f7ff fcab 	bl	8002324 <clst2sect>
 80029ce:	61b0      	str	r0, [r6, #24]
 80029d0:	e7e5      	b.n	800299e <dir_sdi+0x32>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80029d2:	6830      	ldr	r0, [r6, #0]
 80029d4:	f7ff ff70 	bl	80028b8 <get_fat.isra.9>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80029d8:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80029da:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80029dc:	d006      	beq.n	80029ec <dir_sdi+0x80>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80029de:	2801      	cmp	r0, #1
 80029e0:	d9ca      	bls.n	8002978 <dir_sdi+0xc>
 80029e2:	69e3      	ldr	r3, [r4, #28]
 80029e4:	4283      	cmp	r3, r0
 80029e6:	d9c7      	bls.n	8002978 <dir_sdi+0xc>
			ofs -= csz;
 80029e8:	1bed      	subs	r5, r5, r7
 80029ea:	e7ea      	b.n	80029c2 <dir_sdi+0x56>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80029ec:	2001      	movs	r0, #1
 80029ee:	e7c4      	b.n	800297a <dir_sdi+0xe>

080029f0 <create_chain>:
{
 80029f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029f4:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 80029f6:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 80029f8:	460f      	mov	r7, r1
 80029fa:	b949      	cbnz	r1, 8002a10 <create_chain+0x20>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 80029fc:	692e      	ldr	r6, [r5, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80029fe:	b1ce      	cbz	r6, 8002a34 <create_chain+0x44>
 8002a00:	69eb      	ldr	r3, [r5, #28]
 8002a02:	42b3      	cmp	r3, r6
 8002a04:	bf98      	it	ls
 8002a06:	2601      	movls	r6, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8002a08:	696b      	ldr	r3, [r5, #20]
 8002a0a:	b9ab      	cbnz	r3, 8002a38 <create_chain+0x48>
 8002a0c:	2400      	movs	r4, #0
 8002a0e:	e009      	b.n	8002a24 <create_chain+0x34>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8002a10:	4628      	mov	r0, r5
 8002a12:	f7ff ff51 	bl	80028b8 <get_fat.isra.9>
		if (cs < 2) return 1;				/* Test for insanity */
 8002a16:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8002a18:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Test for insanity */
 8002a1a:	d958      	bls.n	8002ace <create_chain+0xde>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8002a1c:	1c42      	adds	r2, r0, #1
 8002a1e:	d104      	bne.n	8002a2a <create_chain+0x3a>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8002a20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 8002a24:	4620      	mov	r0, r4
 8002a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8002a2a:	69eb      	ldr	r3, [r5, #28]
 8002a2c:	4283      	cmp	r3, r0
 8002a2e:	d8f9      	bhi.n	8002a24 <create_chain+0x34>
 8002a30:	463e      	mov	r6, r7
 8002a32:	e7e9      	b.n	8002a08 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8002a34:	2601      	movs	r6, #1
 8002a36:	e7e7      	b.n	8002a08 <create_chain+0x18>
		if (scl == clst) {						/* Stretching an existing chain? */
 8002a38:	42be      	cmp	r6, r7
 8002a3a:	d115      	bne.n	8002a68 <create_chain+0x78>
			if (ncl >= fs->n_fatent) ncl = 2;
 8002a3c:	69eb      	ldr	r3, [r5, #28]
			ncl = scl + 1;						/* Test if next cluster is free */
 8002a3e:	1c74      	adds	r4, r6, #1
			if (ncl >= fs->n_fatent) ncl = 2;
 8002a40:	429c      	cmp	r4, r3
 8002a42:	bf28      	it	cs
 8002a44:	2402      	movcs	r4, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8002a46:	f8d8 0000 	ldr.w	r0, [r8]
 8002a4a:	4621      	mov	r1, r4
 8002a4c:	f7ff ff34 	bl	80028b8 <get_fat.isra.9>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8002a50:	2801      	cmp	r0, #1
 8002a52:	d03c      	beq.n	8002ace <create_chain+0xde>
 8002a54:	1c43      	adds	r3, r0, #1
 8002a56:	d0e3      	beq.n	8002a20 <create_chain+0x30>
			if (cs != 0) {						/* Not free? */
 8002a58:	b1d8      	cbz	r0, 8002a92 <create_chain+0xa2>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8002a5a:	692b      	ldr	r3, [r5, #16]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d903      	bls.n	8002a68 <create_chain+0x78>
 8002a60:	69ea      	ldr	r2, [r5, #28]
 8002a62:	4293      	cmp	r3, r2
 8002a64:	bf38      	it	cc
 8002a66:	461e      	movcc	r6, r3
 8002a68:	4634      	mov	r4, r6
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8002a6a:	69eb      	ldr	r3, [r5, #28]
				ncl++;							/* Next cluster */
 8002a6c:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8002a6e:	42a3      	cmp	r3, r4
 8002a70:	d802      	bhi.n	8002a78 <create_chain+0x88>
					if (ncl > scl) return 0;	/* No free cluster found? */
 8002a72:	2e01      	cmp	r6, #1
 8002a74:	d9ca      	bls.n	8002a0c <create_chain+0x1c>
					ncl = 2;
 8002a76:	2402      	movs	r4, #2
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8002a78:	4621      	mov	r1, r4
 8002a7a:	f8d8 0000 	ldr.w	r0, [r8]
 8002a7e:	f7ff ff1b 	bl	80028b8 <get_fat.isra.9>
				if (cs == 0) break;				/* Found a free cluster? */
 8002a82:	b140      	cbz	r0, 8002a96 <create_chain+0xa6>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8002a84:	2801      	cmp	r0, #1
 8002a86:	d022      	beq.n	8002ace <create_chain+0xde>
 8002a88:	3001      	adds	r0, #1
 8002a8a:	d0c9      	beq.n	8002a20 <create_chain+0x30>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8002a8c:	42b4      	cmp	r4, r6
 8002a8e:	d1ec      	bne.n	8002a6a <create_chain+0x7a>
 8002a90:	e7bc      	b.n	8002a0c <create_chain+0x1c>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8002a92:	2c00      	cmp	r4, #0
 8002a94:	d0e8      	beq.n	8002a68 <create_chain+0x78>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8002a96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a9a:	4621      	mov	r1, r4
 8002a9c:	4628      	mov	r0, r5
 8002a9e:	f7ff fe8f 	bl	80027c0 <put_fat>
		if (res == FR_OK && clst != 0) {
 8002aa2:	b990      	cbnz	r0, 8002aca <create_chain+0xda>
 8002aa4:	b957      	cbnz	r7, 8002abc <create_chain+0xcc>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8002aa6:	69ea      	ldr	r2, [r5, #28]
 8002aa8:	696b      	ldr	r3, [r5, #20]
 8002aaa:	3a02      	subs	r2, #2
 8002aac:	4293      	cmp	r3, r2
		fs->last_clst = ncl;
 8002aae:	612c      	str	r4, [r5, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8002ab0:	d90f      	bls.n	8002ad2 <create_chain+0xe2>
		fs->fsi_flag |= 1;
 8002ab2:	792b      	ldrb	r3, [r5, #4]
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	712b      	strb	r3, [r5, #4]
 8002aba:	e7b3      	b.n	8002a24 <create_chain+0x34>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8002abc:	4622      	mov	r2, r4
 8002abe:	4639      	mov	r1, r7
 8002ac0:	4628      	mov	r0, r5
 8002ac2:	f7ff fe7d 	bl	80027c0 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8002ac6:	2800      	cmp	r0, #0
 8002ac8:	d0ed      	beq.n	8002aa6 <create_chain+0xb6>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8002aca:	2801      	cmp	r0, #1
 8002acc:	d0a8      	beq.n	8002a20 <create_chain+0x30>
 8002ace:	2401      	movs	r4, #1
 8002ad0:	e7a8      	b.n	8002a24 <create_chain+0x34>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	616b      	str	r3, [r5, #20]
 8002ad6:	e7ec      	b.n	8002ab2 <create_chain+0xc2>

08002ad8 <remove_chain>:
{
 8002ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ada:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8002adc:	2d01      	cmp	r5, #1
{
 8002ade:	4607      	mov	r7, r0
 8002ae0:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8002ae2:	d92c      	bls.n	8002b3e <remove_chain+0x66>
	FATFS *fs = obj->fs;
 8002ae4:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8002ae6:	69e3      	ldr	r3, [r4, #28]
 8002ae8:	42ab      	cmp	r3, r5
 8002aea:	d928      	bls.n	8002b3e <remove_chain+0x66>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8002aec:	b12a      	cbz	r2, 8002afa <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8002aee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002af2:	4620      	mov	r0, r4
 8002af4:	f7ff fe64 	bl	80027c0 <put_fat>
		if (res != FR_OK) return res;
 8002af8:	b930      	cbnz	r0, 8002b08 <remove_chain+0x30>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8002afa:	4629      	mov	r1, r5
 8002afc:	6838      	ldr	r0, [r7, #0]
 8002afe:	f7ff fedb 	bl	80028b8 <get_fat.isra.9>
		if (nxt == 0) break;				/* Empty cluster? */
 8002b02:	4606      	mov	r6, r0
 8002b04:	b908      	cbnz	r0, 8002b0a <remove_chain+0x32>
	return FR_OK;
 8002b06:	2000      	movs	r0, #0
}
 8002b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8002b0a:	2801      	cmp	r0, #1
 8002b0c:	d017      	beq.n	8002b3e <remove_chain+0x66>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8002b0e:	1c43      	adds	r3, r0, #1
 8002b10:	d017      	beq.n	8002b42 <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8002b12:	2200      	movs	r2, #0
 8002b14:	4629      	mov	r1, r5
 8002b16:	4620      	mov	r0, r4
 8002b18:	f7ff fe52 	bl	80027c0 <put_fat>
			if (res != FR_OK) return res;
 8002b1c:	2800      	cmp	r0, #0
 8002b1e:	d1f3      	bne.n	8002b08 <remove_chain+0x30>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8002b20:	69e2      	ldr	r2, [r4, #28]
 8002b22:	6963      	ldr	r3, [r4, #20]
 8002b24:	1e91      	subs	r1, r2, #2
 8002b26:	428b      	cmp	r3, r1
 8002b28:	d205      	bcs.n	8002b36 <remove_chain+0x5e>
			fs->free_clst++;
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	6163      	str	r3, [r4, #20]
			fs->fsi_flag |= 1;
 8002b2e:	7923      	ldrb	r3, [r4, #4]
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	7123      	strb	r3, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8002b36:	42b2      	cmp	r2, r6
 8002b38:	4635      	mov	r5, r6
 8002b3a:	d8de      	bhi.n	8002afa <remove_chain+0x22>
 8002b3c:	e7e3      	b.n	8002b06 <remove_chain+0x2e>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8002b3e:	2002      	movs	r0, #2
 8002b40:	e7e2      	b.n	8002b08 <remove_chain+0x30>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8002b42:	2001      	movs	r0, #1
 8002b44:	e7e0      	b.n	8002b08 <remove_chain+0x30>

08002b46 <dir_clear>:
{
 8002b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b48:	4605      	mov	r5, r0
 8002b4a:	460e      	mov	r6, r1
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8002b4c:	f7ff fc71 	bl	8002432 <sync_window>
 8002b50:	4604      	mov	r4, r0
 8002b52:	b9f8      	cbnz	r0, 8002b94 <dir_clear+0x4e>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8002b54:	4631      	mov	r1, r6
 8002b56:	4628      	mov	r0, r5
 8002b58:	f7ff fbe4 	bl	8002324 <clst2sect>
	mem_set(fs->win, 0, SS(fs));	/* Clear window buffer */
 8002b5c:	f105 0638 	add.w	r6, r5, #56	; 0x38
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8002b60:	4607      	mov	r7, r0
	fs->winsect = sect;				/* Set window to top of the cluster */
 8002b62:	6368      	str	r0, [r5, #52]	; 0x34
	mem_set(fs->win, 0, SS(fs));	/* Clear window buffer */
 8002b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b68:	4621      	mov	r1, r4
 8002b6a:	4630      	mov	r0, r6
 8002b6c:	f7ff fbc6 	bl	80022fc <mem_set>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8002b70:	896b      	ldrh	r3, [r5, #10]
 8002b72:	429c      	cmp	r4, r3
 8002b74:	d304      	bcc.n	8002b80 <dir_clear+0x3a>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8002b76:	8968      	ldrh	r0, [r5, #10]
 8002b78:	1b00      	subs	r0, r0, r4
 8002b7a:	bf18      	it	ne
 8002b7c:	2001      	movne	r0, #1
}
 8002b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8002b80:	2301      	movs	r3, #1
 8002b82:	193a      	adds	r2, r7, r4
 8002b84:	4631      	mov	r1, r6
 8002b86:	7868      	ldrb	r0, [r5, #1]
 8002b88:	f7ff fa38 	bl	8001ffc <disk_write>
 8002b8c:	2800      	cmp	r0, #0
 8002b8e:	d1f2      	bne.n	8002b76 <dir_clear+0x30>
 8002b90:	3401      	adds	r4, #1
 8002b92:	e7ed      	b.n	8002b70 <dir_clear+0x2a>
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8002b94:	2001      	movs	r0, #1
 8002b96:	e7f2      	b.n	8002b7e <dir_clear+0x38>

08002b98 <dir_next>:
{
 8002b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8002b9c:	6983      	ldr	r3, [r0, #24]
{
 8002b9e:	4604      	mov	r4, r0
 8002ba0:	4689      	mov	r9, r1
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8002ba2:	b1a3      	cbz	r3, 8002bce <dir_next+0x36>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8002ba4:	6907      	ldr	r7, [r0, #16]
 8002ba6:	3720      	adds	r7, #32
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8002ba8:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
 8002bac:	d20f      	bcs.n	8002bce <dir_next+0x36>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8002bae:	f3c7 0808 	ubfx	r8, r7, #0, #9
	FATFS *fs = dp->obj.fs;
 8002bb2:	6805      	ldr	r5, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8002bb4:	f1b8 0f00 	cmp.w	r8, #0
 8002bb8:	d139      	bne.n	8002c2e <dir_next+0x96>
		if (dp->clust == 0) {	/* Static table */
 8002bba:	6941      	ldr	r1, [r0, #20]
		dp->sect++;				/* Next sector */
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	6183      	str	r3, [r0, #24]
		if (dp->clust == 0) {	/* Static table */
 8002bc0:	b939      	cbnz	r1, 8002bd2 <dir_next+0x3a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8002bc2:	892b      	ldrh	r3, [r5, #8]
 8002bc4:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 8002bc8:	d831      	bhi.n	8002c2e <dir_next+0x96>
				dp->sect = 0; return FR_NO_FILE;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61a3      	str	r3, [r4, #24]
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8002bce:	2004      	movs	r0, #4
 8002bd0:	e00b      	b.n	8002bea <dir_next+0x52>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8002bd2:	896b      	ldrh	r3, [r5, #10]
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	ea13 2357 	ands.w	r3, r3, r7, lsr #9
 8002bda:	d128      	bne.n	8002c2e <dir_next+0x96>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8002bdc:	4628      	mov	r0, r5
 8002bde:	f7ff fe6b 	bl	80028b8 <get_fat.isra.9>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8002be2:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8002be4:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8002be6:	d802      	bhi.n	8002bee <dir_next+0x56>
 8002be8:	2002      	movs	r0, #2
}
 8002bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002bee:	1c42      	adds	r2, r0, #1
 8002bf0:	d101      	bne.n	8002bf6 <dir_next+0x5e>
 8002bf2:	2001      	movs	r0, #1
 8002bf4:	e7f9      	b.n	8002bea <dir_next+0x52>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8002bf6:	69eb      	ldr	r3, [r5, #28]
 8002bf8:	4283      	cmp	r3, r0
 8002bfa:	d812      	bhi.n	8002c22 <dir_next+0x8a>
					if (!stretch) {								/* If no stretch, report EOT */
 8002bfc:	f1b9 0f00 	cmp.w	r9, #0
 8002c00:	d0e3      	beq.n	8002bca <dir_next+0x32>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8002c02:	6961      	ldr	r1, [r4, #20]
 8002c04:	4620      	mov	r0, r4
 8002c06:	f7ff fef3 	bl	80029f0 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8002c0a:	4606      	mov	r6, r0
 8002c0c:	b1a8      	cbz	r0, 8002c3a <dir_next+0xa2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8002c0e:	2801      	cmp	r0, #1
 8002c10:	d0ea      	beq.n	8002be8 <dir_next+0x50>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002c12:	1c43      	adds	r3, r0, #1
 8002c14:	d0ed      	beq.n	8002bf2 <dir_next+0x5a>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8002c16:	4601      	mov	r1, r0
 8002c18:	4628      	mov	r0, r5
 8002c1a:	f7ff ff94 	bl	8002b46 <dir_clear>
 8002c1e:	2800      	cmp	r0, #0
 8002c20:	d1e7      	bne.n	8002bf2 <dir_next+0x5a>
				dp->clust = clst;		/* Initialize data for new cluster */
 8002c22:	6166      	str	r6, [r4, #20]
				dp->sect = clst2sect(fs, clst);
 8002c24:	4631      	mov	r1, r6
 8002c26:	4628      	mov	r0, r5
 8002c28:	f7ff fb7c 	bl	8002324 <clst2sect>
 8002c2c:	61a0      	str	r0, [r4, #24]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8002c2e:	3538      	adds	r5, #56	; 0x38
 8002c30:	4445      	add	r5, r8
	dp->dptr = ofs;						/* Current entry */
 8002c32:	6127      	str	r7, [r4, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8002c34:	61e5      	str	r5, [r4, #28]
	return FR_OK;
 8002c36:	2000      	movs	r0, #0
 8002c38:	e7d7      	b.n	8002bea <dir_next+0x52>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8002c3a:	2007      	movs	r0, #7
 8002c3c:	e7d5      	b.n	8002bea <dir_next+0x52>

08002c3e <dir_alloc>:
{
 8002c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c40:	460f      	mov	r7, r1
	res = dir_sdi(dp, 0);
 8002c42:	2100      	movs	r1, #0
{
 8002c44:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8002c46:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 8002c48:	f7ff fe90 	bl	800296c <dir_sdi>
	if (res == FR_OK) {
 8002c4c:	b9a8      	cbnz	r0, 8002c7a <dir_alloc+0x3c>
		n = 0;
 8002c4e:	4605      	mov	r5, r0
			res = move_window(fs, dp->sect);
 8002c50:	69a1      	ldr	r1, [r4, #24]
 8002c52:	4630      	mov	r0, r6
 8002c54:	f7ff fc0f 	bl	8002476 <move_window>
			if (res != FR_OK) break;
 8002c58:	b978      	cbnz	r0, 8002c7a <dir_alloc+0x3c>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8002c5a:	69e3      	ldr	r3, [r4, #28]
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2be5      	cmp	r3, #229	; 0xe5
 8002c60:	d000      	beq.n	8002c64 <dir_alloc+0x26>
 8002c62:	b91b      	cbnz	r3, 8002c6c <dir_alloc+0x2e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8002c64:	3501      	adds	r5, #1
 8002c66:	42bd      	cmp	r5, r7
 8002c68:	d101      	bne.n	8002c6e <dir_alloc+0x30>
}
 8002c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				n = 0;					/* Not a blank entry. Restart to search */
 8002c6c:	4605      	mov	r5, r0
			res = dir_next(dp, 1);
 8002c6e:	2101      	movs	r1, #1
 8002c70:	4620      	mov	r0, r4
 8002c72:	f7ff ff91 	bl	8002b98 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8002c76:	2800      	cmp	r0, #0
 8002c78:	d0ea      	beq.n	8002c50 <dir_alloc+0x12>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8002c7a:	2804      	cmp	r0, #4
 8002c7c:	bf08      	it	eq
 8002c7e:	2007      	moveq	r0, #7
 8002c80:	e7f3      	b.n	8002c6a <dir_alloc+0x2c>

08002c82 <dir_read>:
{
 8002c82:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BYTE ord = 0xFF, sum = 0xFF;
 8002c86:	25ff      	movs	r5, #255	; 0xff
{
 8002c88:	4682      	mov	sl, r0
 8002c8a:	460f      	mov	r7, r1
	BYTE ord = 0xFF, sum = 0xFF;
 8002c8c:	462c      	mov	r4, r5
	FRESULT res = FR_NO_FILE;
 8002c8e:	f04f 0b04 	mov.w	fp, #4
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8002c92:	f64f 79ff 	movw	r9, #65535	; 0xffff
	FATFS *fs = dp->obj.fs;
 8002c96:	6806      	ldr	r6, [r0, #0]
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8002c98:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8002da8 <dir_read+0x126>
	while (dp->sect) {
 8002c9c:	f8da 1018 	ldr.w	r1, [sl, #24]
 8002ca0:	b919      	cbnz	r1, 8002caa <dir_read+0x28>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8002ca2:	f1bb 0f00 	cmp.w	fp, #0
 8002ca6:	d072      	beq.n	8002d8e <dir_read+0x10c>
 8002ca8:	e061      	b.n	8002d6e <dir_read+0xec>
		res = move_window(fs, dp->sect);
 8002caa:	4630      	mov	r0, r6
 8002cac:	f7ff fbe3 	bl	8002476 <move_window>
		if (res != FR_OK) break;
 8002cb0:	4683      	mov	fp, r0
 8002cb2:	2800      	cmp	r0, #0
 8002cb4:	d15b      	bne.n	8002d6e <dir_read+0xec>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8002cb6:	f8da 001c 	ldr.w	r0, [sl, #28]
 8002cba:	7802      	ldrb	r2, [r0, #0]
		if (c == 0) {
 8002cbc:	2a00      	cmp	r2, #0
 8002cbe:	d070      	beq.n	8002da2 <dir_read+0x120>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8002cc0:	7ac3      	ldrb	r3, [r0, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8002cc2:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8002cc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cc8:	f88a 3006 	strb.w	r3, [sl, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8002ccc:	d055      	beq.n	8002d7a <dir_read+0xf8>
 8002cce:	2a2e      	cmp	r2, #46	; 0x2e
 8002cd0:	d053      	beq.n	8002d7a <dir_read+0xf8>
 8002cd2:	f023 0120 	bic.w	r1, r3, #32
 8002cd6:	f1a1 0c08 	sub.w	ip, r1, #8
 8002cda:	f1dc 0100 	rsbs	r1, ip, #0
 8002cde:	eb41 010c 	adc.w	r1, r1, ip
 8002ce2:	42b9      	cmp	r1, r7
 8002ce4:	d149      	bne.n	8002d7a <dir_read+0xf8>
				if (a == AM_LFN) {			/* An LFN entry is found */
 8002ce6:	2b0f      	cmp	r3, #15
 8002ce8:	d14c      	bne.n	8002d84 <dir_read+0x102>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8002cea:	0651      	lsls	r1, r2, #25
 8002cec:	d543      	bpl.n	8002d76 <dir_read+0xf4>
						dp->blk_ofs = dp->dptr;
 8002cee:	f8da 3010 	ldr.w	r3, [sl, #16]
						sum = dp->dir[LDIR_Chksum];
 8002cf2:	7b45      	ldrb	r5, [r0, #13]
						c &= (BYTE)~LLEF; ord = c;
 8002cf4:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 8002cf8:	f8ca 302c 	str.w	r3, [sl, #44]	; 0x2c
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8002cfc:	7b43      	ldrb	r3, [r0, #13]
 8002cfe:	42ab      	cmp	r3, r5
 8002d00:	d13b      	bne.n	8002d7a <dir_read+0xf8>
	rv = rv << 8 | ptr[0];
 8002d02:	7ec1      	ldrb	r1, [r0, #27]
 8002d04:	7e83      	ldrb	r3, [r0, #26]
 8002d06:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8002d0a:	b21b      	sxth	r3, r3
 8002d0c:	bbab      	cbnz	r3, 8002d7a <dir_read+0xf8>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8002d0e:	240d      	movs	r4, #13
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8002d10:	f04f 0e01 	mov.w	lr, #1
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8002d14:	7801      	ldrb	r1, [r0, #0]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8002d16:	f8d6 c00c 	ldr.w	ip, [r6, #12]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8002d1a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8002d1e:	3901      	subs	r1, #1
 8002d20:	4361      	muls	r1, r4
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8002d22:	f813 4008 	ldrb.w	r4, [r3, r8]
 8002d26:	eb00 0b04 	add.w	fp, r0, r4
	rv = rv << 8 | ptr[0];
 8002d2a:	f89b b001 	ldrb.w	fp, [fp, #1]
 8002d2e:	5d04      	ldrb	r4, [r0, r4]
 8002d30:	ea44 240b 	orr.w	r4, r4, fp, lsl #8
		if (wc != 0) {
 8002d34:	f1be 0f00 	cmp.w	lr, #0
 8002d38:	d021      	beq.n	8002d7e <dir_read+0xfc>
			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
 8002d3a:	297f      	cmp	r1, #127	; 0x7f
 8002d3c:	d81d      	bhi.n	8002d7a <dir_read+0xf8>
	rv = rv << 8 | ptr[0];
 8002d3e:	46a6      	mov	lr, r4
			lfnbuf[i++] = wc = uc;			/* Store it */
 8002d40:	f82c 4011 	strh.w	r4, [ip, r1, lsl #1]
 8002d44:	3101      	adds	r1, #1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8002d46:	3301      	adds	r3, #1
 8002d48:	2b0d      	cmp	r3, #13
 8002d4a:	d1ea      	bne.n	8002d22 <dir_read+0xa0>
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8002d4c:	7803      	ldrb	r3, [r0, #0]
 8002d4e:	065b      	lsls	r3, r3, #25
 8002d50:	d504      	bpl.n	8002d5c <dir_read+0xda>
		if (i >= FF_MAX_LFN) return 0;		/* Buffer overflow? */
 8002d52:	297f      	cmp	r1, #127	; 0x7f
 8002d54:	d811      	bhi.n	8002d7a <dir_read+0xf8>
		lfnbuf[i] = 0;
 8002d56:	2300      	movs	r3, #0
 8002d58:	f82c 3011 	strh.w	r3, [ip, r1, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8002d5c:	1e54      	subs	r4, r2, #1
 8002d5e:	b2e4      	uxtb	r4, r4
		res = dir_next(dp, 0);		/* Next entry */
 8002d60:	2100      	movs	r1, #0
 8002d62:	4650      	mov	r0, sl
 8002d64:	f7ff ff18 	bl	8002b98 <dir_next>
		if (res != FR_OK) break;
 8002d68:	4683      	mov	fp, r0
 8002d6a:	2800      	cmp	r0, #0
 8002d6c:	d096      	beq.n	8002c9c <dir_read+0x1a>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f8ca 3018 	str.w	r3, [sl, #24]
 8002d74:	e00d      	b.n	8002d92 <dir_read+0x110>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8002d76:	4294      	cmp	r4, r2
 8002d78:	d0c0      	beq.n	8002cfc <dir_read+0x7a>
 8002d7a:	24ff      	movs	r4, #255	; 0xff
 8002d7c:	e7f0      	b.n	8002d60 <dir_read+0xde>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8002d7e:	454c      	cmp	r4, r9
 8002d80:	d0e1      	beq.n	8002d46 <dir_read+0xc4>
 8002d82:	e7fa      	b.n	8002d7a <dir_read+0xf8>
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8002d84:	b944      	cbnz	r4, 8002d98 <dir_read+0x116>
 8002d86:	f7ff fad8 	bl	800233a <sum_sfn>
 8002d8a:	42a8      	cmp	r0, r5
 8002d8c:	d104      	bne.n	8002d98 <dir_read+0x116>
		res = move_window(fs, dp->sect);
 8002d8e:	f04f 0b00 	mov.w	fp, #0
}
 8002d92:	4658      	mov	r0, fp
 8002d94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8002d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d9c:	f8ca 302c 	str.w	r3, [sl, #44]	; 0x2c
 8002da0:	e7f7      	b.n	8002d92 <dir_read+0x110>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8002da2:	f04f 0b04 	mov.w	fp, #4
 8002da6:	e7e2      	b.n	8002d6e <dir_read+0xec>
 8002da8:	080059f6 	.word	0x080059f6

08002dac <dir_remove>:
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8002dac:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
{
 8002dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8002db2:	1c4b      	adds	r3, r1, #1
{
 8002db4:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8002db6:	6805      	ldr	r5, [r0, #0]
	DWORD last = dp->dptr;
 8002db8:	6906      	ldr	r6, [r0, #16]
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8002dba:	d118      	bne.n	8002dee <dir_remove+0x42>
				dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'. */
 8002dbc:	27e5      	movs	r7, #229	; 0xe5
			fs->wflag = 1;
 8002dbe:	f04f 0801 	mov.w	r8, #1
			res = move_window(fs, dp->sect);
 8002dc2:	69a1      	ldr	r1, [r4, #24]
 8002dc4:	4628      	mov	r0, r5
 8002dc6:	f7ff fb56 	bl	8002476 <move_window>
			if (res != FR_OK) break;
 8002dca:	b960      	cbnz	r0, 8002de6 <dir_remove+0x3a>
				dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'. */
 8002dcc:	69e3      	ldr	r3, [r4, #28]
 8002dce:	701f      	strb	r7, [r3, #0]
			fs->wflag = 1;
 8002dd0:	f885 8003 	strb.w	r8, [r5, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8002dd4:	6923      	ldr	r3, [r4, #16]
 8002dd6:	42b3      	cmp	r3, r6
 8002dd8:	d20d      	bcs.n	8002df6 <dir_remove+0x4a>
			res = dir_next(dp, 0);	/* Next entry */
 8002dda:	4601      	mov	r1, r0
 8002ddc:	4620      	mov	r0, r4
 8002dde:	f7ff fedb 	bl	8002b98 <dir_next>
		} while (res == FR_OK);
 8002de2:	2800      	cmp	r0, #0
 8002de4:	d0ed      	beq.n	8002dc2 <dir_remove+0x16>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8002de6:	2804      	cmp	r0, #4
 8002de8:	bf08      	it	eq
 8002dea:	2002      	moveq	r0, #2
 8002dec:	e003      	b.n	8002df6 <dir_remove+0x4a>
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8002dee:	f7ff fdbd 	bl	800296c <dir_sdi>
	if (res == FR_OK) {
 8002df2:	2800      	cmp	r0, #0
 8002df4:	d0e2      	beq.n	8002dbc <dir_remove+0x10>
}
 8002df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002dfa <dir_find>:
{
 8002dfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8002dfe:	2100      	movs	r1, #0
{
 8002e00:	b085      	sub	sp, #20
 8002e02:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8002e04:	f8d0 a000 	ldr.w	sl, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8002e08:	f7ff fdb0 	bl	800296c <dir_sdi>
	if (res != FR_OK) return res;
 8002e0c:	4680      	mov	r8, r0
 8002e0e:	2800      	cmp	r0, #0
 8002e10:	f040 8093 	bne.w	8002f3a <dir_find+0x140>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8002e14:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8002e18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e1c:	464e      	mov	r6, r9
 8002e1e:	62e3      	str	r3, [r4, #44]	; 0x2c
		res = move_window(fs, dp->sect);
 8002e20:	69a1      	ldr	r1, [r4, #24]
 8002e22:	4650      	mov	r0, sl
 8002e24:	f7ff fb27 	bl	8002476 <move_window>
		if (res != FR_OK) break;
 8002e28:	4680      	mov	r8, r0
 8002e2a:	2800      	cmp	r0, #0
 8002e2c:	f040 8085 	bne.w	8002f3a <dir_find+0x140>
		c = dp->dir[DIR_Name];
 8002e30:	69e5      	ldr	r5, [r4, #28]
 8002e32:	782f      	ldrb	r7, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002e34:	2f00      	cmp	r7, #0
 8002e36:	f000 8084 	beq.w	8002f42 <dir_find+0x148>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8002e3a:	7aea      	ldrb	r2, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8002e3c:	2fe5      	cmp	r7, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8002e3e:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8002e42:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8002e44:	d003      	beq.n	8002e4e <dir_find+0x54>
 8002e46:	0712      	lsls	r2, r2, #28
 8002e48:	d505      	bpl.n	8002e56 <dir_find+0x5c>
 8002e4a:	2b0f      	cmp	r3, #15
 8002e4c:	d005      	beq.n	8002e5a <dir_find+0x60>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8002e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e52:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002e54:	e058      	b.n	8002f08 <dir_find+0x10e>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8002e56:	2b0f      	cmp	r3, #15
 8002e58:	d15d      	bne.n	8002f16 <dir_find+0x11c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8002e5a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8002e5e:	0658      	lsls	r0, r3, #25
 8002e60:	d448      	bmi.n	8002ef4 <dir_find+0xfa>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8002e62:	0679      	lsls	r1, r7, #25
 8002e64:	d54e      	bpl.n	8002f04 <dir_find+0x10a>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8002e66:	6923      	ldr	r3, [r4, #16]
						sum = dp->dir[LDIR_Chksum];
 8002e68:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8002e6c:	f007 07bf 	and.w	r7, r7, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8002e70:	62e3      	str	r3, [r4, #44]	; 0x2c
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8002e72:	7b6b      	ldrb	r3, [r5, #13]
 8002e74:	454b      	cmp	r3, r9
 8002e76:	d147      	bne.n	8002f08 <dir_find+0x10e>
	rv = rv << 8 | ptr[0];
 8002e78:	7eeb      	ldrb	r3, [r5, #27]
 8002e7a:	7eae      	ldrb	r6, [r5, #26]
 8002e7c:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8002e80:	b236      	sxth	r6, r6
 8002e82:	2e00      	cmp	r6, #0
 8002e84:	d140      	bne.n	8002f08 <dir_find+0x10e>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8002e86:	f895 8000 	ldrb.w	r8, [r5]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8002e8a:	2101      	movs	r1, #1
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8002e8c:	f008 083f 	and.w	r8, r8, #63	; 0x3f
 8002e90:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8002e94:	f04f 080d 	mov.w	r8, #13
 8002e98:	fb08 f803 	mul.w	r8, r8, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8002e9c:	f8da b00c 	ldr.w	fp, [sl, #12]
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8002ea0:	4b29      	ldr	r3, [pc, #164]	; (8002f48 <dir_find+0x14e>)
 8002ea2:	5cf2      	ldrb	r2, [r6, r3]
 8002ea4:	18ab      	adds	r3, r5, r2
	rv = rv << 8 | ptr[0];
 8002ea6:	7858      	ldrb	r0, [r3, #1]
 8002ea8:	5cab      	ldrb	r3, [r5, r2]
 8002eaa:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
		if (wc != 0) {
 8002eae:	b369      	cbz	r1, 8002f0c <dir_find+0x112>
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8002eb0:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 8002eb4:	d828      	bhi.n	8002f08 <dir_find+0x10e>
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	9303      	str	r3, [sp, #12]
 8002eba:	f001 fe97 	bl	8004bec <ff_wtoupper>
 8002ebe:	f108 0201 	add.w	r2, r8, #1
 8002ec2:	9002      	str	r0, [sp, #8]
 8002ec4:	f83b 0018 	ldrh.w	r0, [fp, r8, lsl #1]
 8002ec8:	9201      	str	r2, [sp, #4]
 8002eca:	f001 fe8f 	bl	8004bec <ff_wtoupper>
 8002ece:	9902      	ldr	r1, [sp, #8]
 8002ed0:	4281      	cmp	r1, r0
 8002ed2:	d119      	bne.n	8002f08 <dir_find+0x10e>
	rv = rv << 8 | ptr[0];
 8002ed4:	9b03      	ldr	r3, [sp, #12]
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8002ed6:	9a01      	ldr	r2, [sp, #4]
	rv = rv << 8 | ptr[0];
 8002ed8:	4619      	mov	r1, r3
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8002eda:	4690      	mov	r8, r2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8002edc:	3601      	adds	r6, #1
 8002ede:	2e0d      	cmp	r6, #13
 8002ee0:	d1de      	bne.n	8002ea0 <dir_find+0xa6>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8002ee2:	782b      	ldrb	r3, [r5, #0]
 8002ee4:	065a      	lsls	r2, r3, #25
 8002ee6:	d503      	bpl.n	8002ef0 <dir_find+0xf6>
 8002ee8:	b111      	cbz	r1, 8002ef0 <dir_find+0xf6>
 8002eea:	f83b 3018 	ldrh.w	r3, [fp, r8, lsl #1]
 8002eee:	b95b      	cbnz	r3, 8002f08 <dir_find+0x10e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8002ef0:	3f01      	subs	r7, #1
 8002ef2:	b2fe      	uxtb	r6, r7
		res = dir_next(dp, 0);	/* Next entry */
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	f7ff fe4e 	bl	8002b98 <dir_next>
	} while (res == FR_OK);
 8002efc:	4680      	mov	r8, r0
 8002efe:	2800      	cmp	r0, #0
 8002f00:	d08e      	beq.n	8002e20 <dir_find+0x26>
 8002f02:	e01a      	b.n	8002f3a <dir_find+0x140>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8002f04:	42be      	cmp	r6, r7
 8002f06:	d0b4      	beq.n	8002e72 <dir_find+0x78>
 8002f08:	26ff      	movs	r6, #255	; 0xff
 8002f0a:	e7f3      	b.n	8002ef4 <dir_find+0xfa>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8002f0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d0e3      	beq.n	8002edc <dir_find+0xe2>
 8002f14:	e7f8      	b.n	8002f08 <dir_find+0x10e>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8002f16:	b926      	cbnz	r6, 8002f22 <dir_find+0x128>
 8002f18:	4628      	mov	r0, r5
 8002f1a:	f7ff fa0e 	bl	800233a <sum_sfn>
 8002f1e:	4548      	cmp	r0, r9
 8002f20:	d00b      	beq.n	8002f3a <dir_find+0x140>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8002f22:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8002f26:	07db      	lsls	r3, r3, #31
 8002f28:	d491      	bmi.n	8002e4e <dir_find+0x54>
 8002f2a:	220b      	movs	r2, #11
 8002f2c:	f104 0120 	add.w	r1, r4, #32
 8002f30:	4628      	mov	r0, r5
 8002f32:	f7ff f9e9 	bl	8002308 <mem_cmp>
 8002f36:	2800      	cmp	r0, #0
 8002f38:	d189      	bne.n	8002e4e <dir_find+0x54>
}
 8002f3a:	4640      	mov	r0, r8
 8002f3c:	b005      	add	sp, #20
 8002f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002f42:	f04f 0804 	mov.w	r8, #4
 8002f46:	e7f8      	b.n	8002f3a <dir_find+0x140>
 8002f48:	080059f6 	.word	0x080059f6

08002f4c <dir_register>:
{
 8002f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8002f50:	f890 402b 	ldrb.w	r4, [r0, #43]	; 0x2b
{
 8002f54:	b089      	sub	sp, #36	; 0x24
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8002f56:	f014 04a0 	ands.w	r4, r4, #160	; 0xa0
{
 8002f5a:	4605      	mov	r5, r0
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8002f5c:	d176      	bne.n	800304c <dir_register+0x100>
	FATFS *fs = dp->obj.fs;
 8002f5e:	6807      	ldr	r7, [r0, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d15b      	bne.n	8003022 <dir_register+0xd6>
	mem_cpy(sn, dp->fn, 12);
 8002f6a:	f105 0620 	add.w	r6, r5, #32
 8002f6e:	220c      	movs	r2, #12
 8002f70:	4631      	mov	r1, r6
 8002f72:	a805      	add	r0, sp, #20
 8002f74:	f7ff fa3a 	bl	80023ec <mem_cpy.part.0>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8002f78:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8002f7c:	07db      	lsls	r3, r3, #31
 8002f7e:	d56e      	bpl.n	800305e <dir_register+0x112>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8002f80:	2340      	movs	r3, #64	; 0x40
		for (n = 1; n < 100; n++) {
 8002f82:	f04f 0901 	mov.w	r9, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8002f86:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8003170 <dir_register+0x224>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8002f8a:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
 8002f8e:	220b      	movs	r2, #11
 8002f90:	a905      	add	r1, sp, #20
 8002f92:	4630      	mov	r0, r6
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8002f94:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8002f98:	f7ff fa28 	bl	80023ec <mem_cpy.part.0>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8002f9c:	f1b9 0f05 	cmp.w	r9, #5
 8002fa0:	d950      	bls.n	8003044 <dir_register+0xf8>
 8002fa2:	464b      	mov	r3, r9
 8002fa4:	f1aa 0102 	sub.w	r1, sl, #2
		while (*lfn) {	/* Create a CRC as hash value */
 8002fa8:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 8002fac:	2a00      	cmp	r2, #0
 8002fae:	d13a      	bne.n	8003026 <dir_register+0xda>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8002fb0:	2207      	movs	r2, #7
		c = (BYTE)((seq % 16) + '0');
 8002fb2:	f003 000f 	and.w	r0, r3, #15
 8002fb6:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
 8002fba:	2939      	cmp	r1, #57	; 0x39
 8002fbc:	bf88      	it	hi
 8002fbe:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
 8002fc2:	3a01      	subs	r2, #1
 8002fc4:	a803      	add	r0, sp, #12
 8002fc6:	4410      	add	r0, r2
	} while (seq);
 8002fc8:	091b      	lsrs	r3, r3, #4
		ns[i--] = c;
 8002fca:	7041      	strb	r1, [r0, #1]
	} while (seq);
 8002fcc:	d1f1      	bne.n	8002fb2 <dir_register+0x66>
	ns[i] = '~';
 8002fce:	207e      	movs	r0, #126	; 0x7e
 8002fd0:	a908      	add	r1, sp, #32
 8002fd2:	4411      	add	r1, r2
 8002fd4:	f801 0c14 	strb.w	r0, [r1, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d003      	beq.n	8002fe4 <dir_register+0x98>
 8002fdc:	5cf1      	ldrb	r1, [r6, r3]
 8002fde:	1c58      	adds	r0, r3, #1
 8002fe0:	2920      	cmp	r1, #32
 8002fe2:	d131      	bne.n	8003048 <dir_register+0xfc>
 8002fe4:	4433      	add	r3, r6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8002fe6:	2a07      	cmp	r2, #7
 8002fe8:	bf8f      	iteee	hi
 8002fea:	2120      	movhi	r1, #32
 8002fec:	a908      	addls	r1, sp, #32
 8002fee:	1889      	addls	r1, r1, r2
 8002ff0:	f811 1c14 	ldrbls.w	r1, [r1, #-20]
 8002ff4:	bf98      	it	ls
 8002ff6:	3201      	addls	r2, #1
 8002ff8:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
 8002ffc:	1b99      	subs	r1, r3, r6
 8002ffe:	2907      	cmp	r1, #7
 8003000:	d9f1      	bls.n	8002fe6 <dir_register+0x9a>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8003002:	4628      	mov	r0, r5
 8003004:	f7ff fef9 	bl	8002dfa <dir_find>
			if (res != FR_OK) break;
 8003008:	4682      	mov	sl, r0
 800300a:	bb10      	cbnz	r0, 8003052 <dir_register+0x106>
		for (n = 1; n < 100; n++) {
 800300c:	f109 0901 	add.w	r9, r9, #1
 8003010:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8003014:	d1bb      	bne.n	8002f8e <dir_register+0x42>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8003016:	f04f 0a07 	mov.w	sl, #7
}
 800301a:	4650      	mov	r0, sl
 800301c:	b009      	add	sp, #36	; 0x24
 800301e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8003022:	3401      	adds	r4, #1
 8003024:	e79d      	b.n	8002f62 <dir_register+0x16>
		while (*lfn) {	/* Create a CRC as hash value */
 8003026:	2010      	movs	r0, #16
				sr = (sr << 1) + (wc & 1);
 8003028:	f002 0c01 	and.w	ip, r2, #1
 800302c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8003030:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003034:	bf18      	it	ne
 8003036:	ea83 0308 	eorne.w	r3, r3, r8
			for (i = 0; i < 16; i++) {
 800303a:	3801      	subs	r0, #1
				wc >>= 1;
 800303c:	ea4f 0252 	mov.w	r2, r2, lsr #1
			for (i = 0; i < 16; i++) {
 8003040:	d1f2      	bne.n	8003028 <dir_register+0xdc>
 8003042:	e7b1      	b.n	8002fa8 <dir_register+0x5c>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8003044:	464b      	mov	r3, r9
 8003046:	e7b3      	b.n	8002fb0 <dir_register+0x64>
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8003048:	4603      	mov	r3, r0
 800304a:	e7c5      	b.n	8002fd8 <dir_register+0x8c>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800304c:	f04f 0a06 	mov.w	sl, #6
 8003050:	e7e3      	b.n	800301a <dir_register+0xce>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8003052:	2804      	cmp	r0, #4
 8003054:	d1e1      	bne.n	800301a <dir_register+0xce>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8003056:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800305a:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800305e:	f89d 301f 	ldrb.w	r3, [sp, #31]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8003062:	4628      	mov	r0, r5
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8003064:	079b      	lsls	r3, r3, #30
 8003066:	bf43      	ittte	mi
 8003068:	230d      	movmi	r3, #13
 800306a:	340c      	addmi	r4, #12
 800306c:	fbb4 f4f3 	udivmi	r4, r4, r3
 8003070:	2401      	movpl	r4, #1
 8003072:	bf48      	it	mi
 8003074:	3401      	addmi	r4, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8003076:	4621      	mov	r1, r4
 8003078:	f7ff fde1 	bl	8002c3e <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800307c:	4682      	mov	sl, r0
 800307e:	2800      	cmp	r0, #0
 8003080:	d1cb      	bne.n	800301a <dir_register+0xce>
 8003082:	3c01      	subs	r4, #1
 8003084:	d056      	beq.n	8003134 <dir_register+0x1e8>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8003086:	6929      	ldr	r1, [r5, #16]
 8003088:	4628      	mov	r0, r5
 800308a:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 800308e:	f7ff fc6d 	bl	800296c <dir_sdi>
		if (res == FR_OK) {
 8003092:	4682      	mov	sl, r0
 8003094:	2800      	cmp	r0, #0
 8003096:	d1c0      	bne.n	800301a <dir_register+0xce>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8003098:	4630      	mov	r0, r6
 800309a:	f7ff f94e 	bl	800233a <sum_sfn>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800309e:	f64f 79ff 	movw	r9, #65535	; 0xffff
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80030a2:	4680      	mov	r8, r0
				res = move_window(fs, dp->sect);
 80030a4:	69a9      	ldr	r1, [r5, #24]
 80030a6:	4638      	mov	r0, r7
 80030a8:	f7ff f9e5 	bl	8002476 <move_window>
 80030ac:	4682      	mov	sl, r0
				if (res != FR_OK) break;
 80030ae:	2800      	cmp	r0, #0
 80030b0:	d1b3      	bne.n	800301a <dir_register+0xce>
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80030b2:	220f      	movs	r2, #15
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80030b4:	f04f 0c0d 	mov.w	ip, #13
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80030b8:	69eb      	ldr	r3, [r5, #28]
 80030ba:	b2e1      	uxtb	r1, r4
 80030bc:	f8d7 e00c 	ldr.w	lr, [r7, #12]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80030c0:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80030c2:	1e4a      	subs	r2, r1, #1
 80030c4:	fb0c f202 	mul.w	r2, ip, r2
	s = wc = 0;
 80030c8:	4684      	mov	ip, r0
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80030ca:	f883 800d 	strb.w	r8, [r3, #13]
	dir[LDIR_Type] = 0;
 80030ce:	7318      	strb	r0, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 80030d0:	7698      	strb	r0, [r3, #26]
	*ptr++ = (BYTE)val;
 80030d2:	76d8      	strb	r0, [r3, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80030d4:	9201      	str	r2, [sp, #4]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80030d6:	4548      	cmp	r0, r9
 80030d8:	bf1f      	itttt	ne
 80030da:	9a01      	ldrne	r2, [sp, #4]
 80030dc:	f83e 0012 	ldrhne.w	r0, [lr, r2, lsl #1]
 80030e0:	3201      	addne	r2, #1
 80030e2:	9201      	strne	r2, [sp, #4]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80030e4:	4a21      	ldr	r2, [pc, #132]	; (800316c <dir_register+0x220>)
 80030e6:	f81c a002 	ldrb.w	sl, [ip, r2]
	} while (++s < 13);
 80030ea:	f10c 0c01 	add.w	ip, ip, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80030ee:	f803 000a 	strb.w	r0, [r3, sl]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80030f2:	eb03 0b0a 	add.w	fp, r3, sl
	*ptr++ = (BYTE)val; val >>= 8;
 80030f6:	ea4f 2a10 	mov.w	sl, r0, lsr #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80030fa:	2800      	cmp	r0, #0
 80030fc:	bf08      	it	eq
 80030fe:	4648      	moveq	r0, r9
	} while (++s < 13);
 8003100:	f1bc 0f0d 	cmp.w	ip, #13
	*ptr++ = (BYTE)val;
 8003104:	f88b a001 	strb.w	sl, [fp, #1]
	} while (++s < 13);
 8003108:	d1e5      	bne.n	80030d6 <dir_register+0x18a>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800310a:	4548      	cmp	r0, r9
 800310c:	d003      	beq.n	8003116 <dir_register+0x1ca>
 800310e:	9a01      	ldr	r2, [sp, #4]
 8003110:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8003114:	b90a      	cbnz	r2, 800311a <dir_register+0x1ce>
 8003116:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800311a:	7019      	strb	r1, [r3, #0]
				fs->wflag = 1;
 800311c:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 800311e:	2100      	movs	r1, #0
				fs->wflag = 1;
 8003120:	70fb      	strb	r3, [r7, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8003122:	4628      	mov	r0, r5
 8003124:	f7ff fd38 	bl	8002b98 <dir_next>
			} while (res == FR_OK && --nent);
 8003128:	4682      	mov	sl, r0
 800312a:	2800      	cmp	r0, #0
 800312c:	f47f af75 	bne.w	800301a <dir_register+0xce>
 8003130:	3c01      	subs	r4, #1
 8003132:	d1b7      	bne.n	80030a4 <dir_register+0x158>
		res = move_window(fs, dp->sect);
 8003134:	69a9      	ldr	r1, [r5, #24]
 8003136:	4638      	mov	r0, r7
 8003138:	f7ff f99d 	bl	8002476 <move_window>
		if (res == FR_OK) {
 800313c:	4682      	mov	sl, r0
 800313e:	2800      	cmp	r0, #0
 8003140:	f47f af6b 	bne.w	800301a <dir_register+0xce>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8003144:	4601      	mov	r1, r0
 8003146:	2220      	movs	r2, #32
 8003148:	69e8      	ldr	r0, [r5, #28]
 800314a:	f7ff f8d7 	bl	80022fc <mem_set>
 800314e:	220b      	movs	r2, #11
 8003150:	4631      	mov	r1, r6
 8003152:	69e8      	ldr	r0, [r5, #28]
 8003154:	f7ff f94a 	bl	80023ec <mem_cpy.part.0>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8003158:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800315c:	69ea      	ldr	r2, [r5, #28]
 800315e:	f003 0318 	and.w	r3, r3, #24
 8003162:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 8003164:	2301      	movs	r3, #1
 8003166:	70fb      	strb	r3, [r7, #3]
 8003168:	e757      	b.n	800301a <dir_register+0xce>
 800316a:	bf00      	nop
 800316c:	080059f6 	.word	0x080059f6
 8003170:	00011021 	.word	0x00011021

08003174 <get_fileinfo>:
{
 8003174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	fno->fname[0] = 0;			/* Invaidate file info */
 8003178:	2600      	movs	r6, #0
	FATFS *fs = dp->obj.fs;
 800317a:	f8d0 9000 	ldr.w	r9, [r0]
	fno->fname[0] = 0;			/* Invaidate file info */
 800317e:	758e      	strb	r6, [r1, #22]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8003180:	6983      	ldr	r3, [r0, #24]
{
 8003182:	4607      	mov	r7, r0
 8003184:	460c      	mov	r4, r1
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 8094 	beq.w	80032b4 <get_fileinfo+0x140>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800318c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800318e:	3301      	adds	r3, #1
 8003190:	d16e      	bne.n	8003270 <get_fileinfo+0xfc>
		wc = dp->dir[si++];			/* Get a char */
 8003192:	2200      	movs	r2, #0
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
 8003194:	262e      	movs	r6, #46	; 0x2e
		wc = dp->dir[si++];			/* Get a char */
 8003196:	4611      	mov	r1, r2
 8003198:	69f8      	ldr	r0, [r7, #28]
 800319a:	1e45      	subs	r5, r0, #1
 800319c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80031a0:	3101      	adds	r1, #1
		if (wc == ' ') continue;	/* Skip padding spaces */
 80031a2:	2b20      	cmp	r3, #32
 80031a4:	d010      	beq.n	80031c8 <get_fileinfo+0x54>
		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
 80031a6:	2b05      	cmp	r3, #5
 80031a8:	bf08      	it	eq
 80031aa:	23e5      	moveq	r3, #229	; 0xe5
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
 80031ac:	2909      	cmp	r1, #9
 80031ae:	d106      	bne.n	80031be <get_fileinfo+0x4a>
 80031b0:	2a0b      	cmp	r2, #11
 80031b2:	bf9e      	ittt	ls
 80031b4:	eb04 0c02 	addls.w	ip, r4, r2
 80031b8:	f88c 6009 	strbls.w	r6, [ip, #9]
 80031bc:	3201      	addls	r2, #1
		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
 80031be:	eb04 0c02 	add.w	ip, r4, r2
 80031c2:	f88c 3009 	strb.w	r3, [ip, #9]
 80031c6:	3201      	adds	r2, #1
	while (si < 11) {		/* Get SFN from SFN entry */
 80031c8:	290b      	cmp	r1, #11
 80031ca:	d1e7      	bne.n	800319c <get_fileinfo+0x28>
	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
 80031cc:	2100      	movs	r1, #0
 80031ce:	18a3      	adds	r3, r4, r2
 80031d0:	7259      	strb	r1, [r3, #9]
	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
 80031d2:	7da3      	ldrb	r3, [r4, #22]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d15b      	bne.n	8003290 <get_fileinfo+0x11c>
		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccesible */
 80031d8:	2a00      	cmp	r2, #0
 80031da:	d050      	beq.n	800327e <get_fileinfo+0x10a>
 80031dc:	f104 0109 	add.w	r1, r4, #9
			for (si = di = 0; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 80031e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80031e4:	2a00      	cmp	r2, #0
 80031e6:	d04d      	beq.n	8003284 <get_fileinfo+0x110>
				wc = (WCHAR)fno->altname[si];
 80031e8:	b292      	uxth	r2, r2
				if (IsUpper(wc) && (dp->dir[DIR_NTres] & ((si >= 9) ? NS_EXT : NS_BODY))) wc += 0x20;
 80031ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80031ee:	2d19      	cmp	r5, #25
 80031f0:	d807      	bhi.n	8003202 <get_fileinfo+0x8e>
 80031f2:	2b09      	cmp	r3, #9
 80031f4:	bf34      	ite	cc
 80031f6:	2508      	movcc	r5, #8
 80031f8:	2510      	movcs	r5, #16
 80031fa:	7b06      	ldrb	r6, [r0, #12]
 80031fc:	422e      	tst	r6, r5
 80031fe:	bf18      	it	ne
 8003200:	3220      	addne	r2, #32
				fno->fname[di] = (TCHAR)wc;
 8003202:	730a      	strb	r2, [r1, #12]
			for (si = di = 0; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 8003204:	3301      	adds	r3, #1
 8003206:	e7eb      	b.n	80031e0 <get_fileinfo+0x6c>
				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 8003208:	f1b8 0f00 	cmp.w	r8, #0
 800320c:	d105      	bne.n	800321a <get_fileinfo+0xa6>
 800320e:	f500 5320 	add.w	r3, r0, #10240	; 0x2800
 8003212:	b29b      	uxth	r3, r3
 8003214:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003218:	d313      	bcc.n	8003242 <get_fileinfo+0xce>
	wc = ff_uni2oem(chr, CODEPAGE);
 800321a:	f240 11b5 	movw	r1, #437	; 0x1b5
 800321e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8003222:	f001 fcaf 	bl	8004b84 <ff_uni2oem>
	if (wc >= 0x100) {	/* Is this a DBC? */
 8003226:	28ff      	cmp	r0, #255	; 0xff
				wc = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in UTF-16 or UTF-8 encoding */
 8003228:	f1c5 0a80 	rsb	sl, r5, #128	; 0x80
	if (wc >= 0x100) {	/* Is this a DBC? */
 800322c:	d918      	bls.n	8003260 <get_fileinfo+0xec>
		if (szb < 2) return 0;
 800322e:	f1ba 0f01 	cmp.w	sl, #1
 8003232:	d920      	bls.n	8003276 <get_fileinfo+0x102>
		*buf++ = (char)(wc >> 8);	/* Store DBC 1st byte */
 8003234:	1963      	adds	r3, r4, r5
 8003236:	0a02      	lsrs	r2, r0, #8
 8003238:	759a      	strb	r2, [r3, #22]
		*buf++ = (TCHAR)wc;			/* Store DBC 2nd byte */
 800323a:	75d8      	strb	r0, [r3, #23]
		return 2;
 800323c:	2302      	movs	r3, #2
				hs = 0;
 800323e:	2000      	movs	r0, #0
				di += wc;
 8003240:	441d      	add	r5, r3
				hs = 0;
 8003242:	4680      	mov	r8, r0
 8003244:	3602      	adds	r6, #2
			while (fs->lfnbuf[si] != 0) {
 8003246:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800324a:	5b98      	ldrh	r0, [r3, r6]
 800324c:	2800      	cmp	r0, #0
 800324e:	d1db      	bne.n	8003208 <get_fileinfo+0x94>
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
 8003250:	f1b8 0f00 	cmp.w	r8, #0
 8003254:	bf18      	it	ne
 8003256:	2500      	movne	r5, #0
			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
 8003258:	2300      	movs	r3, #0
 800325a:	4425      	add	r5, r4
 800325c:	75ab      	strb	r3, [r5, #22]
 800325e:	e798      	b.n	8003192 <get_fileinfo+0x1e>
	if (wc == 0 || szb < 1) return 0;	/* Invalid char or buffer overflow? */
 8003260:	b148      	cbz	r0, 8003276 <get_fileinfo+0x102>
 8003262:	f1ba 0f00 	cmp.w	sl, #0
 8003266:	d008      	beq.n	800327a <get_fileinfo+0x106>
	*buf++ = (TCHAR)wc;					/* Store the character */
 8003268:	1963      	adds	r3, r4, r5
 800326a:	7598      	strb	r0, [r3, #22]
	return 1;
 800326c:	2301      	movs	r3, #1
 800326e:	e7e6      	b.n	800323e <get_fileinfo+0xca>
			si = di = hs = 0;
 8003270:	46b0      	mov	r8, r6
 8003272:	4635      	mov	r5, r6
 8003274:	e7e7      	b.n	8003246 <get_fileinfo+0xd2>
				if (wc == 0) { di = 0; break; }	/* Invalid char or buffer overflow? */
 8003276:	2500      	movs	r5, #0
 8003278:	e7ea      	b.n	8003250 <get_fileinfo+0xdc>
 800327a:	4655      	mov	r5, sl
 800327c:	e7e8      	b.n	8003250 <get_fileinfo+0xdc>
			fno->fname[di++] = '?';
 800327e:	233f      	movs	r3, #63	; 0x3f
 8003280:	75a3      	strb	r3, [r4, #22]
 8003282:	2301      	movs	r3, #1
		fno->fname[di] = 0;	/* Terminate the LFN */
 8003284:	2200      	movs	r2, #0
 8003286:	4423      	add	r3, r4
 8003288:	759a      	strb	r2, [r3, #22]
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
 800328a:	7b03      	ldrb	r3, [r0, #12]
 800328c:	b903      	cbnz	r3, 8003290 <get_fileinfo+0x11c>
 800328e:	7263      	strb	r3, [r4, #9]
	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
 8003290:	69f9      	ldr	r1, [r7, #28]
 8003292:	7acb      	ldrb	r3, [r1, #11]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 8003294:	f101 001c 	add.w	r0, r1, #28
	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
 8003298:	7223      	strb	r3, [r4, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 800329a:	f7ff f81f 	bl	80022dc <ld_dword>
 800329e:	6020      	str	r0, [r4, #0]
	rv = rv << 8 | ptr[0];
 80032a0:	7dca      	ldrb	r2, [r1, #23]
 80032a2:	7d8b      	ldrb	r3, [r1, #22]
 80032a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 80032a8:	80e3      	strh	r3, [r4, #6]
	rv = rv << 8 | ptr[0];
 80032aa:	7e4a      	ldrb	r2, [r1, #25]
 80032ac:	7e0b      	ldrb	r3, [r1, #24]
 80032ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 80032b2:	80a3      	strh	r3, [r4, #4]
}
 80032b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080032b8 <sync_fs>:
{
 80032b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ba:	4604      	mov	r4, r0
	res = sync_window(fs);
 80032bc:	f7ff f8b9 	bl	8002432 <sync_window>
 80032c0:	4605      	mov	r5, r0
	if (res == FR_OK) {
 80032c2:	2800      	cmp	r0, #0
 80032c4:	d142      	bne.n	800334c <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 80032c6:	7823      	ldrb	r3, [r4, #0]
 80032c8:	2b03      	cmp	r3, #3
 80032ca:	d137      	bne.n	800333c <sync_fs+0x84>
 80032cc:	7927      	ldrb	r7, [r4, #4]
 80032ce:	2f01      	cmp	r7, #1
 80032d0:	d134      	bne.n	800333c <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 80032d2:	f104 0638 	add.w	r6, r4, #56	; 0x38
 80032d6:	4601      	mov	r1, r0
 80032d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032dc:	4630      	mov	r0, r6
 80032de:	f7ff f80d 	bl	80022fc <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 80032e2:	2355      	movs	r3, #85	; 0x55
 80032e4:	f884 3236 	strb.w	r3, [r4, #566]	; 0x236
	*ptr++ = (BYTE)val;
 80032e8:	23aa      	movs	r3, #170	; 0xaa
 80032ea:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
	*ptr++ = (BYTE)val; val >>= 8;
 80032ee:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 80032f0:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 80032f2:	2172      	movs	r1, #114	; 0x72
 80032f4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	*ptr++ = (BYTE)val; val >>= 8;
 80032f8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	*ptr++ = (BYTE)val; val >>= 8;
 80032fc:	2361      	movs	r3, #97	; 0x61
	*ptr++ = (BYTE)val;
 80032fe:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
	*ptr++ = (BYTE)val; val >>= 8;
 8003302:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 8003306:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
	*ptr++ = (BYTE)val;
 800330a:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
	*ptr++ = (BYTE)val; val >>= 8;
 800330e:	f884 121c 	strb.w	r1, [r4, #540]	; 0x21c
	*ptr++ = (BYTE)val; val >>= 8;
 8003312:	f884 121d 	strb.w	r1, [r4, #541]	; 0x21d
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003316:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800331a:	6961      	ldr	r1, [r4, #20]
 800331c:	f7fe ffe6 	bl	80022ec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003320:	6921      	ldr	r1, [r4, #16]
 8003322:	f504 7009 	add.w	r0, r4, #548	; 0x224
 8003326:	f7fe ffe1 	bl	80022ec <st_dword>
			fs->winsect = fs->volbase + 1;
 800332a:	6a62      	ldr	r2, [r4, #36]	; 0x24
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 800332c:	463b      	mov	r3, r7
			fs->winsect = fs->volbase + 1;
 800332e:	3201      	adds	r2, #1
 8003330:	6362      	str	r2, [r4, #52]	; 0x34
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8003332:	4631      	mov	r1, r6
 8003334:	7860      	ldrb	r0, [r4, #1]
 8003336:	f7fe fe61 	bl	8001ffc <disk_write>
			fs->fsi_flag = 0;
 800333a:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800333c:	2200      	movs	r2, #0
 800333e:	7860      	ldrb	r0, [r4, #1]
 8003340:	4611      	mov	r1, r2
 8003342:	f7fe febf 	bl	80020c4 <disk_ioctl>
 8003346:	3000      	adds	r0, #0
 8003348:	bf18      	it	ne
 800334a:	2001      	movne	r0, #1
}
 800334c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800334e <follow_path>:
{
 800334e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = dp->obj.fs;
 8003352:	6803      	ldr	r3, [r0, #0]
{
 8003354:	b087      	sub	sp, #28
	FATFS *fs = dp->obj.fs;
 8003356:	9301      	str	r3, [sp, #4]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8003358:	780b      	ldrb	r3, [r1, #0]
{
 800335a:	4606      	mov	r6, r0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800335c:	2b2f      	cmp	r3, #47	; 0x2f
{
 800335e:	4689      	mov	r9, r1
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8003360:	d001      	beq.n	8003366 <follow_path+0x18>
 8003362:	2b5c      	cmp	r3, #92	; 0x5c
 8003364:	d10a      	bne.n	800337c <follow_path+0x2e>
 8003366:	464a      	mov	r2, r9
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8003368:	7813      	ldrb	r3, [r2, #0]
 800336a:	4691      	mov	r9, r2
 800336c:	2b2f      	cmp	r3, #47	; 0x2f
 800336e:	f102 0201 	add.w	r2, r2, #1
 8003372:	d0f9      	beq.n	8003368 <follow_path+0x1a>
 8003374:	2b5c      	cmp	r3, #92	; 0x5c
 8003376:	d0f7      	beq.n	8003368 <follow_path+0x1a>
		dp->obj.sclust = 0;					/* Start from root directory */
 8003378:	2300      	movs	r3, #0
 800337a:	e001      	b.n	8003380 <follow_path+0x32>
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
 800337c:	9b01      	ldr	r3, [sp, #4]
 800337e:	699b      	ldr	r3, [r3, #24]
		dp->obj.sclust = 0;					/* Start from root directory */
 8003380:	60b3      	str	r3, [r6, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003382:	f899 3000 	ldrb.w	r3, [r9]
 8003386:	2b1f      	cmp	r3, #31
 8003388:	f200 812b 	bhi.w	80035e2 <follow_path+0x294>
		dp->fn[NSFLAG] = NS_NONAME;
 800338c:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 800338e:	2100      	movs	r1, #0
		dp->fn[NSFLAG] = NS_NONAME;
 8003390:	f886 302b 	strb.w	r3, [r6, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 8003394:	4630      	mov	r0, r6
 8003396:	f7ff fae9 	bl	800296c <dir_sdi>
}
 800339a:	b007      	add	sp, #28
 800339c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80033a0:	2d7f      	cmp	r5, #127	; 0x7f
 80033a2:	f200 8147 	bhi.w	8003634 <follow_path+0x2e6>
		lfn[di++] = wc;					/* Store the Unicode character */
 80033a6:	f82a 3015 	strh.w	r3, [sl, r5, lsl #1]
 80033aa:	3501      	adds	r5, #1
 80033ac:	e11f      	b.n	80035ee <follow_path+0x2a0>
	while (*p == '/' || *p == '\\') p++;	/* Skip duplicated separators if exist */
 80033ae:	f109 0201 	add.w	r2, r9, #1
 80033b2:	9205      	str	r2, [sp, #20]
 80033b4:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80033b8:	f899 2000 	ldrb.w	r2, [r9]
 80033bc:	2a2f      	cmp	r2, #47	; 0x2f
 80033be:	d0f6      	beq.n	80033ae <follow_path+0x60>
 80033c0:	2a5c      	cmp	r2, #92	; 0x5c
 80033c2:	d0f4      	beq.n	80033ae <follow_path+0x60>
	cf = (wc < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80033c4:	2b1f      	cmp	r3, #31
 80033c6:	bf8c      	ite	hi
 80033c8:	2400      	movhi	r4, #0
 80033ca:	2404      	movls	r4, #4
	if ((di == 1 && lfn[di - 1] == '.') ||
 80033cc:	2d01      	cmp	r5, #1
 80033ce:	d12c      	bne.n	800342a <follow_path+0xdc>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 80033d0:	f8ba 3000 	ldrh.w	r3, [sl]
 80033d4:	2b2e      	cmp	r3, #46	; 0x2e
 80033d6:	d12e      	bne.n	8003436 <follow_path+0xe8>
		lfn[di] = 0;
 80033d8:	2300      	movs	r3, #0
 80033da:	f106 0220 	add.w	r2, r6, #32
 80033de:	f82a 3015 	strh.w	r3, [sl, r5, lsl #1]
			dp->fn[i] = (i < di) ? '.' : ' ';
 80033e2:	429d      	cmp	r5, r3
 80033e4:	bf94      	ite	ls
 80033e6:	2120      	movls	r1, #32
 80033e8:	212e      	movhi	r1, #46	; 0x2e
		for (i = 0; i < 11; i++) {		/* Create dot name for SFN entry */
 80033ea:	3301      	adds	r3, #1
 80033ec:	2b0b      	cmp	r3, #11
			dp->fn[i] = (i < di) ? '.' : ' ';
 80033ee:	f802 1b01 	strb.w	r1, [r2], #1
		for (i = 0; i < 11; i++) {		/* Create dot name for SFN entry */
 80033f2:	d1f6      	bne.n	80033e2 <follow_path+0x94>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 80033f4:	f044 0420 	orr.w	r4, r4, #32
	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 80033f8:	f886 402b 	strb.w	r4, [r6, #43]	; 0x2b
			res = dir_find(dp);				/* Find an object with the segment name */
 80033fc:	4630      	mov	r0, r6
 80033fe:	f7ff fcfc 	bl	8002dfa <dir_find>
			ns = dp->fn[NSFLAG];
 8003402:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
			if (res != FR_OK) {				/* Failed to find the object */
 8003406:	2800      	cmp	r0, #0
 8003408:	f000 80d9 	beq.w	80035be <follow_path+0x270>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800340c:	2804      	cmp	r0, #4
 800340e:	d1c4      	bne.n	800339a <follow_path+0x4c>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8003410:	0699      	lsls	r1, r3, #26
 8003412:	f003 0204 	and.w	r2, r3, #4
 8003416:	f140 80ce 	bpl.w	80035b6 <follow_path+0x268>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800341a:	2a00      	cmp	r2, #0
 800341c:	f000 80e1 	beq.w	80035e2 <follow_path+0x294>
						dp->fn[NSFLAG] = NS_NONAME;
 8003420:	2380      	movs	r3, #128	; 0x80
						res = FR_OK;
 8003422:	2000      	movs	r0, #0
						dp->fn[NSFLAG] = NS_NONAME;
 8003424:	f886 302b 	strb.w	r3, [r6, #43]	; 0x2b
 8003428:	e7b7      	b.n	800339a <follow_path+0x4c>
	if ((di == 1 && lfn[di - 1] == '.') ||
 800342a:	2d02      	cmp	r5, #2
 800342c:	d103      	bne.n	8003436 <follow_path+0xe8>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 800342e:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8003432:	2b2e      	cmp	r3, #46	; 0x2e
 8003434:	d0cc      	beq.n	80033d0 <follow_path+0x82>
 8003436:	eb0a 0345 	add.w	r3, sl, r5, lsl #1
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800343a:	bb8d      	cbnz	r5, 80034a0 <follow_path+0x152>
	lfn[di] = 0;							/* LFN is created into the working buffer */
 800343c:	2300      	movs	r3, #0
 800343e:	eb0a 0245 	add.w	r2, sl, r5, lsl #1
 8003442:	f82a 3015 	strh.w	r3, [sl, r5, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 8003446:	2d00      	cmp	r5, #0
 8003448:	f000 80f4 	beq.w	8003634 <follow_path+0x2e6>
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 800344c:	f83a 1013 	ldrh.w	r1, [sl, r3, lsl #1]
 8003450:	1c58      	adds	r0, r3, #1
 8003452:	2920      	cmp	r1, #32
 8003454:	d02c      	beq.n	80034b0 <follow_path+0x162>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 8003456:	b90b      	cbnz	r3, 800345c <follow_path+0x10e>
 8003458:	292e      	cmp	r1, #46	; 0x2e
 800345a:	d102      	bne.n	8003462 <follow_path+0x114>
 800345c:	f044 0403 	orr.w	r4, r4, #3
 8003460:	b2e4      	uxtb	r4, r4
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 8003462:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
 8003466:	292e      	cmp	r1, #46	; 0x2e
 8003468:	d001      	beq.n	800346e <follow_path+0x120>
 800346a:	3d01      	subs	r5, #1
 800346c:	d1f9      	bne.n	8003462 <follow_path+0x114>
	mem_set(dp->fn, ' ', 11);
 800346e:	2120      	movs	r1, #32
	i = b = 0; ni = 8;
 8003470:	f04f 0800 	mov.w	r8, #0
	mem_set(dp->fn, ' ', 11);
 8003474:	220b      	movs	r2, #11
 8003476:	1870      	adds	r0, r6, r1
 8003478:	f7fe ff40 	bl	80022fc <mem_set>
	i = b = 0; ni = 8;
 800347c:	f04f 0b08 	mov.w	fp, #8
 8003480:	4647      	mov	r7, r8
		wc = lfn[si++];					/* Get an LFN character */
 8003482:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 8003486:	1c5a      	adds	r2, r3, #1
		if (wc == 0) break;				/* Break on end of the LFN */
 8003488:	b320      	cbz	r0, 80034d4 <follow_path+0x186>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 800348a:	2820      	cmp	r0, #32
 800348c:	d003      	beq.n	8003496 <follow_path+0x148>
 800348e:	282e      	cmp	r0, #46	; 0x2e
 8003490:	d110      	bne.n	80034b4 <follow_path+0x166>
 8003492:	42aa      	cmp	r2, r5
 8003494:	d012      	beq.n	80034bc <follow_path+0x16e>
			cf |= NS_LOSS | NS_LFN;
 8003496:	f044 0403 	orr.w	r4, r4, #3
 800349a:	b2e4      	uxtb	r4, r4
		dp->fn[i++] = (BYTE)wc;
 800349c:	4613      	mov	r3, r2
 800349e:	e7f0      	b.n	8003482 <follow_path+0x134>
		wc = lfn[di - 1];
 80034a0:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
		if (wc != ' ' && wc != '.') break;
 80034a4:	2a20      	cmp	r2, #32
 80034a6:	d001      	beq.n	80034ac <follow_path+0x15e>
 80034a8:	2a2e      	cmp	r2, #46	; 0x2e
 80034aa:	d1c7      	bne.n	800343c <follow_path+0xee>
		di--;
 80034ac:	3d01      	subs	r5, #1
 80034ae:	e7c4      	b.n	800343a <follow_path+0xec>
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 80034b0:	4603      	mov	r3, r0
 80034b2:	e7cb      	b.n	800344c <follow_path+0xfe>
		if (i >= ni || si == di) {		/* End of field? */
 80034b4:	45d8      	cmp	r8, fp
 80034b6:	d205      	bcs.n	80034c4 <follow_path+0x176>
 80034b8:	42aa      	cmp	r2, r5
 80034ba:	d13e      	bne.n	800353a <follow_path+0x1ec>
			if (ni == 11) {				/* Name extension overflow? */
 80034bc:	f1bb 0f0b 	cmp.w	fp, #11
 80034c0:	d133      	bne.n	800352a <follow_path+0x1dc>
 80034c2:	e002      	b.n	80034ca <follow_path+0x17c>
 80034c4:	f1bb 0f0b 	cmp.w	fp, #11
 80034c8:	d129      	bne.n	800351e <follow_path+0x1d0>
				cf |= NS_LOSS | NS_LFN;
 80034ca:	f04f 0b0b 	mov.w	fp, #11
 80034ce:	f044 0403 	orr.w	r4, r4, #3
 80034d2:	b2e4      	uxtb	r4, r4
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80034d4:	f896 3020 	ldrb.w	r3, [r6, #32]
 80034d8:	2be5      	cmp	r3, #229	; 0xe5
 80034da:	bf04      	itt	eq
 80034dc:	2305      	moveq	r3, #5
 80034de:	f886 3020 	strbeq.w	r3, [r6, #32]
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 80034e2:	f1bb 0f08 	cmp.w	fp, #8
 80034e6:	bf04      	itt	eq
 80034e8:	00bf      	lsleq	r7, r7, #2
 80034ea:	b2ff      	uxtbeq	r7, r7
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 80034ec:	f007 030c 	and.w	r3, r7, #12
 80034f0:	2b0c      	cmp	r3, #12
 80034f2:	d003      	beq.n	80034fc <follow_path+0x1ae>
 80034f4:	f007 0303 	and.w	r3, r7, #3
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	d102      	bne.n	8003502 <follow_path+0x1b4>
 80034fc:	f044 0402 	orr.w	r4, r4, #2
 8003500:	b2e4      	uxtb	r4, r4
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 8003502:	07a3      	lsls	r3, r4, #30
 8003504:	f53f af78 	bmi.w	80033f8 <follow_path+0xaa>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 8003508:	07fd      	lsls	r5, r7, #31
 800350a:	bf44      	itt	mi
 800350c:	f044 0410 	orrmi.w	r4, r4, #16
 8003510:	b2e4      	uxtbmi	r4, r4
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 8003512:	0778      	lsls	r0, r7, #29
 8003514:	bf44      	itt	mi
 8003516:	f044 0408 	orrmi.w	r4, r4, #8
 800351a:	b2e4      	uxtbmi	r4, r4
 800351c:	e76c      	b.n	80033f8 <follow_path+0xaa>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 800351e:	42aa      	cmp	r2, r5
 8003520:	d003      	beq.n	800352a <follow_path+0x1dc>
 8003522:	f044 0403 	orr.w	r4, r4, #3
 8003526:	b2e4      	uxtb	r4, r4
			if (si > di) break;						/* No name extension? */
 8003528:	d8d4      	bhi.n	80034d4 <follow_path+0x186>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 800352a:	00bf      	lsls	r7, r7, #2
 800352c:	b2ff      	uxtb	r7, r7
 800352e:	462a      	mov	r2, r5
 8003530:	f04f 0b0b 	mov.w	fp, #11
 8003534:	f04f 0808 	mov.w	r8, #8
 8003538:	e7b0      	b.n	800349c <follow_path+0x14e>
		if (wc >= 0x80) {	/* Is this a non-ASCII character? */
 800353a:	287f      	cmp	r0, #127	; 0x7f
 800353c:	d939      	bls.n	80035b2 <follow_path+0x264>
			cf |= NS_LFN;	/* LFN entry needs to be created */
 800353e:	f044 0302 	orr.w	r3, r4, #2
 8003542:	b2db      	uxtb	r3, r3
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 8003544:	f240 11b5 	movw	r1, #437	; 0x1b5
 8003548:	9203      	str	r2, [sp, #12]
			cf |= NS_LFN;	/* LFN entry needs to be created */
 800354a:	9302      	str	r3, [sp, #8]
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 800354c:	f001 fb1a 	bl	8004b84 <ff_uni2oem>
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 8003550:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8003554:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003558:	d011      	beq.n	800357e <follow_path+0x230>
 800355a:	4941      	ldr	r1, [pc, #260]	; (8003660 <follow_path+0x312>)
 800355c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8003560:	4408      	add	r0, r1
 8003562:	7b40      	ldrb	r0, [r0, #13]
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
 8003564:	b130      	cbz	r0, 8003574 <follow_path+0x226>
 8003566:	4c3f      	ldr	r4, [pc, #252]	; (8003664 <follow_path+0x316>)
	while (*str && *str != chr) str++;
 8003568:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800356c:	2900      	cmp	r1, #0
 800356e:	d065      	beq.n	800363c <follow_path+0x2ee>
 8003570:	4281      	cmp	r1, r0
 8003572:	d1f9      	bne.n	8003568 <follow_path+0x21a>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8003574:	f043 0303 	orr.w	r3, r3, #3
 8003578:	b2db      	uxtb	r3, r3
 800357a:	205f      	movs	r0, #95	; 0x5f
 800357c:	e011      	b.n	80035a2 <follow_path+0x254>
		if (wc >= 0x100) {				/* Is this a DBC? */
 800357e:	28ff      	cmp	r0, #255	; 0xff
 8003580:	d9f0      	bls.n	8003564 <follow_path+0x216>
			if (i >= ni - 1) {			/* Field overflow? */
 8003582:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
 8003586:	4588      	cmp	r8, r1
 8003588:	d304      	bcc.n	8003594 <follow_path+0x246>
				cf |= NS_LOSS | NS_LFN;
 800358a:	f044 0403 	orr.w	r4, r4, #3
 800358e:	b2e4      	uxtb	r4, r4
 8003590:	46d8      	mov	r8, fp
 8003592:	e783      	b.n	800349c <follow_path+0x14e>
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 8003594:	eb06 0108 	add.w	r1, r6, r8
 8003598:	0a04      	lsrs	r4, r0, #8
 800359a:	f881 4020 	strb.w	r4, [r1, #32]
 800359e:	f108 0801 	add.w	r8, r8, #1
		dp->fn[i++] = (BYTE)wc;
 80035a2:	eb06 0108 	add.w	r1, r6, r8
 80035a6:	f881 0020 	strb.w	r0, [r1, #32]
 80035aa:	f108 0801 	add.w	r8, r8, #1
 80035ae:	461c      	mov	r4, r3
 80035b0:	e774      	b.n	800349c <follow_path+0x14e>
		if (wc >= 0x80) {	/* Is this a non-ASCII character? */
 80035b2:	4623      	mov	r3, r4
 80035b4:	e7d7      	b.n	8003566 <follow_path+0x218>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80035b6:	2a00      	cmp	r2, #0
 80035b8:	bf08      	it	eq
 80035ba:	2005      	moveq	r0, #5
 80035bc:	e6ed      	b.n	800339a <follow_path+0x4c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80035be:	075a      	lsls	r2, r3, #29
 80035c0:	f53f aeeb 	bmi.w	800339a <follow_path+0x4c>
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80035c4:	79b3      	ldrb	r3, [r6, #6]
 80035c6:	06db      	lsls	r3, r3, #27
 80035c8:	d536      	bpl.n	8003638 <follow_path+0x2ea>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80035ca:	9b01      	ldr	r3, [sp, #4]
 80035cc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80035d0:	6933      	ldr	r3, [r6, #16]
 80035d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035d6:	4419      	add	r1, r3
 80035d8:	9b01      	ldr	r3, [sp, #4]
 80035da:	7818      	ldrb	r0, [r3, #0]
 80035dc:	f7fe ff0f 	bl	80023fe <ld_clust.isra.3>
 80035e0:	60b0      	str	r0, [r6, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 80035e2:	2500      	movs	r5, #0
 80035e4:	6833      	ldr	r3, [r6, #0]
 80035e6:	f8cd 9014 	str.w	r9, [sp, #20]
 80035ea:	f8d3 a00c 	ldr.w	sl, [r3, #12]
		uc = tchar2uni(&p);			/* Get a character */
 80035ee:	a805      	add	r0, sp, #20
 80035f0:	f7fe feec 	bl	80023cc <tchar2uni>
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
 80035f4:	1c42      	adds	r2, r0, #1
 80035f6:	d01d      	beq.n	8003634 <follow_path+0x2e6>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
 80035f8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80035fc:	bf24      	itt	cs
 80035fe:	0c03      	lsrcs	r3, r0, #16
 8003600:	f82a 3015 	strhcs.w	r3, [sl, r5, lsl #1]
		wc = (WCHAR)uc;
 8003604:	b283      	uxth	r3, r0
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
 8003606:	bf28      	it	cs
 8003608:	3501      	addcs	r5, #1
		if (wc < ' ' || wc == '/' || wc == '\\') break;	/* Break if end of the path or a separator is found */
 800360a:	2b1f      	cmp	r3, #31
 800360c:	f67f aed2 	bls.w	80033b4 <follow_path+0x66>
 8003610:	2b2f      	cmp	r3, #47	; 0x2f
 8003612:	f43f aecf 	beq.w	80033b4 <follow_path+0x66>
 8003616:	2b5c      	cmp	r3, #92	; 0x5c
 8003618:	f43f aecc 	beq.w	80033b4 <follow_path+0x66>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800361c:	2b7f      	cmp	r3, #127	; 0x7f
 800361e:	f63f aebf 	bhi.w	80033a0 <follow_path+0x52>
 8003622:	4618      	mov	r0, r3
 8003624:	4910      	ldr	r1, [pc, #64]	; (8003668 <follow_path+0x31a>)
	while (*str && *str != chr) str++;
 8003626:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800362a:	2a00      	cmp	r2, #0
 800362c:	f43f aeb8 	beq.w	80033a0 <follow_path+0x52>
 8003630:	4290      	cmp	r0, r2
 8003632:	d1f8      	bne.n	8003626 <follow_path+0x2d8>
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 8003634:	2006      	movs	r0, #6
 8003636:	e6b0      	b.n	800339a <follow_path+0x4c>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003638:	2005      	movs	r0, #5
	return res;
 800363a:	e6ae      	b.n	800339a <follow_path+0x4c>
				if (IsUpper(wc)) {		/* ASCII upper case? */
 800363c:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8003640:	b289      	uxth	r1, r1
 8003642:	2919      	cmp	r1, #25
 8003644:	d801      	bhi.n	800364a <follow_path+0x2fc>
					b |= 2;
 8003646:	f047 0702 	orr.w	r7, r7, #2
				if (IsLower(wc)) {		/* ASCII lower case? */
 800364a:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 800364e:	b289      	uxth	r1, r1
 8003650:	2919      	cmp	r1, #25
					b |= 1; wc -= 0x20;
 8003652:	bf9e      	ittt	ls
 8003654:	3820      	subls	r0, #32
 8003656:	f047 0701 	orrls.w	r7, r7, #1
 800365a:	b280      	uxthls	r0, r0
 800365c:	e7a1      	b.n	80035a2 <follow_path+0x254>
 800365e:	bf00      	nop
 8003660:	080059f6 	.word	0x080059f6
 8003664:	08005aba 	.word	0x08005aba
 8003668:	08005ab1 	.word	0x08005ab1

0800366c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800366c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800366e:	e9cd 1000 	strd	r1, r0, [sp]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8003672:	a804      	add	r0, sp, #16
 8003674:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 8003678:	4614      	mov	r4, r2


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800367a:	f7fe fe6d 	bl	8002358 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800367e:	2800      	cmp	r0, #0
 8003680:	db14      	blt.n	80036ac <f_mount+0x40>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8003682:	4b0c      	ldr	r3, [pc, #48]	; (80036b4 <f_mount+0x48>)
 8003684:	0080      	lsls	r0, r0, #2
 8003686:	181a      	adds	r2, r3, r0
 8003688:	6852      	ldr	r2, [r2, #4]

	if (cfs) {
 800368a:	b10a      	cbz	r2, 8003690 <f_mount+0x24>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800368c:	2100      	movs	r1, #0
 800368e:	7011      	strb	r1, [r2, #0]
	}

	if (fs) {
 8003690:	9a01      	ldr	r2, [sp, #4]
 8003692:	b10a      	cbz	r2, 8003698 <f_mount+0x2c>
		fs->fs_type = 0;				/* Clear new fs object */
 8003694:	2100      	movs	r1, #0
 8003696:	7011      	strb	r1, [r2, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8003698:	4403      	add	r3, r0
 800369a:	605a      	str	r2, [r3, #4]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 800369c:	b144      	cbz	r4, 80036b0 <f_mount+0x44>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800369e:	2200      	movs	r2, #0
 80036a0:	a901      	add	r1, sp, #4
 80036a2:	4668      	mov	r0, sp
 80036a4:	f7fe ff3a 	bl	800251c <find_volume>
	LEAVE_FF(fs, res);
}
 80036a8:	b004      	add	sp, #16
 80036aa:	bd10      	pop	{r4, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 80036ac:	200b      	movs	r0, #11
 80036ae:	e7fb      	b.n	80036a8 <f_mount+0x3c>
	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 80036b0:	4620      	mov	r0, r4
 80036b2:	e7f9      	b.n	80036a8 <f_mount+0x3c>
 80036b4:	20000128 	.word	0x20000128

080036b8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80036b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036bc:	b091      	sub	sp, #68	; 0x44
 80036be:	9101      	str	r1, [sp, #4]
 80036c0:	4617      	mov	r7, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80036c2:	4604      	mov	r4, r0
 80036c4:	2800      	cmp	r0, #0
 80036c6:	f000 80d3 	beq.w	8003870 <f_open+0x1b8>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 80036ca:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 80036ce:	462a      	mov	r2, r5
 80036d0:	a903      	add	r1, sp, #12
 80036d2:	a801      	add	r0, sp, #4
 80036d4:	f7fe ff22 	bl	800251c <find_volume>
	if (res == FR_OK) {
 80036d8:	4606      	mov	r6, r0
 80036da:	2800      	cmp	r0, #0
 80036dc:	d14d      	bne.n	800377a <f_open+0xc2>
		dj.obj.fs = fs;
 80036de:	9b03      	ldr	r3, [sp, #12]
 80036e0:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 80036e4:	f848 3d30 	str.w	r3, [r8, #-48]!
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80036e8:	9901      	ldr	r1, [sp, #4]
 80036ea:	4640      	mov	r0, r8
 80036ec:	f7ff fe2f 	bl	800334e <follow_path>
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 80036f0:	b920      	cbnz	r0, 80036fc <f_open+0x44>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80036f2:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
				res = FR_INVALID_NAME;
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	bfb8      	it	lt
 80036fa:	2006      	movlt	r0, #6
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80036fc:	f017 0f1c 	tst.w	r7, #28
 8003700:	d04b      	beq.n	800379a <f_open+0xe2>
			if (res != FR_OK) {					/* No file, create new */
 8003702:	2800      	cmp	r0, #0
 8003704:	d040      	beq.n	8003788 <f_open+0xd0>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8003706:	2804      	cmp	r0, #4
 8003708:	d137      	bne.n	800377a <f_open+0xc2>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 800370a:	4640      	mov	r0, r8
 800370c:	f7ff fc1e 	bl	8002f4c <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8003710:	bb98      	cbnz	r0, 800377a <f_open+0xc2>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8003712:	f045 0508 	orr.w	r5, r5, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8003716:	0729      	lsls	r1, r5, #28
 8003718:	d549      	bpl.n	80037ae <f_open+0xf6>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 800371a:	9b03      	ldr	r3, [sp, #12]
 800371c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8003720:	7818      	ldrb	r0, [r3, #0]
 8003722:	4649      	mov	r1, r9
 8003724:	f7fe fe6b 	bl	80023fe <ld_clust.isra.3>
 8003728:	4607      	mov	r7, r0
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 800372a:	f7fc fd77 	bl	800021c <get_fattime>
 800372e:	4601      	mov	r1, r0
 8003730:	f109 000e 	add.w	r0, r9, #14
 8003734:	f7fe fdda 	bl	80022ec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8003738:	2220      	movs	r2, #32
 800373a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800373c:	9803      	ldr	r0, [sp, #12]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800373e:	72da      	strb	r2, [r3, #11]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8003740:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003742:	2200      	movs	r2, #0
 8003744:	f7fe fe69 	bl	800241a <st_clust.isra.4>
	*ptr++ = (BYTE)val; val >>= 8;
 8003748:	2200      	movs	r2, #0
					st_dword(dj.dir + DIR_FileSize, 0);
					fs->wflag = 1;
 800374a:	2101      	movs	r1, #1
					st_dword(dj.dir + DIR_FileSize, 0);
 800374c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 800374e:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8003750:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8003752:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 8003754:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 8003756:	9b03      	ldr	r3, [sp, #12]
 8003758:	70d9      	strb	r1, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 800375a:	b347      	cbz	r7, 80037ae <f_open+0xf6>
						dw = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
 800375c:	4639      	mov	r1, r7
 800375e:	4640      	mov	r0, r8
						dw = fs->winsect;
 8003760:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
						res = remove_chain(&dj.obj, cl, 0);
 8003764:	f7ff f9b8 	bl	8002ad8 <remove_chain>
						if (res == FR_OK) {
 8003768:	b938      	cbnz	r0, 800377a <f_open+0xc2>
							res = move_window(fs, dw);
 800376a:	4649      	mov	r1, r9
 800376c:	9803      	ldr	r0, [sp, #12]
 800376e:	f7fe fe82 	bl	8002476 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8003772:	9b03      	ldr	r3, [sp, #12]
 8003774:	3f01      	subs	r7, #1
 8003776:	611f      	str	r7, [r3, #16]
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 8003778:	b1c8      	cbz	r0, 80037ae <f_open+0xf6>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800377a:	2300      	movs	r3, #0
 800377c:	4606      	mov	r6, r0
 800377e:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 8003780:	4630      	mov	r0, r6
 8003782:	b011      	add	sp, #68	; 0x44
 8003784:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8003788:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800378c:	f013 0f11 	tst.w	r3, #17
 8003790:	d16a      	bne.n	8003868 <f_open+0x1b0>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8003792:	0778      	lsls	r0, r7, #29
 8003794:	d5bf      	bpl.n	8003716 <f_open+0x5e>
 8003796:	2008      	movs	r0, #8
 8003798:	e7ef      	b.n	800377a <f_open+0xc2>
			if (res == FR_OK) {					/* Is the object exsiting? */
 800379a:	2800      	cmp	r0, #0
 800379c:	d1ed      	bne.n	800377a <f_open+0xc2>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 800379e:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80037a2:	06da      	lsls	r2, r3, #27
 80037a4:	d45e      	bmi.n	8003864 <f_open+0x1ac>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 80037a6:	07bf      	lsls	r7, r7, #30
 80037a8:	d501      	bpl.n	80037ae <f_open+0xf6>
 80037aa:	07d8      	lsls	r0, r3, #31
 80037ac:	d45c      	bmi.n	8003868 <f_open+0x1b0>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80037ae:	9f03      	ldr	r7, [sp, #12]
			fp->dir_ptr = dj.dir;
 80037b0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80037b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
			fp->dir_ptr = dj.dir;
 80037b6:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80037ba:	6223      	str	r3, [r4, #32]
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80037bc:	7838      	ldrb	r0, [r7, #0]
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 80037be:	0729      	lsls	r1, r5, #28
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80037c0:	4641      	mov	r1, r8
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 80037c2:	bf48      	it	mi
 80037c4:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80037c8:	f7fe fe19 	bl	80023fe <ld_clust.isra.3>
 80037cc:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80037ce:	f108 001c 	add.w	r0, r8, #28
 80037d2:	f7fe fd83 	bl	80022dc <ld_dword>
			fp->err = 0;			/* Clear error flag */
 80037d6:	2100      	movs	r1, #0
			fp->obj.id = fs->id;
 80037d8:	88fb      	ldrh	r3, [r7, #6]
			fp->obj.fs = fs;	 	/* Validate the file object */
 80037da:	6027      	str	r7, [r4, #0]
			mem_set(fp->buf, 0, FF_MAX_SS);	/* Clear sector buffer */
 80037dc:	f104 0728 	add.w	r7, r4, #40	; 0x28
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80037e0:	60e0      	str	r0, [r4, #12]
			mem_set(fp->buf, 0, FF_MAX_SS);	/* Clear sector buffer */
 80037e2:	f44f 7200 	mov.w	r2, #512	; 0x200
			fp->obj.id = fs->id;
 80037e6:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
 80037e8:	7425      	strb	r5, [r4, #16]
			fp->err = 0;			/* Clear error flag */
 80037ea:	7461      	strb	r1, [r4, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 80037ec:	61e1      	str	r1, [r4, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80037ee:	6161      	str	r1, [r4, #20]
			mem_set(fp->buf, 0, FF_MAX_SS);	/* Clear sector buffer */
 80037f0:	4638      	mov	r0, r7
 80037f2:	f7fe fd83 	bl	80022fc <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80037f6:	06aa      	lsls	r2, r5, #26
 80037f8:	d5c2      	bpl.n	8003780 <f_open+0xc8>
 80037fa:	68e5      	ldr	r5, [r4, #12]
 80037fc:	2d00      	cmp	r5, #0
 80037fe:	d0bf      	beq.n	8003780 <f_open+0xc8>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8003800:	9b03      	ldr	r3, [sp, #12]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8003802:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8003804:	f8b3 800a 	ldrh.w	r8, [r3, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8003808:	6165      	str	r5, [r4, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800380a:	ea4f 2848 	mov.w	r8, r8, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800380e:	45a8      	cmp	r8, r5
 8003810:	d31a      	bcc.n	8003848 <f_open+0x190>
 8003812:	2000      	movs	r0, #0
				fp->clust = clst;
 8003814:	61a1      	str	r1, [r4, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8003816:	2800      	cmp	r0, #0
 8003818:	d1af      	bne.n	800377a <f_open+0xc2>
 800381a:	f3c5 0308 	ubfx	r3, r5, #0, #9
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0ae      	beq.n	8003780 <f_open+0xc8>
					if ((sc = clst2sect(fs, clst)) == 0) {
 8003822:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003826:	4640      	mov	r0, r8
 8003828:	f7fe fd7c 	bl	8002324 <clst2sect>
 800382c:	b1f0      	cbz	r0, 800386c <f_open+0x1b4>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800382e:	eb00 2255 	add.w	r2, r0, r5, lsr #9
 8003832:	61e2      	str	r2, [r4, #28]
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8003834:	2301      	movs	r3, #1
 8003836:	4639      	mov	r1, r7
 8003838:	f898 0001 	ldrb.w	r0, [r8, #1]
 800383c:	f7fe fb9e 	bl	8001f7c <disk_read>
 8003840:	2800      	cmp	r0, #0
 8003842:	d09d      	beq.n	8003780 <f_open+0xc8>
 8003844:	2001      	movs	r0, #1
 8003846:	e798      	b.n	800377a <f_open+0xc2>
					clst = get_fat(&fp->obj, clst);
 8003848:	6820      	ldr	r0, [r4, #0]
 800384a:	f7ff f835 	bl	80028b8 <get_fat.isra.9>
					if (clst <= 1) res = FR_INT_ERR;
 800384e:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8003850:	4601      	mov	r1, r0
 8003852:	eba5 0508 	sub.w	r5, r5, r8
					if (clst <= 1) res = FR_INT_ERR;
 8003856:	d903      	bls.n	8003860 <f_open+0x1a8>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8003858:	1c43      	adds	r3, r0, #1
 800385a:	d1d8      	bne.n	800380e <f_open+0x156>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800385c:	2001      	movs	r0, #1
 800385e:	e7d9      	b.n	8003814 <f_open+0x15c>
					if (clst <= 1) res = FR_INT_ERR;
 8003860:	2002      	movs	r0, #2
 8003862:	e7d7      	b.n	8003814 <f_open+0x15c>
					res = FR_NO_FILE;
 8003864:	2004      	movs	r0, #4
 8003866:	e788      	b.n	800377a <f_open+0xc2>
					res = FR_DENIED;
 8003868:	2007      	movs	r0, #7
 800386a:	e786      	b.n	800377a <f_open+0xc2>
						res = FR_INT_ERR;
 800386c:	2002      	movs	r0, #2
 800386e:	e784      	b.n	800377a <f_open+0xc2>
	if (!fp) return FR_INVALID_OBJECT;
 8003870:	2609      	movs	r6, #9
 8003872:	e785      	b.n	8003780 <f_open+0xc8>

08003874 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8003874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003878:	469b      	mov	fp, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800387a:	2300      	movs	r3, #0
{
 800387c:	b085      	sub	sp, #20
 800387e:	4689      	mov	r9, r1
	*br = 0;	/* Clear read byte counter */
 8003880:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8003884:	a903      	add	r1, sp, #12
{
 8003886:	4604      	mov	r4, r0
 8003888:	4615      	mov	r5, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800388a:	f7fe fd85 	bl	8002398 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800388e:	4606      	mov	r6, r0
 8003890:	b9f8      	cbnz	r0, 80038d2 <f_read+0x5e>
 8003892:	7c66      	ldrb	r6, [r4, #17]
 8003894:	b9ee      	cbnz	r6, 80038d2 <f_read+0x5e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8003896:	7c23      	ldrb	r3, [r4, #16]
 8003898:	07d9      	lsls	r1, r3, #31
 800389a:	f140 808f 	bpl.w	80039bc <f_read+0x148>
	remain = fp->obj.objsize - fp->fptr;
 800389e:	68e3      	ldr	r3, [r4, #12]
 80038a0:	6967      	ldr	r7, [r4, #20]
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80038a2:	f104 0a28 	add.w	sl, r4, #40	; 0x28
	remain = fp->obj.objsize - fp->fptr;
 80038a6:	1bdf      	subs	r7, r3, r7
 80038a8:	42af      	cmp	r7, r5
 80038aa:	bf28      	it	cs
 80038ac:	462f      	movcs	r7, r5
	for ( ;  btr;								/* Repeat until btr bytes read */
 80038ae:	b187      	cbz	r7, 80038d2 <f_read+0x5e>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80038b0:	6962      	ldr	r2, [r4, #20]
 80038b2:	f3c2 0308 	ubfx	r3, r2, #0, #9
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d172      	bne.n	80039a0 <f_read+0x12c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80038ba:	9b03      	ldr	r3, [sp, #12]
 80038bc:	895b      	ldrh	r3, [r3, #10]
 80038be:	3b01      	subs	r3, #1
			if (csect == 0) {					/* On the cluster boundary? */
 80038c0:	ea13 2352 	ands.w	r3, r3, r2, lsr #9
 80038c4:	d115      	bne.n	80038f2 <f_read+0x7e>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80038c6:	b942      	cbnz	r2, 80038da <f_read+0x66>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80038c8:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80038ca:	2801      	cmp	r0, #1
 80038cc:	d80c      	bhi.n	80038e8 <f_read+0x74>
 80038ce:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80038d0:	7466      	strb	r6, [r4, #17]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 80038d2:	4630      	mov	r0, r6
 80038d4:	b005      	add	sp, #20
 80038d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80038da:	69a1      	ldr	r1, [r4, #24]
 80038dc:	6820      	ldr	r0, [r4, #0]
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	f7fe ffea 	bl	80028b8 <get_fat.isra.9>
 80038e4:	9b00      	ldr	r3, [sp, #0]
 80038e6:	e7f0      	b.n	80038ca <f_read+0x56>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80038e8:	1c42      	adds	r2, r0, #1
 80038ea:	d101      	bne.n	80038f0 <f_read+0x7c>
 80038ec:	2601      	movs	r6, #1
 80038ee:	e7ef      	b.n	80038d0 <f_read+0x5c>
				fp->clust = clst;				/* Update current cluster */
 80038f0:	61a0      	str	r0, [r4, #24]
 80038f2:	9301      	str	r3, [sp, #4]
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 80038f4:	9b03      	ldr	r3, [sp, #12]
 80038f6:	69a1      	ldr	r1, [r4, #24]
 80038f8:	4618      	mov	r0, r3
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	f7fe fd12 	bl	8002324 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8003900:	2800      	cmp	r0, #0
 8003902:	d0e4      	beq.n	80038ce <f_read+0x5a>
			sect += csect;
 8003904:	9b01      	ldr	r3, [sp, #4]
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 8003906:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 8003908:	eb03 0800 	add.w	r8, r3, r0
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 800390c:	d02a      	beq.n	8003964 <f_read+0xf0>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800390e:	9a00      	ldr	r2, [sp, #0]
 8003910:	1959      	adds	r1, r3, r5
 8003912:	8952      	ldrh	r2, [r2, #10]
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003914:	9800      	ldr	r0, [sp, #0]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8003916:	4291      	cmp	r1, r2
					cc = fs->csize - csect;
 8003918:	bf88      	it	hi
 800391a:	1ad5      	subhi	r5, r2, r3
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800391c:	462b      	mov	r3, r5
 800391e:	4642      	mov	r2, r8
 8003920:	4649      	mov	r1, r9
 8003922:	7840      	ldrb	r0, [r0, #1]
 8003924:	f7fe fb2a 	bl	8001f7c <disk_read>
 8003928:	2800      	cmp	r0, #0
 800392a:	d1df      	bne.n	80038ec <f_read+0x78>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800392c:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8003930:	2b00      	cmp	r3, #0
 8003932:	da0b      	bge.n	800394c <f_read+0xd8>
 8003934:	69e0      	ldr	r0, [r4, #28]
 8003936:	eba0 0008 	sub.w	r0, r0, r8
 800393a:	42a8      	cmp	r0, r5
 800393c:	d206      	bcs.n	800394c <f_read+0xd8>
 800393e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003942:	4651      	mov	r1, sl
 8003944:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 8003948:	f7fe fd50 	bl	80023ec <mem_cpy.part.0>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800394c:	026d      	lsls	r5, r5, #9
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
 800394e:	f8db 3000 	ldr.w	r3, [fp]
 8003952:	1b7f      	subs	r7, r7, r5
 8003954:	442b      	add	r3, r5
 8003956:	f8cb 3000 	str.w	r3, [fp]
 800395a:	6963      	ldr	r3, [r4, #20]
 800395c:	44a9      	add	r9, r5
 800395e:	441d      	add	r5, r3
 8003960:	6165      	str	r5, [r4, #20]
 8003962:	e7a4      	b.n	80038ae <f_read+0x3a>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8003964:	69e2      	ldr	r2, [r4, #28]
 8003966:	4542      	cmp	r2, r8
 8003968:	d018      	beq.n	800399c <f_read+0x128>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800396a:	f994 3010 	ldrsb.w	r3, [r4, #16]
 800396e:	2b00      	cmp	r3, #0
 8003970:	da0b      	bge.n	800398a <f_read+0x116>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003972:	9800      	ldr	r0, [sp, #0]
 8003974:	2301      	movs	r3, #1
 8003976:	4651      	mov	r1, sl
 8003978:	7840      	ldrb	r0, [r0, #1]
 800397a:	f7fe fb3f 	bl	8001ffc <disk_write>
 800397e:	2800      	cmp	r0, #0
 8003980:	d1b4      	bne.n	80038ec <f_read+0x78>
					fp->flag &= (BYTE)~FA_DIRTY;
 8003982:	7c23      	ldrb	r3, [r4, #16]
 8003984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003988:	7423      	strb	r3, [r4, #16]
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800398a:	9803      	ldr	r0, [sp, #12]
 800398c:	2301      	movs	r3, #1
 800398e:	4642      	mov	r2, r8
 8003990:	4651      	mov	r1, sl
 8003992:	7840      	ldrb	r0, [r0, #1]
 8003994:	f7fe faf2 	bl	8001f7c <disk_read>
 8003998:	2800      	cmp	r0, #0
 800399a:	d1a7      	bne.n	80038ec <f_read+0x78>
			fp->sect = sect;
 800399c:	f8c4 801c 	str.w	r8, [r4, #28]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80039a0:	6961      	ldr	r1, [r4, #20]
 80039a2:	4648      	mov	r0, r9
 80039a4:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80039a8:	f5c1 7500 	rsb	r5, r1, #512	; 0x200
 80039ac:	42bd      	cmp	r5, r7
 80039ae:	bf28      	it	cs
 80039b0:	463d      	movcs	r5, r7
 80039b2:	4451      	add	r1, sl
 80039b4:	462a      	mov	r2, r5
 80039b6:	f7fe fd19 	bl	80023ec <mem_cpy.part.0>
 80039ba:	e7c8      	b.n	800394e <f_read+0xda>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80039bc:	2607      	movs	r6, #7
 80039be:	e788      	b.n	80038d2 <f_read+0x5e>

080039c0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80039c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039c4:	469b      	mov	fp, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 80039c6:	2300      	movs	r3, #0
{
 80039c8:	b085      	sub	sp, #20
 80039ca:	4689      	mov	r9, r1
	*bw = 0;	/* Clear write byte counter */
 80039cc:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80039d0:	a903      	add	r1, sp, #12
{
 80039d2:	4604      	mov	r4, r0
 80039d4:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80039d6:	f7fe fcdf 	bl	8002398 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80039da:	4606      	mov	r6, r0
 80039dc:	bb28      	cbnz	r0, 8003a2a <f_write+0x6a>
 80039de:	7c66      	ldrb	r6, [r4, #17]
 80039e0:	bb1e      	cbnz	r6, 8003a2a <f_write+0x6a>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80039e2:	7c23      	ldrb	r3, [r4, #16]
 80039e4:	079a      	lsls	r2, r3, #30
 80039e6:	f140 80a8 	bpl.w	8003b3a <f_write+0x17a>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80039ea:	6963      	ldr	r3, [r4, #20]
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80039ec:	f104 0a28 	add.w	sl, r4, #40	; 0x28
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80039f0:	42fb      	cmn	r3, r7
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80039f2:	bf28      	it	cs
 80039f4:	43df      	mvncs	r7, r3
	for ( ;  btw;							/* Repeat until all data written */
 80039f6:	b1a7      	cbz	r7, 8003a22 <f_write+0x62>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80039f8:	6963      	ldr	r3, [r4, #20]
 80039fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039fe:	2a00      	cmp	r2, #0
 8003a00:	f040 8089 	bne.w	8003b16 <f_write+0x156>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8003a04:	9a03      	ldr	r2, [sp, #12]
 8003a06:	8952      	ldrh	r2, [r2, #10]
 8003a08:	3a01      	subs	r2, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8003a0a:	ea12 2253 	ands.w	r2, r2, r3, lsr #9
 8003a0e:	9201      	str	r2, [sp, #4]
 8003a10:	d11e      	bne.n	8003a50 <f_write+0x90>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8003a12:	b973      	cbnz	r3, 8003a32 <f_write+0x72>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8003a14:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8003a16:	b970      	cbnz	r0, 8003a36 <f_write+0x76>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8003a18:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	f7fe ffe8 	bl	80029f0 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8003a20:	b948      	cbnz	r0, 8003a36 <f_write+0x76>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8003a22:	7c23      	ldrb	r3, [r4, #16]
 8003a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a28:	7423      	strb	r3, [r4, #16]

	LEAVE_FF(fs, FR_OK);
}
 8003a2a:	4630      	mov	r0, r6
 8003a2c:	b005      	add	sp, #20
 8003a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8003a32:	69a1      	ldr	r1, [r4, #24]
 8003a34:	e7f1      	b.n	8003a1a <f_write+0x5a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8003a36:	2801      	cmp	r0, #1
 8003a38:	d102      	bne.n	8003a40 <f_write+0x80>
 8003a3a:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003a3c:	7466      	strb	r6, [r4, #17]
 8003a3e:	e7f4      	b.n	8003a2a <f_write+0x6a>
 8003a40:	1c43      	adds	r3, r0, #1
 8003a42:	d101      	bne.n	8003a48 <f_write+0x88>
 8003a44:	2601      	movs	r6, #1
 8003a46:	e7f9      	b.n	8003a3c <f_write+0x7c>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8003a48:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8003a4a:	61a0      	str	r0, [r4, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8003a4c:	b903      	cbnz	r3, 8003a50 <f_write+0x90>
 8003a4e:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8003a50:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	da0c      	bge.n	8003a72 <f_write+0xb2>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003a58:	9803      	ldr	r0, [sp, #12]
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	69e2      	ldr	r2, [r4, #28]
 8003a5e:	4651      	mov	r1, sl
 8003a60:	7840      	ldrb	r0, [r0, #1]
 8003a62:	f7fe facb 	bl	8001ffc <disk_write>
 8003a66:	2800      	cmp	r0, #0
 8003a68:	d1ec      	bne.n	8003a44 <f_write+0x84>
				fp->flag &= (BYTE)~FA_DIRTY;
 8003a6a:	7c23      	ldrb	r3, [r4, #16]
 8003a6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a70:	7423      	strb	r3, [r4, #16]
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8003a72:	9b03      	ldr	r3, [sp, #12]
 8003a74:	69a1      	ldr	r1, [r4, #24]
 8003a76:	4618      	mov	r0, r3
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	f7fe fc53 	bl	8002324 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8003a7e:	2800      	cmp	r0, #0
 8003a80:	d0db      	beq.n	8003a3a <f_write+0x7a>
			sect += csect;
 8003a82:	9b01      	ldr	r3, [sp, #4]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8003a84:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 8003a86:	eb03 0800 	add.w	r8, r3, r0
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8003a8a:	d032      	beq.n	8003af2 <f_write+0x132>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8003a8c:	9b00      	ldr	r3, [sp, #0]
 8003a8e:	9a01      	ldr	r2, [sp, #4]
 8003a90:	895b      	ldrh	r3, [r3, #10]
 8003a92:	442a      	add	r2, r5
 8003a94:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 8003a96:	bf88      	it	hi
 8003a98:	9a01      	ldrhi	r2, [sp, #4]
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003a9a:	9800      	ldr	r0, [sp, #0]
					cc = fs->csize - csect;
 8003a9c:	bf88      	it	hi
 8003a9e:	1a9d      	subhi	r5, r3, r2
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003aa0:	462b      	mov	r3, r5
 8003aa2:	4642      	mov	r2, r8
 8003aa4:	4649      	mov	r1, r9
 8003aa6:	7840      	ldrb	r0, [r0, #1]
 8003aa8:	f7fe faa8 	bl	8001ffc <disk_write>
 8003aac:	2800      	cmp	r0, #0
 8003aae:	d1c9      	bne.n	8003a44 <f_write+0x84>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8003ab0:	69e1      	ldr	r1, [r4, #28]
 8003ab2:	eba1 0108 	sub.w	r1, r1, r8
 8003ab6:	42a9      	cmp	r1, r5
 8003ab8:	d20a      	bcs.n	8003ad0 <f_write+0x110>
 8003aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003abe:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 8003ac2:	4650      	mov	r0, sl
 8003ac4:	f7fe fc92 	bl	80023ec <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 8003ac8:	7c23      	ldrb	r3, [r4, #16]
 8003aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ace:	7423      	strb	r3, [r4, #16]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8003ad0:	026d      	lsls	r5, r5, #9
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
 8003ad2:	f8db 3000 	ldr.w	r3, [fp]
 8003ad6:	1b7f      	subs	r7, r7, r5
 8003ad8:	442b      	add	r3, r5
 8003ada:	f8cb 3000 	str.w	r3, [fp]
 8003ade:	6963      	ldr	r3, [r4, #20]
 8003ae0:	44a9      	add	r9, r5
 8003ae2:	441d      	add	r5, r3
 8003ae4:	68e3      	ldr	r3, [r4, #12]
 8003ae6:	6165      	str	r5, [r4, #20]
 8003ae8:	42ab      	cmp	r3, r5
 8003aea:	bf2c      	ite	cs
 8003aec:	60e3      	strcs	r3, [r4, #12]
 8003aee:	60e5      	strcc	r5, [r4, #12]
 8003af0:	e781      	b.n	80039f6 <f_write+0x36>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8003af2:	69e3      	ldr	r3, [r4, #28]
 8003af4:	4543      	cmp	r3, r8
 8003af6:	d00c      	beq.n	8003b12 <f_write+0x152>
 8003af8:	68e2      	ldr	r2, [r4, #12]
 8003afa:	6963      	ldr	r3, [r4, #20]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d908      	bls.n	8003b12 <f_write+0x152>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 8003b00:	9800      	ldr	r0, [sp, #0]
 8003b02:	2301      	movs	r3, #1
 8003b04:	4642      	mov	r2, r8
 8003b06:	4651      	mov	r1, sl
 8003b08:	7840      	ldrb	r0, [r0, #1]
 8003b0a:	f7fe fa37 	bl	8001f7c <disk_read>
				fp->fptr < fp->obj.objsize &&
 8003b0e:	2800      	cmp	r0, #0
 8003b10:	d198      	bne.n	8003a44 <f_write+0x84>
			fp->sect = sect;
 8003b12:	f8c4 801c 	str.w	r8, [r4, #28]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8003b16:	6960      	ldr	r0, [r4, #20]
 8003b18:	4649      	mov	r1, r9
 8003b1a:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8003b1e:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
 8003b22:	42bd      	cmp	r5, r7
 8003b24:	bf28      	it	cs
 8003b26:	463d      	movcs	r5, r7
 8003b28:	4450      	add	r0, sl
 8003b2a:	462a      	mov	r2, r5
 8003b2c:	f7fe fc5e 	bl	80023ec <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 8003b30:	7c23      	ldrb	r3, [r4, #16]
 8003b32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b36:	7423      	strb	r3, [r4, #16]
 8003b38:	e7cb      	b.n	8003ad2 <f_write+0x112>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8003b3a:	2607      	movs	r6, #7
 8003b3c:	e775      	b.n	8003a2a <f_write+0x6a>

08003b3e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8003b3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8003b40:	a901      	add	r1, sp, #4
{
 8003b42:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8003b44:	f7fe fc28 	bl	8002398 <validate>
	if (res == FR_OK) {
 8003b48:	4605      	mov	r5, r0
 8003b4a:	2800      	cmp	r0, #0
 8003b4c:	d13a      	bne.n	8003bc4 <f_sync+0x86>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8003b4e:	7c23      	ldrb	r3, [r4, #16]
 8003b50:	065a      	lsls	r2, r3, #25
 8003b52:	d537      	bpl.n	8003bc4 <f_sync+0x86>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8003b54:	061b      	lsls	r3, r3, #24
 8003b56:	d50c      	bpl.n	8003b72 <f_sync+0x34>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8003b58:	9801      	ldr	r0, [sp, #4]
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	69e2      	ldr	r2, [r4, #28]
 8003b5e:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8003b62:	7840      	ldrb	r0, [r0, #1]
 8003b64:	f7fe fa4a 	bl	8001ffc <disk_write>
 8003b68:	bb78      	cbnz	r0, 8003bca <f_sync+0x8c>
				fp->flag &= (BYTE)~FA_DIRTY;
 8003b6a:	7c23      	ldrb	r3, [r4, #16]
 8003b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b70:	7423      	strb	r3, [r4, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8003b72:	f7fc fb53 	bl	800021c <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8003b76:	6a21      	ldr	r1, [r4, #32]
			tm = GET_FATTIME();				/* Modified time */
 8003b78:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 8003b7a:	9801      	ldr	r0, [sp, #4]
 8003b7c:	f7fe fc7b 	bl	8002476 <move_window>
				if (res == FR_OK) {
 8003b80:	4605      	mov	r5, r0
 8003b82:	b9f8      	cbnz	r0, 8003bc4 <f_sync+0x86>
					dir = fp->dir_ptr;
 8003b84:	6a66      	ldr	r6, [r4, #36]	; 0x24
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8003b86:	7af3      	ldrb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 8003b88:	4631      	mov	r1, r6
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8003b8a:	f043 0320 	orr.w	r3, r3, #32
 8003b8e:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 8003b90:	68a2      	ldr	r2, [r4, #8]
 8003b92:	6820      	ldr	r0, [r4, #0]
 8003b94:	f7fe fc41 	bl	800241a <st_clust.isra.4>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8003b98:	68e1      	ldr	r1, [r4, #12]
 8003b9a:	f106 001c 	add.w	r0, r6, #28
 8003b9e:	f7fe fba5 	bl	80022ec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8003ba2:	4639      	mov	r1, r7
 8003ba4:	f106 0016 	add.w	r0, r6, #22
 8003ba8:	f7fe fba0 	bl	80022ec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 8003bac:	2301      	movs	r3, #1
 8003bae:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8003bb0:	74b5      	strb	r5, [r6, #18]
	*ptr++ = (BYTE)val;
 8003bb2:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 8003bb4:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8003bb6:	f7ff fb7f 	bl	80032b8 <sync_fs>
 8003bba:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8003bbc:	7c23      	ldrb	r3, [r4, #16]
 8003bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bc2:	7423      	strb	r3, [r4, #16]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8003bc4:	4628      	mov	r0, r5
 8003bc6:	b003      	add	sp, #12
 8003bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8003bca:	2501      	movs	r5, #1
 8003bcc:	e7fa      	b.n	8003bc4 <f_sync+0x86>

08003bce <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8003bce:	b513      	push	{r0, r1, r4, lr}
 8003bd0:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8003bd2:	f7ff ffb4 	bl	8003b3e <f_sync>
	if (res == FR_OK)
 8003bd6:	b928      	cbnz	r0, 8003be4 <f_close+0x16>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8003bd8:	a901      	add	r1, sp, #4
 8003bda:	4620      	mov	r0, r4
 8003bdc:	f7fe fbdc 	bl	8002398 <validate>
		if (res == FR_OK) {
 8003be0:	b900      	cbnz	r0, 8003be4 <f_close+0x16>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 8003be2:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8003be4:	b002      	add	sp, #8
 8003be6:	bd10      	pop	{r4, pc}

08003be8 <f_chdrive>:
/*-----------------------------------------------------------------------*/

FRESULT f_chdrive (
	const TCHAR* path		/* Drive number to set */
)
{
 8003be8:	b507      	push	{r0, r1, r2, lr}
 8003bea:	ab02      	add	r3, sp, #8
 8003bec:	f843 0d04 	str.w	r0, [r3, #-4]!
	int vol;


	/* Get logical drive number */
	vol = get_ldnumber(&path);
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7fe fbb1 	bl	8002358 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003bf6:	2800      	cmp	r0, #0
	CurrVol = (BYTE)vol;	/* Set it as current volume */
 8003bf8:	bfa9      	itett	ge
 8003bfa:	4b03      	ldrge	r3, [pc, #12]	; (8003c08 <f_chdrive+0x20>)
	if (vol < 0) return FR_INVALID_DRIVE;
 8003bfc:	200b      	movlt	r0, #11
	CurrVol = (BYTE)vol;	/* Set it as current volume */
 8003bfe:	7018      	strbge	r0, [r3, #0]

	return FR_OK;
 8003c00:	2000      	movge	r0, #0
}
 8003c02:	b003      	add	sp, #12
 8003c04:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c08:	20000128 	.word	0x20000128

08003c0c <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8003c0c:	b530      	push	{r4, r5, lr}
 8003c0e:	b091      	sub	sp, #68	; 0x44
 8003c10:	9001      	str	r0, [sp, #4]
	FATFS *fs;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8003c12:	2200      	movs	r2, #0
 8003c14:	a903      	add	r1, sp, #12
 8003c16:	a801      	add	r0, sp, #4
 8003c18:	f7fe fc80 	bl	800251c <find_volume>
	if (res == FR_OK) {
 8003c1c:	4604      	mov	r4, r0
 8003c1e:	b978      	cbnz	r0, 8003c40 <f_chdir+0x34>
		dj.obj.fs = fs;
 8003c20:	9b03      	ldr	r3, [sp, #12]
 8003c22:	a810      	add	r0, sp, #64	; 0x40
 8003c24:	f840 3d30 	str.w	r3, [r0, #-48]!
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8003c28:	9901      	ldr	r1, [sp, #4]
 8003c2a:	f7ff fb90 	bl	800334e <follow_path>
		if (res == FR_OK) {					/* Follow completed */
 8003c2e:	4604      	mov	r4, r0
 8003c30:	b9a0      	cbnz	r0, 8003c5c <f_chdir+0x50>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Is it the start directory itself? */
 8003c32:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	da05      	bge.n	8003c46 <f_chdir+0x3a>
				fs->cdir = dj.obj.sclust;
 8003c3a:	9b03      	ldr	r3, [sp, #12]
 8003c3c:	9a06      	ldr	r2, [sp, #24]
 8003c3e:	619a      	str	r2, [r3, #24]
		}
#endif
	}

	LEAVE_FF(fs, res);
}
 8003c40:	4620      	mov	r0, r4
 8003c42:	b011      	add	sp, #68	; 0x44
 8003c44:	bd30      	pop	{r4, r5, pc}
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8003c46:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8003c4a:	06db      	lsls	r3, r3, #27
 8003c4c:	d50a      	bpl.n	8003c64 <f_chdir+0x58>
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8003c4e:	9d03      	ldr	r5, [sp, #12]
 8003c50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003c52:	7828      	ldrb	r0, [r5, #0]
 8003c54:	f7fe fbd3 	bl	80023fe <ld_clust.isra.3>
 8003c58:	61a8      	str	r0, [r5, #24]
 8003c5a:	e7f1      	b.n	8003c40 <f_chdir+0x34>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8003c5c:	2804      	cmp	r0, #4
					res = FR_NO_PATH;		/* Reached but a file */
 8003c5e:	bf08      	it	eq
 8003c60:	2405      	moveq	r4, #5
 8003c62:	e7ed      	b.n	8003c40 <f_chdir+0x34>
 8003c64:	2405      	movs	r4, #5
 8003c66:	e7eb      	b.n	8003c40 <f_chdir+0x34>

08003c68 <f_getcwd>:
#if FF_FS_RPATH >= 2
FRESULT f_getcwd (
	TCHAR* buff,	/* Pointer to the directory path */
	UINT len		/* Size of buff in unit of TCHAR */
)
{
 8003c68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c6c:	b0b7      	sub	sp, #220	; 0xdc
 8003c6e:	9001      	str	r0, [sp, #4]
 8003c70:	4688      	mov	r8, r1
	FRESULT res;
	DIR dj;
	FATFS *fs;
	UINT i, n;
	DWORD ccl;
	TCHAR *tp = buff;
 8003c72:	4607      	mov	r7, r0
	FILINFO fno;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume((const TCHAR**)&buff, &fs, 0);	/* Get current volume */
 8003c74:	2200      	movs	r2, #0
 8003c76:	a903      	add	r1, sp, #12
 8003c78:	a801      	add	r0, sp, #4
 8003c7a:	f7fe fc4f 	bl	800251c <find_volume>
	if (res == FR_OK) {
 8003c7e:	4606      	mov	r6, r0
 8003c80:	b9b0      	cbnz	r0, 8003cb0 <f_getcwd+0x48>

		/* Follow parent directories and create the path */
		i = len;			/* Bottom of buffer (directory stack base) */
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* (Cannot do getcwd on exFAT and returns root path) */
			dj.obj.sclust = fs->cdir;				/* Start to follow upper directory from current directory */
			while ((ccl = dj.obj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
 8003c82:	4645      	mov	r5, r8
		dj.obj.fs = fs;
 8003c84:	9b03      	ldr	r3, [sp, #12]
 8003c86:	9304      	str	r3, [sp, #16]
			dj.obj.sclust = fs->cdir;				/* Start to follow upper directory from current directory */
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	9306      	str	r3, [sp, #24]
			while ((ccl = dj.obj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
 8003c8c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8003c90:	f1b9 0f00 	cmp.w	r9, #0
 8003c94:	d112      	bne.n	8003cbc <f_getcwd+0x54>
				while (n) buff[--i] = fno.fname[--n];	/* Stack the name */
				buff[--i] = '/';
			}
		}
		if (res == FR_OK) {
			if (i == len) buff[--i] = '/';	/* Is it the root-directory? */
 8003c96:	4545      	cmp	r5, r8
 8003c98:	d103      	bne.n	8003ca2 <f_getcwd+0x3a>
 8003c9a:	222f      	movs	r2, #47	; 0x2f
 8003c9c:	9b01      	ldr	r3, [sp, #4]
 8003c9e:	3d01      	subs	r5, #1
 8003ca0:	555a      	strb	r2, [r3, r5]
#endif
			if (vl == 0) res = FR_NOT_ENOUGH_CORE;
#endif
			/* Add current directory path */
			if (res == FR_OK) {
				do *tp++ = buff[i++]; while (i < len);	/* Copy stacked path string */
 8003ca2:	9b01      	ldr	r3, [sp, #4]
 8003ca4:	5d5b      	ldrb	r3, [r3, r5]
 8003ca6:	3501      	adds	r5, #1
 8003ca8:	45a8      	cmp	r8, r5
 8003caa:	f807 3b01 	strb.w	r3, [r7], #1
 8003cae:	d8f8      	bhi.n	8003ca2 <f_getcwd+0x3a>
			}
		}
		FREE_NAMBUF();
	}

	*tp = 0;
 8003cb0:	2300      	movs	r3, #0
	LEAVE_FF(fs, res);
}
 8003cb2:	4630      	mov	r0, r6
	*tp = 0;
 8003cb4:	703b      	strb	r3, [r7, #0]
}
 8003cb6:	b037      	add	sp, #220	; 0xdc
 8003cb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				res = dir_sdi(&dj, 1 * SZDIRE);	/* Get parent directory */
 8003cbc:	2120      	movs	r1, #32
 8003cbe:	a804      	add	r0, sp, #16
 8003cc0:	f7fe fe54 	bl	800296c <dir_sdi>
				if (res != FR_OK) break;
 8003cc4:	2800      	cmp	r0, #0
 8003cc6:	d150      	bne.n	8003d6a <f_getcwd+0x102>
				res = move_window(fs, dj.sect);
 8003cc8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003cca:	9803      	ldr	r0, [sp, #12]
 8003ccc:	f7fe fbd3 	bl	8002476 <move_window>
				if (res != FR_OK) break;
 8003cd0:	4604      	mov	r4, r0
 8003cd2:	2800      	cmp	r0, #0
 8003cd4:	d147      	bne.n	8003d66 <f_getcwd+0xfe>
				dj.obj.sclust = ld_clust(fs, dj.dir);	/* Goto parent directory */
 8003cd6:	9b03      	ldr	r3, [sp, #12]
 8003cd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003cda:	7818      	ldrb	r0, [r3, #0]
 8003cdc:	f7fe fb8f 	bl	80023fe <ld_clust.isra.3>
				res = dir_sdi(&dj, 0);
 8003ce0:	4621      	mov	r1, r4
				dj.obj.sclust = ld_clust(fs, dj.dir);	/* Goto parent directory */
 8003ce2:	9006      	str	r0, [sp, #24]
				res = dir_sdi(&dj, 0);
 8003ce4:	a804      	add	r0, sp, #16
 8003ce6:	f7fe fe41 	bl	800296c <dir_sdi>
				if (res != FR_OK) break;
 8003cea:	2800      	cmp	r0, #0
 8003cec:	d13d      	bne.n	8003d6a <f_getcwd+0x102>
					res = dir_read_file(&dj);
 8003cee:	2100      	movs	r1, #0
 8003cf0:	a804      	add	r0, sp, #16
 8003cf2:	f7fe ffc6 	bl	8002c82 <dir_read>
					if (res != FR_OK) break;
 8003cf6:	4604      	mov	r4, r0
 8003cf8:	b968      	cbnz	r0, 8003d16 <f_getcwd+0xae>
					if (ccl == ld_clust(fs, dj.dir)) break;	/* Found the entry */
 8003cfa:	9b03      	ldr	r3, [sp, #12]
 8003cfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003cfe:	7818      	ldrb	r0, [r3, #0]
 8003d00:	f7fe fb7d 	bl	80023fe <ld_clust.isra.3>
 8003d04:	4548      	cmp	r0, r9
 8003d06:	d00b      	beq.n	8003d20 <f_getcwd+0xb8>
					res = dir_next(&dj, 0);
 8003d08:	4621      	mov	r1, r4
 8003d0a:	a804      	add	r0, sp, #16
 8003d0c:	f7fe ff44 	bl	8002b98 <dir_next>
				} while (res == FR_OK);
 8003d10:	4604      	mov	r4, r0
 8003d12:	2800      	cmp	r0, #0
 8003d14:	d0eb      	beq.n	8003cee <f_getcwd+0x86>
				if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
 8003d16:	2c04      	cmp	r4, #4
 8003d18:	bf14      	ite	ne
 8003d1a:	4626      	movne	r6, r4
 8003d1c:	2602      	moveq	r6, #2
 8003d1e:	e7c7      	b.n	8003cb0 <f_getcwd+0x48>
				get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
 8003d20:	a910      	add	r1, sp, #64	; 0x40
 8003d22:	a804      	add	r0, sp, #16
 8003d24:	f7ff fa26 	bl	8003174 <get_fileinfo>
				for (n = 0; fno.fname[n]; n++) ;	/* Name length */
 8003d28:	aa10      	add	r2, sp, #64	; 0x40
 8003d2a:	4422      	add	r2, r4
 8003d2c:	7d92      	ldrb	r2, [r2, #22]
 8003d2e:	1c63      	adds	r3, r4, #1
 8003d30:	b992      	cbnz	r2, 8003d58 <f_getcwd+0xf0>
				if (i < n + 1) {	/* Insufficient space to store the path name? */
 8003d32:	429d      	cmp	r5, r3
 8003d34:	d31b      	bcc.n	8003d6e <f_getcwd+0x106>
 8003d36:	1e63      	subs	r3, r4, #1
 8003d38:	eba5 0c04 	sub.w	ip, r5, r4
 8003d3c:	eb0c 0203 	add.w	r2, ip, r3
 8003d40:	9901      	ldr	r1, [sp, #4]
 8003d42:	3b01      	subs	r3, #1
				while (n) buff[--i] = fno.fname[--n];	/* Stack the name */
 8003d44:	f113 0f02 	cmn.w	r3, #2
 8003d48:	eb01 0002 	add.w	r0, r1, r2
 8003d4c:	d106      	bne.n	8003d5c <f_getcwd+0xf4>
 8003d4e:	43e4      	mvns	r4, r4
				buff[--i] = '/';
 8003d50:	232f      	movs	r3, #47	; 0x2f
 8003d52:	4425      	add	r5, r4
 8003d54:	7003      	strb	r3, [r0, #0]
 8003d56:	e799      	b.n	8003c8c <f_getcwd+0x24>
 8003d58:	461c      	mov	r4, r3
 8003d5a:	e7e5      	b.n	8003d28 <f_getcwd+0xc0>
				while (n) buff[--i] = fno.fname[--n];	/* Stack the name */
 8003d5c:	a810      	add	r0, sp, #64	; 0x40
 8003d5e:	4418      	add	r0, r3
 8003d60:	7dc0      	ldrb	r0, [r0, #23]
 8003d62:	5488      	strb	r0, [r1, r2]
 8003d64:	e7ea      	b.n	8003d3c <f_getcwd+0xd4>
				res = move_window(fs, dj.sect);
 8003d66:	4606      	mov	r6, r0
 8003d68:	e7a2      	b.n	8003cb0 <f_getcwd+0x48>
				res = dir_sdi(&dj, 0);
 8003d6a:	4606      	mov	r6, r0
 8003d6c:	e7a0      	b.n	8003cb0 <f_getcwd+0x48>
					res = FR_NOT_ENOUGH_CORE; break;
 8003d6e:	2611      	movs	r6, #17
 8003d70:	e79e      	b.n	8003cb0 <f_getcwd+0x48>

08003d72 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8003d72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d74:	460d      	mov	r5, r1
	FSIZE_t ifptr;
#if FF_USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8003d76:	a901      	add	r1, sp, #4
{
 8003d78:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8003d7a:	f7fe fb0d 	bl	8002398 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 8003d7e:	4606      	mov	r6, r0
 8003d80:	2800      	cmp	r0, #0
 8003d82:	d159      	bne.n	8003e38 <f_lseek+0xc6>
 8003d84:	7c66      	ldrb	r6, [r4, #17]
#if FF_FS_EXFAT && !FF_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8003d86:	2e00      	cmp	r6, #0
 8003d88:	d156      	bne.n	8003e38 <f_lseek+0xc6>
	/* Normal Seek */
	{
#if FF_FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8003d8a:	68e3      	ldr	r3, [r4, #12]
 8003d8c:	42ab      	cmp	r3, r5
 8003d8e:	d204      	bcs.n	8003d9a <f_lseek+0x28>
 8003d90:	7c22      	ldrb	r2, [r4, #16]
 8003d92:	f012 0f02 	tst.w	r2, #2
 8003d96:	bf08      	it	eq
 8003d98:	461d      	moveq	r5, r3
			ofs = fp->obj.objsize;
		}
		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
 8003d9a:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 8003d9c:	6963      	ldr	r3, [r4, #20]
		fp->fptr = nsect = 0;
 8003d9e:	6162      	str	r2, [r4, #20]
		if (ofs > 0) {
 8003da0:	b90d      	cbnz	r5, 8003da6 <f_lseek+0x34>
		fp->fptr = nsect = 0;
 8003da2:	462f      	mov	r7, r5
 8003da4:	e01d      	b.n	8003de2 <f_lseek+0x70>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8003da6:	9a01      	ldr	r2, [sp, #4]
 8003da8:	8957      	ldrh	r7, [r2, #10]
 8003daa:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d039      	beq.n	8003e24 <f_lseek+0xb2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8003db0:	3b01      	subs	r3, #1
 8003db2:	1e6a      	subs	r2, r5, #1
 8003db4:	fbb2 f2f7 	udiv	r2, r2, r7
 8003db8:	fbb3 f1f7 	udiv	r1, r3, r7
			if (ifptr > 0 &&
 8003dbc:	428a      	cmp	r2, r1
 8003dbe:	d331      	bcc.n	8003e24 <f_lseek+0xb2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8003dc0:	427a      	negs	r2, r7
 8003dc2:	4013      	ands	r3, r2
				ofs -= fp->fptr;
				clst = fp->clust;
 8003dc4:	69a1      	ldr	r1, [r4, #24]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8003dc6:	6163      	str	r3, [r4, #20]
				ofs -= fp->fptr;
 8003dc8:	1aed      	subs	r5, r5, r3
					fp->obj.sclust = clst;
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
 8003dca:	2900      	cmp	r1, #0
 8003dcc:	d158      	bne.n	8003e80 <f_lseek+0x10e>
		fp->fptr = nsect = 0;
 8003dce:	2700      	movs	r7, #0
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
					nsect += (DWORD)(ofs / SS(fs));
				}
			}
		}
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
 8003dd0:	68e3      	ldr	r3, [r4, #12]
 8003dd2:	6965      	ldr	r5, [r4, #20]
 8003dd4:	429d      	cmp	r5, r3
			fp->obj.objsize = fp->fptr;
			fp->flag |= FA_MODIFIED;
 8003dd6:	bf81      	itttt	hi
 8003dd8:	7c23      	ldrbhi	r3, [r4, #16]
			fp->obj.objsize = fp->fptr;
 8003dda:	60e5      	strhi	r5, [r4, #12]
			fp->flag |= FA_MODIFIED;
 8003ddc:	f043 0340 	orrhi.w	r3, r3, #64	; 0x40
 8003de0:	7423      	strbhi	r3, [r4, #16]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8003de2:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8003de6:	b33d      	cbz	r5, 8003e38 <f_lseek+0xc6>
 8003de8:	69e2      	ldr	r2, [r4, #28]
 8003dea:	4297      	cmp	r7, r2
 8003dec:	d024      	beq.n	8003e38 <f_lseek+0xc6>
#if !FF_FS_TINY
#if !FF_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8003dee:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8003df2:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	da0a      	bge.n	8003e10 <f_lseek+0x9e>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003dfa:	9801      	ldr	r0, [sp, #4]
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	4629      	mov	r1, r5
 8003e00:	7840      	ldrb	r0, [r0, #1]
 8003e02:	f7fe f8fb 	bl	8001ffc <disk_write>
 8003e06:	b9e0      	cbnz	r0, 8003e42 <f_lseek+0xd0>
				fp->flag &= (BYTE)~FA_DIRTY;
 8003e08:	7c23      	ldrb	r3, [r4, #16]
 8003e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e0e:	7423      	strb	r3, [r4, #16]
			}
#endif
			if (disk_read(fs->pdrv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8003e10:	9801      	ldr	r0, [sp, #4]
 8003e12:	2301      	movs	r3, #1
 8003e14:	463a      	mov	r2, r7
 8003e16:	4629      	mov	r1, r5
 8003e18:	7840      	ldrb	r0, [r0, #1]
 8003e1a:	f7fe f8af 	bl	8001f7c <disk_read>
 8003e1e:	b980      	cbnz	r0, 8003e42 <f_lseek+0xd0>
#endif
			fp->sect = nsect;
 8003e20:	61e7      	str	r7, [r4, #28]
 8003e22:	e009      	b.n	8003e38 <f_lseek+0xc6>
				clst = fp->obj.sclust;					/* start from the first cluster */
 8003e24:	68a1      	ldr	r1, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8003e26:	b979      	cbnz	r1, 8003e48 <f_lseek+0xd6>
					clst = create_chain(&fp->obj, 0);
 8003e28:	4620      	mov	r0, r4
 8003e2a:	f7fe fde1 	bl	80029f0 <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8003e2e:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 8003e30:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8003e32:	d104      	bne.n	8003e3e <f_lseek+0xcc>
 8003e34:	2602      	movs	r6, #2
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003e36:	7466      	strb	r6, [r4, #17]
		}
	}

	LEAVE_FF(fs, res);
}
 8003e38:	4630      	mov	r0, r6
 8003e3a:	b003      	add	sp, #12
 8003e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003e3e:	3001      	adds	r0, #1
 8003e40:	d101      	bne.n	8003e46 <f_lseek+0xd4>
 8003e42:	2601      	movs	r6, #1
 8003e44:	e7f7      	b.n	8003e36 <f_lseek+0xc4>
					fp->obj.sclust = clst;
 8003e46:	60a1      	str	r1, [r4, #8]
				fp->clust = clst;
 8003e48:	61a1      	str	r1, [r4, #24]
 8003e4a:	e7be      	b.n	8003dca <f_lseek+0x58>
					ofs -= bcs; fp->fptr += bcs;
 8003e4c:	443b      	add	r3, r7
 8003e4e:	6163      	str	r3, [r4, #20]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8003e50:	7c23      	ldrb	r3, [r4, #16]
					ofs -= bcs; fp->fptr += bcs;
 8003e52:	1bed      	subs	r5, r5, r7
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8003e54:	079a      	lsls	r2, r3, #30
 8003e56:	d506      	bpl.n	8003e66 <f_lseek+0xf4>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8003e58:	4620      	mov	r0, r4
 8003e5a:	f7fe fdc9 	bl	80029f0 <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 8003e5e:	4601      	mov	r1, r0
 8003e60:	b928      	cbnz	r0, 8003e6e <f_lseek+0xfc>
							ofs = 0; break;
 8003e62:	4605      	mov	r5, r0
 8003e64:	e00f      	b.n	8003e86 <f_lseek+0x114>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8003e66:	6820      	ldr	r0, [r4, #0]
 8003e68:	f7fe fd26 	bl	80028b8 <get_fat.isra.9>
 8003e6c:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003e6e:	1c4b      	adds	r3, r1, #1
 8003e70:	d0e7      	beq.n	8003e42 <f_lseek+0xd0>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8003e72:	2901      	cmp	r1, #1
 8003e74:	d9de      	bls.n	8003e34 <f_lseek+0xc2>
 8003e76:	9b01      	ldr	r3, [sp, #4]
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	428b      	cmp	r3, r1
 8003e7c:	d9da      	bls.n	8003e34 <f_lseek+0xc2>
					fp->clust = clst;
 8003e7e:	61a1      	str	r1, [r4, #24]
				while (ofs > bcs) {						/* Cluster following loop */
 8003e80:	42bd      	cmp	r5, r7
 8003e82:	6963      	ldr	r3, [r4, #20]
 8003e84:	d8e2      	bhi.n	8003e4c <f_lseek+0xda>
				fp->fptr += ofs;
 8003e86:	6963      	ldr	r3, [r4, #20]
 8003e88:	442b      	add	r3, r5
 8003e8a:	6163      	str	r3, [r4, #20]
				if (ofs % SS(fs)) {
 8003e8c:	f3c5 0308 	ubfx	r3, r5, #0, #9
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d09c      	beq.n	8003dce <f_lseek+0x5c>
					nsect = clst2sect(fs, clst);	/* Current sector */
 8003e94:	9801      	ldr	r0, [sp, #4]
 8003e96:	f7fe fa45 	bl	8002324 <clst2sect>
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
 8003e9a:	2800      	cmp	r0, #0
 8003e9c:	d0ca      	beq.n	8003e34 <f_lseek+0xc2>
					nsect += (DWORD)(ofs / SS(fs));
 8003e9e:	eb00 2755 	add.w	r7, r0, r5, lsr #9
 8003ea2:	e795      	b.n	8003dd0 <f_lseek+0x5e>

08003ea4 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8003ea4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8003ea6:	4604      	mov	r4, r0
{
 8003ea8:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 8003eaa:	b350      	cbz	r0, 8003f02 <f_opendir+0x5e>

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8003eac:	2200      	movs	r2, #0
 8003eae:	a903      	add	r1, sp, #12
 8003eb0:	a801      	add	r0, sp, #4
 8003eb2:	f7fe fb33 	bl	800251c <find_volume>
	if (res == FR_OK) {
 8003eb6:	b970      	cbnz	r0, 8003ed6 <f_opendir+0x32>
		dp->obj.fs = fs;
 8003eb8:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8003eba:	9901      	ldr	r1, [sp, #4]
		dp->obj.fs = fs;
 8003ebc:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	f7ff fa45 	bl	800334e <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 8003ec4:	b9f8      	cbnz	r0, 8003f06 <f_opendir+0x62>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8003ec6:	f994 302b 	ldrsb.w	r3, [r4, #43]	; 0x2b
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	db0c      	blt.n	8003ee8 <f_opendir+0x44>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 8003ece:	79a3      	ldrb	r3, [r4, #6]
 8003ed0:	06db      	lsls	r3, r3, #27
 8003ed2:	d403      	bmi.n	8003edc <f_opendir+0x38>
#endif
					{
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8003ed4:	2005      	movs	r0, #5
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	6023      	str	r3, [r4, #0]
 8003eda:	e010      	b.n	8003efe <f_opendir+0x5a>
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8003edc:	9b03      	ldr	r3, [sp, #12]
 8003ede:	69e1      	ldr	r1, [r4, #28]
 8003ee0:	7818      	ldrb	r0, [r3, #0]
 8003ee2:	f7fe fa8c 	bl	80023fe <ld_clust.isra.3>
 8003ee6:	60a0      	str	r0, [r4, #8]
				dp->obj.id = fs->id;
 8003ee8:	9b03      	ldr	r3, [sp, #12]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8003eea:	2100      	movs	r1, #0
				dp->obj.id = fs->id;
 8003eec:	88db      	ldrh	r3, [r3, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8003eee:	4620      	mov	r0, r4
				dp->obj.id = fs->id;
 8003ef0:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8003ef2:	f7fe fd3b 	bl	800296c <dir_sdi>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8003ef6:	2804      	cmp	r0, #4
 8003ef8:	d0ec      	beq.n	8003ed4 <f_opendir+0x30>
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 8003efa:	2800      	cmp	r0, #0
 8003efc:	d1eb      	bne.n	8003ed6 <f_opendir+0x32>

	LEAVE_FF(fs, res);
}
 8003efe:	b004      	add	sp, #16
 8003f00:	bd10      	pop	{r4, pc}
	if (!dp) return FR_INVALID_OBJECT;
 8003f02:	2009      	movs	r0, #9
 8003f04:	e7fb      	b.n	8003efe <f_opendir+0x5a>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8003f06:	2804      	cmp	r0, #4
 8003f08:	d0e4      	beq.n	8003ed4 <f_opendir+0x30>
 8003f0a:	e7e4      	b.n	8003ed6 <f_opendir+0x32>

08003f0c <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8003f0c:	b513      	push	{r0, r1, r4, lr}
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 8003f0e:	a901      	add	r1, sp, #4
{
 8003f10:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 8003f12:	f7fe fa41 	bl	8002398 <validate>
	if (res == FR_OK) {
 8003f16:	b900      	cbnz	r0, 8003f1a <f_closedir+0xe>
#if FF_FS_LOCK != 0
		if (dp->obj.lockid) res = dec_lock(dp->obj.lockid);	/* Decrement sub-directory open counter */
		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
#else
		dp->obj.fs = 0;	/* Invalidate directory object */
 8003f18:	6020      	str	r0, [r4, #0]
#if FF_FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
 8003f1a:	b002      	add	sp, #8
 8003f1c:	bd10      	pop	{r4, pc}

08003f1e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8003f1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f20:	460d      	mov	r5, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8003f22:	a901      	add	r1, sp, #4
{
 8003f24:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8003f26:	f7fe fa37 	bl	8002398 <validate>
	if (res == FR_OK) {
 8003f2a:	b920      	cbnz	r0, 8003f36 <f_readdir+0x18>
		if (!fno) {
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8003f2c:	4601      	mov	r1, r0
 8003f2e:	4620      	mov	r0, r4
		if (!fno) {
 8003f30:	b91d      	cbnz	r5, 8003f3a <f_readdir+0x1c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8003f32:	f7fe fd1b 	bl	800296c <dir_sdi>
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 8003f36:	b002      	add	sp, #8
 8003f38:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_read_file(dp);		/* Read an item */
 8003f3a:	f7fe fea2 	bl	8002c82 <dir_read>
			if (res == FR_OK) {				/* A valid entry is found */
 8003f3e:	f010 06fb 	ands.w	r6, r0, #251	; 0xfb
 8003f42:	d1f8      	bne.n	8003f36 <f_readdir+0x18>
				get_fileinfo(dp, fno);		/* Get the object information */
 8003f44:	4629      	mov	r1, r5
 8003f46:	4620      	mov	r0, r4
 8003f48:	f7ff f914 	bl	8003174 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8003f4c:	4631      	mov	r1, r6
 8003f4e:	4620      	mov	r0, r4
 8003f50:	f7fe fe22 	bl	8002b98 <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8003f54:	2804      	cmp	r0, #4
 8003f56:	bf08      	it	eq
 8003f58:	2000      	moveq	r0, #0
 8003f5a:	e7ec      	b.n	8003f36 <f_readdir+0x18>

08003f5c <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8003f5c:	b530      	push	{r4, r5, lr}
 8003f5e:	b08f      	sub	sp, #60	; 0x3c
 8003f60:	9001      	str	r0, [sp, #4]
 8003f62:	460d      	mov	r5, r1
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8003f64:	2200      	movs	r2, #0
 8003f66:	a902      	add	r1, sp, #8
 8003f68:	a801      	add	r0, sp, #4
 8003f6a:	f7fe fad7 	bl	800251c <find_volume>
	if (res == FR_OK) {
 8003f6e:	4604      	mov	r4, r0
 8003f70:	b970      	cbnz	r0, 8003f90 <f_stat+0x34>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8003f72:	9901      	ldr	r1, [sp, #4]
 8003f74:	a802      	add	r0, sp, #8
 8003f76:	f7ff f9ea 	bl	800334e <follow_path>
		if (res == FR_OK) {				/* Follow completed */
 8003f7a:	4604      	mov	r4, r0
 8003f7c:	b940      	cbnz	r0, 8003f90 <f_stat+0x34>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8003f7e:	f99d 3033 	ldrsb.w	r3, [sp, #51]	; 0x33
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	db07      	blt.n	8003f96 <f_stat+0x3a>
				res = FR_INVALID_NAME;
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8003f86:	b11d      	cbz	r5, 8003f90 <f_stat+0x34>
 8003f88:	4629      	mov	r1, r5
 8003f8a:	a802      	add	r0, sp, #8
 8003f8c:	f7ff f8f2 	bl	8003174 <get_fileinfo>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
}
 8003f90:	4620      	mov	r0, r4
 8003f92:	b00f      	add	sp, #60	; 0x3c
 8003f94:	bd30      	pop	{r4, r5, pc}
				res = FR_INVALID_NAME;
 8003f96:	2406      	movs	r4, #6
 8003f98:	e7fa      	b.n	8003f90 <f_stat+0x34>

08003f9a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding filesystem object */
)
{
 8003f9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	9001      	str	r0, [sp, #4]
 8003fa2:	4688      	mov	r8, r1
 8003fa4:	4614      	mov	r4, r2
	UINT i;
	FFOBJID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8003fa6:	a903      	add	r1, sp, #12
 8003fa8:	2200      	movs	r2, #0
 8003faa:	a801      	add	r0, sp, #4
 8003fac:	f7fe fab6 	bl	800251c <find_volume>
	if (res == FR_OK) {
 8003fb0:	4606      	mov	r6, r0
 8003fb2:	b940      	cbnz	r0, 8003fc6 <f_getfree+0x2c>
		*fatfs = fs;				/* Return ptr to the fs object */
 8003fb4:	9d03      	ldr	r5, [sp, #12]
		/* If free_clst is valid, return it without full FAT scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8003fb6:	69ef      	ldr	r7, [r5, #28]
 8003fb8:	696b      	ldr	r3, [r5, #20]
 8003fba:	1eba      	subs	r2, r7, #2
 8003fbc:	4293      	cmp	r3, r2
		*fatfs = fs;				/* Return ptr to the fs object */
 8003fbe:	6025      	str	r5, [r4, #0]
		if (fs->free_clst <= fs->n_fatent - 2) {
 8003fc0:	d805      	bhi.n	8003fce <f_getfree+0x34>
			*nclst = fs->free_clst;
 8003fc2:	f8c8 3000 	str.w	r3, [r8]
			fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
		}
	}

	LEAVE_FF(fs, res);
}
 8003fc6:	4630      	mov	r0, r6
 8003fc8:	b005      	add	sp, #20
 8003fca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
 8003fce:	782b      	ldrb	r3, [r5, #0]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d119      	bne.n	8004008 <f_getfree+0x6e>
				clst = 2; obj.fs = fs;
 8003fd4:	2702      	movs	r7, #2
			nfree = 0;
 8003fd6:	4604      	mov	r4, r0
					stat = get_fat(&obj, clst);
 8003fd8:	4639      	mov	r1, r7
 8003fda:	4628      	mov	r0, r5
 8003fdc:	f7fe fc6c 	bl	80028b8 <get_fat.isra.9>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8003fe0:	1c43      	adds	r3, r0, #1
 8003fe2:	d037      	beq.n	8004054 <f_getfree+0xba>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8003fe4:	2801      	cmp	r0, #1
 8003fe6:	d037      	beq.n	8004058 <f_getfree+0xbe>
					if (stat == 0) nfree++;
 8003fe8:	b900      	cbnz	r0, 8003fec <f_getfree+0x52>
 8003fea:	3401      	adds	r4, #1
				} while (++clst < fs->n_fatent);
 8003fec:	9b03      	ldr	r3, [sp, #12]
 8003fee:	3701      	adds	r7, #1
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	42bb      	cmp	r3, r7
 8003ff4:	d8f0      	bhi.n	8003fd8 <f_getfree+0x3e>
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8003ff6:	9b03      	ldr	r3, [sp, #12]
			*nclst = nfree;			/* Return the free clusters */
 8003ff8:	f8c8 4000 	str.w	r4, [r8]
			fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 8003ffc:	791a      	ldrb	r2, [r3, #4]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8003ffe:	615c      	str	r4, [r3, #20]
			fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 8004000:	f042 0201 	orr.w	r2, r2, #1
 8004004:	711a      	strb	r2, [r3, #4]
 8004006:	e7de      	b.n	8003fc6 <f_getfree+0x2c>
					sect = fs->fatbase;		/* Top of the FAT */
 8004008:	6aa9      	ldr	r1, [r5, #40]	; 0x28
			nfree = 0;
 800400a:	4604      	mov	r4, r0
					i = 0;					/* Offset in the sector */
 800400c:	4605      	mov	r5, r0
						if (i == 0) {
 800400e:	b935      	cbnz	r5, 800401e <f_getfree+0x84>
							res = move_window(fs, sect++);
 8004010:	9803      	ldr	r0, [sp, #12]
 8004012:	f101 0901 	add.w	r9, r1, #1
 8004016:	f7fe fa2e 	bl	8002476 <move_window>
							if (res != FR_OK) break;
 800401a:	b9f8      	cbnz	r0, 800405c <f_getfree+0xc2>
							res = move_window(fs, sect++);
 800401c:	4649      	mov	r1, r9
						if (fs->fs_type == FS_FAT16) {
 800401e:	9a03      	ldr	r2, [sp, #12]
 8004020:	f102 0338 	add.w	r3, r2, #56	; 0x38
 8004024:	7812      	ldrb	r2, [r2, #0]
 8004026:	1958      	adds	r0, r3, r5
 8004028:	2a02      	cmp	r2, #2
 800402a:	d10b      	bne.n	8004044 <f_getfree+0xaa>
	rv = rv << 8 | ptr[0];
 800402c:	5d5b      	ldrb	r3, [r3, r5]
 800402e:	7842      	ldrb	r2, [r0, #1]
							i += 2;
 8004030:	3502      	adds	r5, #2
							if (ld_word(fs->win + i) == 0) nfree++;
 8004032:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8004036:	bf08      	it	eq
 8004038:	3401      	addeq	r4, #1
					} while (--clst);
 800403a:	3f01      	subs	r7, #1
						i %= SS(fs);
 800403c:	f3c5 0508 	ubfx	r5, r5, #0, #9
					} while (--clst);
 8004040:	d1e5      	bne.n	800400e <f_getfree+0x74>
 8004042:	e7d8      	b.n	8003ff6 <f_getfree+0x5c>
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
 8004044:	f7fe f94a 	bl	80022dc <ld_dword>
 8004048:	f030 4370 	bics.w	r3, r0, #4026531840	; 0xf0000000
 800404c:	bf08      	it	eq
 800404e:	3401      	addeq	r4, #1
							i += 4;
 8004050:	3504      	adds	r5, #4
 8004052:	e7f2      	b.n	800403a <f_getfree+0xa0>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8004054:	2601      	movs	r6, #1
 8004056:	e7ce      	b.n	8003ff6 <f_getfree+0x5c>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8004058:	2602      	movs	r6, #2
 800405a:	e7cc      	b.n	8003ff6 <f_getfree+0x5c>
							res = move_window(fs, sect++);
 800405c:	4606      	mov	r6, r0
 800405e:	e7ca      	b.n	8003ff6 <f_getfree+0x5c>

08004060 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL* fp		/* Pointer to the file object */
)
{
 8004060:	b573      	push	{r0, r1, r4, r5, r6, lr}
	FRESULT res;
	FATFS *fs;
	DWORD ncl;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8004062:	a901      	add	r1, sp, #4
{
 8004064:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8004066:	f7fe f997 	bl	8002398 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
 800406a:	4605      	mov	r5, r0
 800406c:	bb38      	cbnz	r0, 80040be <f_truncate+0x5e>
 800406e:	7c65      	ldrb	r5, [r4, #17]
 8004070:	bb2d      	cbnz	r5, 80040be <f_truncate+0x5e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8004072:	7c23      	ldrb	r3, [r4, #16]
 8004074:	0799      	lsls	r1, r3, #30
 8004076:	d541      	bpl.n	80040fc <f_truncate+0x9c>

	if (fp->fptr < fp->obj.objsize) {	/* Process when fptr is not on the eof */
 8004078:	6963      	ldr	r3, [r4, #20]
 800407a:	68e2      	ldr	r2, [r4, #12]
 800407c:	4293      	cmp	r3, r2
 800407e:	d21e      	bcs.n	80040be <f_truncate+0x5e>
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 8004080:	bb03      	cbnz	r3, 80040c4 <f_truncate+0x64>
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8004082:	462a      	mov	r2, r5
 8004084:	68a1      	ldr	r1, [r4, #8]
 8004086:	4620      	mov	r0, r4
 8004088:	f7fe fd26 	bl	8002ad8 <remove_chain>
 800408c:	4606      	mov	r6, r0
			fp->obj.sclust = 0;
 800408e:	60a5      	str	r5, [r4, #8]
			if (ncl == 1) res = FR_INT_ERR;
			if (res == FR_OK && ncl < fs->n_fatent) {
				res = remove_chain(&fp->obj, ncl, fp->clust);
			}
		}
		fp->obj.objsize = fp->fptr;	/* Set file size to current read/write point */
 8004090:	6963      	ldr	r3, [r4, #20]
 8004092:	60e3      	str	r3, [r4, #12]
		fp->flag |= FA_MODIFIED;
 8004094:	7c23      	ldrb	r3, [r4, #16]
 8004096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800409a:	7423      	strb	r3, [r4, #16]
#if !FF_FS_TINY
		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
 800409c:	bb66      	cbnz	r6, 80040f8 <f_truncate+0x98>
 800409e:	061b      	lsls	r3, r3, #24
 80040a0:	d50d      	bpl.n	80040be <f_truncate+0x5e>
			if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) {
 80040a2:	9801      	ldr	r0, [sp, #4]
 80040a4:	2301      	movs	r3, #1
 80040a6:	69e2      	ldr	r2, [r4, #28]
 80040a8:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80040ac:	7840      	ldrb	r0, [r0, #1]
 80040ae:	f7fd ffa5 	bl	8001ffc <disk_write>
 80040b2:	bb00      	cbnz	r0, 80040f6 <f_truncate+0x96>
				res = FR_DISK_ERR;
			} else {
				fp->flag &= (BYTE)~FA_DIRTY;
 80040b4:	7c23      	ldrb	r3, [r4, #16]
 80040b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040ba:	7423      	strb	r3, [r4, #16]
			}
		}
#endif
		if (res != FR_OK) ABORT(fs, res);
 80040bc:	4635      	mov	r5, r6
	}

	LEAVE_FF(fs, res);
}
 80040be:	4628      	mov	r0, r5
 80040c0:	b002      	add	sp, #8
 80040c2:	bd70      	pop	{r4, r5, r6, pc}
			ncl = get_fat(&fp->obj, fp->clust);
 80040c4:	69a1      	ldr	r1, [r4, #24]
 80040c6:	6820      	ldr	r0, [r4, #0]
 80040c8:	f7fe fbf6 	bl	80028b8 <get_fat.isra.9>
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80040cc:	1c42      	adds	r2, r0, #1
			ncl = get_fat(&fp->obj, fp->clust);
 80040ce:	4601      	mov	r1, r0
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80040d0:	d00b      	beq.n	80040ea <f_truncate+0x8a>
			if (ncl == 1) res = FR_INT_ERR;
 80040d2:	2801      	cmp	r0, #1
 80040d4:	d00b      	beq.n	80040ee <f_truncate+0x8e>
			if (res == FR_OK && ncl < fs->n_fatent) {
 80040d6:	9b01      	ldr	r3, [sp, #4]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	4283      	cmp	r3, r0
 80040dc:	d909      	bls.n	80040f2 <f_truncate+0x92>
				res = remove_chain(&fp->obj, ncl, fp->clust);
 80040de:	69a2      	ldr	r2, [r4, #24]
 80040e0:	4620      	mov	r0, r4
 80040e2:	f7fe fcf9 	bl	8002ad8 <remove_chain>
 80040e6:	4606      	mov	r6, r0
 80040e8:	e7d2      	b.n	8004090 <f_truncate+0x30>
 80040ea:	2601      	movs	r6, #1
 80040ec:	e7d0      	b.n	8004090 <f_truncate+0x30>
			if (ncl == 1) res = FR_INT_ERR;
 80040ee:	2602      	movs	r6, #2
 80040f0:	e7ce      	b.n	8004090 <f_truncate+0x30>
 80040f2:	462e      	mov	r6, r5
 80040f4:	e7cc      	b.n	8004090 <f_truncate+0x30>
				res = FR_DISK_ERR;
 80040f6:	2601      	movs	r6, #1
		if (res != FR_OK) ABORT(fs, res);
 80040f8:	7466      	strb	r6, [r4, #17]
 80040fa:	e7df      	b.n	80040bc <f_truncate+0x5c>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80040fc:	2507      	movs	r5, #7
 80040fe:	e7de      	b.n	80040be <f_truncate+0x5e>

08004100 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8004100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004104:	b09c      	sub	sp, #112	; 0x70
 8004106:	9001      	str	r0, [sp, #4]
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8004108:	2202      	movs	r2, #2
 800410a:	a903      	add	r1, sp, #12
 800410c:	a801      	add	r0, sp, #4
 800410e:	f7fe fa05 	bl	800251c <find_volume>
	if (res == FR_OK) {
 8004112:	4604      	mov	r4, r0
 8004114:	b9a8      	cbnz	r0, 8004142 <f_unlink+0x42>
		dj.obj.fs = fs;
 8004116:	9b03      	ldr	r3, [sp, #12]
 8004118:	ad1c      	add	r5, sp, #112	; 0x70
 800411a:	f845 3d60 	str.w	r3, [r5, #-96]!
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800411e:	9901      	ldr	r1, [sp, #4]
 8004120:	4628      	mov	r0, r5
 8004122:	f7ff f914 	bl	800334e <follow_path>
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8004126:	4604      	mov	r4, r0
 8004128:	b958      	cbnz	r0, 8004142 <f_unlink+0x42>
 800412a:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 800412e:	069a      	lsls	r2, r3, #26
 8004130:	d43f      	bmi.n	80041b2 <f_unlink+0xb2>
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8004132:	061b      	lsls	r3, r3, #24
 8004134:	d43d      	bmi.n	80041b2 <f_unlink+0xb2>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
 8004136:	f89d 8016 	ldrb.w	r8, [sp, #22]
 800413a:	f018 0f01 	tst.w	r8, #1
 800413e:	d004      	beq.n	800414a <f_unlink+0x4a>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8004140:	2407      	movs	r4, #7
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 8004142:	4620      	mov	r0, r4
 8004144:	b01c      	add	sp, #112	; 0x70
 8004146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					dclst = ld_clust(fs, dj.dir);
 800414a:	9f03      	ldr	r7, [sp, #12]
 800414c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800414e:	7838      	ldrb	r0, [r7, #0]
 8004150:	f7fe f955 	bl	80023fe <ld_clust.isra.3>
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8004154:	f018 0f10 	tst.w	r8, #16
					dclst = ld_clust(fs, dj.dir);
 8004158:	4606      	mov	r6, r0
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800415a:	d10b      	bne.n	8004174 <f_unlink+0x74>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800415c:	4628      	mov	r0, r5
 800415e:	f7fe fe25 	bl	8002dac <dir_remove>
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
 8004162:	4604      	mov	r4, r0
 8004164:	2800      	cmp	r0, #0
 8004166:	d1ec      	bne.n	8004142 <f_unlink+0x42>
 8004168:	b9d6      	cbnz	r6, 80041a0 <f_unlink+0xa0>
				if (res == FR_OK) res = sync_fs(fs);
 800416a:	9803      	ldr	r0, [sp, #12]
 800416c:	f7ff f8a4 	bl	80032b8 <sync_fs>
 8004170:	4604      	mov	r4, r0
 8004172:	e7e6      	b.n	8004142 <f_unlink+0x42>
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	4283      	cmp	r3, r0
 8004178:	d0e2      	beq.n	8004140 <f_unlink+0x40>
						sdj.obj.sclust = dclst;
 800417a:	9012      	str	r0, [sp, #72]	; 0x48
						res = dir_sdi(&sdj, 0);
 800417c:	4621      	mov	r1, r4
 800417e:	a810      	add	r0, sp, #64	; 0x40
						sdj.obj.fs = fs;				/* Open the sub-directory */
 8004180:	9710      	str	r7, [sp, #64]	; 0x40
						res = dir_sdi(&sdj, 0);
 8004182:	f7fe fbf3 	bl	800296c <dir_sdi>
						if (res == FR_OK) {
 8004186:	4604      	mov	r4, r0
 8004188:	2800      	cmp	r0, #0
 800418a:	d1da      	bne.n	8004142 <f_unlink+0x42>
							res = dir_read_file(&sdj);			/* Test if the directory is empty */
 800418c:	4601      	mov	r1, r0
 800418e:	a810      	add	r0, sp, #64	; 0x40
 8004190:	f7fe fd77 	bl	8002c82 <dir_read>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8004194:	4604      	mov	r4, r0
 8004196:	2800      	cmp	r0, #0
 8004198:	d0d2      	beq.n	8004140 <f_unlink+0x40>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800419a:	2804      	cmp	r0, #4
 800419c:	d1d1      	bne.n	8004142 <f_unlink+0x42>
 800419e:	e7dd      	b.n	800415c <f_unlink+0x5c>
					res = remove_chain(&dj.obj, dclst, 0);
 80041a0:	4602      	mov	r2, r0
 80041a2:	4631      	mov	r1, r6
 80041a4:	4628      	mov	r0, r5
 80041a6:	f7fe fc97 	bl	8002ad8 <remove_chain>
				if (res == FR_OK) res = sync_fs(fs);
 80041aa:	4604      	mov	r4, r0
 80041ac:	2800      	cmp	r0, #0
 80041ae:	d0dc      	beq.n	800416a <f_unlink+0x6a>
 80041b0:	e7c7      	b.n	8004142 <f_unlink+0x42>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 80041b2:	2406      	movs	r4, #6
 80041b4:	e7c5      	b.n	8004142 <f_unlink+0x42>

080041b6 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80041b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ba:	b091      	sub	sp, #68	; 0x44
 80041bc:	9001      	str	r0, [sp, #4]
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80041be:	2202      	movs	r2, #2
 80041c0:	a903      	add	r1, sp, #12
 80041c2:	a801      	add	r0, sp, #4
 80041c4:	f7fe f9aa 	bl	800251c <find_volume>
	if (res == FR_OK) {
 80041c8:	4604      	mov	r4, r0
 80041ca:	2800      	cmp	r0, #0
 80041cc:	d170      	bne.n	80042b0 <f_mkdir+0xfa>
		dj.obj.fs = fs;
 80041ce:	9b03      	ldr	r3, [sp, #12]
 80041d0:	ae10      	add	r6, sp, #64	; 0x40
 80041d2:	f846 3d30 	str.w	r3, [r6, #-48]!
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80041d6:	9901      	ldr	r1, [sp, #4]
 80041d8:	4630      	mov	r0, r6
 80041da:	f7ff f8b8 	bl	800334e <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80041de:	4604      	mov	r4, r0
 80041e0:	2800      	cmp	r0, #0
 80041e2:	d075      	beq.n	80042d0 <f_mkdir+0x11a>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80041e4:	2804      	cmp	r0, #4
 80041e6:	d163      	bne.n	80042b0 <f_mkdir+0xfa>
 80041e8:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
 80041ec:	f011 0120 	ands.w	r1, r1, #32
 80041f0:	d170      	bne.n	80042d4 <f_mkdir+0x11e>
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80041f2:	4630      	mov	r0, r6
 80041f4:	f7fe fbfc 	bl	80029f0 <create_chain>
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80041f8:	9a03      	ldr	r2, [sp, #12]
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80041fa:	4605      	mov	r5, r0
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80041fc:	8953      	ldrh	r3, [r2, #10]
 80041fe:	025b      	lsls	r3, r3, #9
 8004200:	9307      	str	r3, [sp, #28]
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8004202:	2800      	cmp	r0, #0
 8004204:	d058      	beq.n	80042b8 <f_mkdir+0x102>
			if (dcl == 1) res = FR_INT_ERR;
 8004206:	2801      	cmp	r0, #1
 8004208:	d058      	beq.n	80042bc <f_mkdir+0x106>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800420a:	1c43      	adds	r3, r0, #1
 800420c:	d058      	beq.n	80042c0 <f_mkdir+0x10a>
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800420e:	4610      	mov	r0, r2
 8004210:	f7fe f90f 	bl	8002432 <sync_window>
 8004214:	4604      	mov	r4, r0
			tm = GET_FATTIME();
 8004216:	f7fc f801 	bl	800021c <get_fattime>
 800421a:	4681      	mov	r9, r0
			if (res == FR_OK) {					/* Initialize the new directory table */
 800421c:	2c00      	cmp	r4, #0
 800421e:	d151      	bne.n	80042c4 <f_mkdir+0x10e>
				res = dir_clear(fs, dcl);		/* Clean up the new table */
 8004220:	4629      	mov	r1, r5
 8004222:	9803      	ldr	r0, [sp, #12]
 8004224:	f7fe fc8f 	bl	8002b46 <dir_clear>
				if (res == FR_OK && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT)) {	/* Create dot entries (FAT only) */
 8004228:	4604      	mov	r4, r0
 800422a:	2800      	cmp	r0, #0
 800422c:	d14a      	bne.n	80042c4 <f_mkdir+0x10e>
					dir = fs->win;
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
					dir[DIR_Name] = '.';
 800422e:	f04f 0b2e 	mov.w	fp, #46	; 0x2e
					dir[DIR_Attr] = AM_DIR;
 8004232:	f04f 0810 	mov.w	r8, #16
					dir = fs->win;
 8004236:	9c03      	ldr	r4, [sp, #12]
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8004238:	220b      	movs	r2, #11
					dir = fs->win;
 800423a:	f104 0738 	add.w	r7, r4, #56	; 0x38
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800423e:	4638      	mov	r0, r7
 8004240:	2120      	movs	r1, #32
 8004242:	f7fe f85b 	bl	80022fc <mem_set>
					st_dword(dir + DIR_ModTime, tm);
 8004246:	f104 004e 	add.w	r0, r4, #78	; 0x4e
					dir[DIR_Name] = '.';
 800424a:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
					dir[DIR_Attr] = AM_DIR;
 800424e:	f884 8043 	strb.w	r8, [r4, #67]	; 0x43
					st_dword(dir + DIR_ModTime, tm);
 8004252:	4649      	mov	r1, r9
 8004254:	f7fe f84a 	bl	80022ec <st_dword>
					st_clust(fs, dir, dcl);
 8004258:	4639      	mov	r1, r7
					mem_cpy(dir + SZDIRE, dir, SZDIRE); /* Create ".." entry */
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
					st_clust(fs, dir + SZDIRE, pcl);
					fs->wflag = 1;
 800425a:	2701      	movs	r7, #1
					mem_cpy(dir + SZDIRE, dir, SZDIRE); /* Create ".." entry */
 800425c:	f104 0a58 	add.w	sl, r4, #88	; 0x58
					st_clust(fs, dir, dcl);
 8004260:	462a      	mov	r2, r5
 8004262:	9803      	ldr	r0, [sp, #12]
 8004264:	f7fe f8d9 	bl	800241a <st_clust.isra.4>
 8004268:	2220      	movs	r2, #32
 800426a:	4650      	mov	r0, sl
 800426c:	f7fe f8be 	bl	80023ec <mem_cpy.part.0>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8004270:	f884 b059 	strb.w	fp, [r4, #89]	; 0x59
					st_clust(fs, dir + SZDIRE, pcl);
 8004274:	9a06      	ldr	r2, [sp, #24]
 8004276:	4651      	mov	r1, sl
 8004278:	9803      	ldr	r0, [sp, #12]
 800427a:	f7fe f8ce 	bl	800241a <st_clust.isra.4>
					fs->wflag = 1;
 800427e:	9b03      	ldr	r3, [sp, #12]
				}
			}
			if (res == FR_OK) {
				res = dir_register(&dj);	/* Register the object to the directoy */
 8004280:	4630      	mov	r0, r6
					fs->wflag = 1;
 8004282:	70df      	strb	r7, [r3, #3]
				res = dir_register(&dj);	/* Register the object to the directoy */
 8004284:	f7fe fe62 	bl	8002f4c <dir_register>
			}
			if (res == FR_OK) {
 8004288:	4604      	mov	r4, r0
 800428a:	b9d8      	cbnz	r0, 80042c4 <f_mkdir+0x10e>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800428c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800428e:	4649      	mov	r1, r9
 8004290:	f104 0016 	add.w	r0, r4, #22
 8004294:	f7fe f82a 	bl	80022ec <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8004298:	4621      	mov	r1, r4
 800429a:	462a      	mov	r2, r5
 800429c:	9803      	ldr	r0, [sp, #12]
 800429e:	f7fe f8bc 	bl	800241a <st_clust.isra.4>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
					fs->wflag = 1;
 80042a2:	9803      	ldr	r0, [sp, #12]
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80042a4:	f884 800b 	strb.w	r8, [r4, #11]
					fs->wflag = 1;
 80042a8:	70c7      	strb	r7, [r0, #3]
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
 80042aa:	f7ff f805 	bl	80032b8 <sync_fs>
 80042ae:	4604      	mov	r4, r0
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 80042b0:	4620      	mov	r0, r4
 80042b2:	b011      	add	sp, #68	; 0x44
 80042b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80042b8:	2407      	movs	r4, #7
 80042ba:	e7ac      	b.n	8004216 <f_mkdir+0x60>
			if (dcl == 1) res = FR_INT_ERR;
 80042bc:	2402      	movs	r4, #2
 80042be:	e7aa      	b.n	8004216 <f_mkdir+0x60>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80042c0:	2401      	movs	r4, #1
 80042c2:	e7a8      	b.n	8004216 <f_mkdir+0x60>
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80042c4:	2200      	movs	r2, #0
 80042c6:	4629      	mov	r1, r5
 80042c8:	4630      	mov	r0, r6
 80042ca:	f7fe fc05 	bl	8002ad8 <remove_chain>
 80042ce:	e7ef      	b.n	80042b0 <f_mkdir+0xfa>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80042d0:	2408      	movs	r4, #8
 80042d2:	e7ed      	b.n	80042b0 <f_mkdir+0xfa>
			res = FR_INVALID_NAME;
 80042d4:	2406      	movs	r4, #6
 80042d6:	e7eb      	b.n	80042b0 <f_mkdir+0xfa>

080042d8 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 80042d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042da:	b0a5      	sub	sp, #148	; 0x94
 80042dc:	9001      	str	r0, [sp, #4]
 80042de:	a824      	add	r0, sp, #144	; 0x90
 80042e0:	f840 1d90 	str.w	r1, [r0, #-144]!
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
 80042e4:	f7fe f838 	bl	8002358 <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 80042e8:	2202      	movs	r2, #2
 80042ea:	a903      	add	r1, sp, #12
 80042ec:	a801      	add	r0, sp, #4
 80042ee:	f7fe f915 	bl	800251c <find_volume>
	if (res == FR_OK) {
 80042f2:	2800      	cmp	r0, #0
 80042f4:	d168      	bne.n	80043c8 <f_rename+0xf0>
		djo.obj.fs = fs;
 80042f6:	9b03      	ldr	r3, [sp, #12]
 80042f8:	ac24      	add	r4, sp, #144	; 0x90
 80042fa:	f844 3d60 	str.w	r3, [r4, #-96]!
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
 80042fe:	9901      	ldr	r1, [sp, #4]
 8004300:	4620      	mov	r0, r4
 8004302:	f7ff f824 	bl	800334e <follow_path>
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 8004306:	2800      	cmp	r0, #0
 8004308:	d15e      	bne.n	80043c8 <f_rename+0xf0>
 800430a:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 800430e:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 8004312:	d15b      	bne.n	80043cc <f_rename+0xf4>
 8004314:	2220      	movs	r2, #32
 8004316:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004318:	a804      	add	r0, sp, #16
 800431a:	f7fe f867 	bl	80023ec <mem_cpy.part.0>
 800431e:	4621      	mov	r1, r4
 8004320:	a818      	add	r0, sp, #96	; 0x60
 8004322:	2230      	movs	r2, #48	; 0x30
 8004324:	f7fe f862 	bl	80023ec <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 8004328:	9900      	ldr	r1, [sp, #0]
 800432a:	a818      	add	r0, sp, #96	; 0x60
 800432c:	f7ff f80f 	bl	800334e <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 8004330:	b948      	cbnz	r0, 8004346 <f_rename+0x6e>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 8004332:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004334:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004336:	429a      	cmp	r2, r3
 8004338:	d103      	bne.n	8004342 <f_rename+0x6a>
 800433a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800433c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800433e:	429a      	cmp	r2, r3
 8004340:	d003      	beq.n	800434a <f_rename+0x72>
 8004342:	2008      	movs	r0, #8
 8004344:	e040      	b.n	80043c8 <f_rename+0xf0>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 8004346:	2804      	cmp	r0, #4
 8004348:	d13e      	bne.n	80043c8 <f_rename+0xf0>
					res = dir_register(&djn);			/* Register the new entry */
 800434a:	a818      	add	r0, sp, #96	; 0x60
 800434c:	f7fe fdfe 	bl	8002f4c <dir_register>
					if (res == FR_OK) {
 8004350:	2800      	cmp	r0, #0
 8004352:	d139      	bne.n	80043c8 <f_rename+0xf0>
						dir = djn.dir;					/* Copy directory entry of the object except name */
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
 8004354:	2701      	movs	r7, #1
						dir = djn.dir;					/* Copy directory entry of the object except name */
 8004356:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8004358:	2213      	movs	r2, #19
 800435a:	f10d 011d 	add.w	r1, sp, #29
 800435e:	f105 000d 	add.w	r0, r5, #13
 8004362:	f7fe f843 	bl	80023ec <mem_cpy.part.0>
						dir[DIR_Attr] = buf[DIR_Attr];
 8004366:	f89d 301b 	ldrb.w	r3, [sp, #27]
						fs->wflag = 1;
 800436a:	9e03      	ldr	r6, [sp, #12]
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
 800436c:	06da      	lsls	r2, r3, #27
 800436e:	bf58      	it	pl
 8004370:	f043 0320 	orrpl.w	r3, r3, #32
 8004374:	72eb      	strb	r3, [r5, #11]
						fs->wflag = 1;
 8004376:	70f7      	strb	r7, [r6, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 8004378:	7aeb      	ldrb	r3, [r5, #11]
 800437a:	06db      	lsls	r3, r3, #27
 800437c:	d51d      	bpl.n	80043ba <f_rename+0xe2>
 800437e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004380:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004382:	429a      	cmp	r2, r3
 8004384:	d019      	beq.n	80043ba <f_rename+0xe2>
							dw = clst2sect(fs, ld_clust(fs, dir));
 8004386:	4629      	mov	r1, r5
 8004388:	7830      	ldrb	r0, [r6, #0]
 800438a:	f7fe f838 	bl	80023fe <ld_clust.isra.3>
 800438e:	4601      	mov	r1, r0
 8004390:	4630      	mov	r0, r6
 8004392:	f7fd ffc7 	bl	8002324 <clst2sect>
							if (dw == 0) {
 8004396:	4601      	mov	r1, r0
 8004398:	b1d0      	cbz	r0, 80043d0 <f_rename+0xf8>
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, dw);
 800439a:	4630      	mov	r0, r6
 800439c:	f7fe f86b 	bl	8002476 <move_window>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
 80043a0:	b990      	cbnz	r0, 80043c8 <f_rename+0xf0>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 80043a2:	9803      	ldr	r0, [sp, #12]
								if (res == FR_OK && dir[1] == '.') {
 80043a4:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 80043a8:	2b2e      	cmp	r3, #46	; 0x2e
 80043aa:	d106      	bne.n	80043ba <f_rename+0xe2>
									st_clust(fs, dir, djn.obj.sclust);
 80043ac:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80043ae:	f100 0158 	add.w	r1, r0, #88	; 0x58
 80043b2:	f7fe f832 	bl	800241a <st_clust.isra.4>
									fs->wflag = 1;
 80043b6:	9b03      	ldr	r3, [sp, #12]
 80043b8:	70df      	strb	r7, [r3, #3]
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
 80043ba:	4620      	mov	r0, r4
 80043bc:	f7fe fcf6 	bl	8002dac <dir_remove>
				if (res == FR_OK) {
 80043c0:	b910      	cbnz	r0, 80043c8 <f_rename+0xf0>
					res = sync_fs(fs);
 80043c2:	9803      	ldr	r0, [sp, #12]
 80043c4:	f7fe ff78 	bl	80032b8 <sync_fs>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 80043c8:	b025      	add	sp, #148	; 0x94
 80043ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 80043cc:	2006      	movs	r0, #6
 80043ce:	e7fb      	b.n	80043c8 <f_rename+0xf0>
								res = FR_INT_ERR;
 80043d0:	2002      	movs	r0, #2
 80043d2:	e7f9      	b.n	80043c8 <f_rename+0xf0>

080043d4 <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
 80043d4:	b530      	push	{r4, r5, lr}
 80043d6:	b091      	sub	sp, #68	; 0x44
 80043d8:	9001      	str	r0, [sp, #4]
 80043da:	460d      	mov	r5, r1
 80043dc:	4614      	mov	r4, r2
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = find_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
 80043de:	a903      	add	r1, sp, #12
 80043e0:	2202      	movs	r2, #2
 80043e2:	a801      	add	r0, sp, #4
 80043e4:	f7fe f89a 	bl	800251c <find_volume>
	if (res == FR_OK) {
 80043e8:	b9c8      	cbnz	r0, 800441e <f_chmod+0x4a>
		dj.obj.fs = fs;
 80043ea:	9b03      	ldr	r3, [sp, #12]
 80043ec:	a810      	add	r0, sp, #64	; 0x40
 80043ee:	f840 3d30 	str.w	r3, [r0, #-48]!
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80043f2:	9901      	ldr	r1, [sp, #4]
 80043f4:	f7fe ffab 	bl	800334e <follow_path>
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
 80043f8:	b988      	cbnz	r0, 800441e <f_chmod+0x4a>
 80043fa:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 80043fe:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 8004402:	d10e      	bne.n	8004422 <f_chmod+0x4e>
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
 8004404:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
				fs->wflag = 1;
 8004406:	9803      	ldr	r0, [sp, #12]
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
 8004408:	7ad3      	ldrb	r3, [r2, #11]
 800440a:	405d      	eors	r5, r3
 800440c:	402c      	ands	r4, r5
 800440e:	f004 0427 	and.w	r4, r4, #39	; 0x27
 8004412:	405c      	eors	r4, r3
				fs->wflag = 1;
 8004414:	2301      	movs	r3, #1
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
 8004416:	72d4      	strb	r4, [r2, #11]
				fs->wflag = 1;
 8004418:	70c3      	strb	r3, [r0, #3]
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
 800441a:	f7fe ff4d 	bl	80032b8 <sync_fs>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 800441e:	b011      	add	sp, #68	; 0x44
 8004420:	bd30      	pop	{r4, r5, pc}
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
 8004422:	2006      	movs	r0, #6
 8004424:	e7fb      	b.n	800441e <f_chmod+0x4a>

08004426 <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the timestamp to be set */
)
{
 8004426:	b510      	push	{r4, lr}
 8004428:	b090      	sub	sp, #64	; 0x40
 800442a:	9001      	str	r0, [sp, #4]
 800442c:	460c      	mov	r4, r1
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = find_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
 800442e:	2202      	movs	r2, #2
 8004430:	a903      	add	r1, sp, #12
 8004432:	a801      	add	r0, sp, #4
 8004434:	f7fe f872 	bl	800251c <find_volume>
	if (res == FR_OK) {
 8004438:	b9c8      	cbnz	r0, 800446e <f_utime+0x48>
		dj.obj.fs = fs;
 800443a:	9b03      	ldr	r3, [sp, #12]
 800443c:	a810      	add	r0, sp, #64	; 0x40
 800443e:	f840 3d30 	str.w	r3, [r0, #-48]!
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8004442:	9901      	ldr	r1, [sp, #4]
 8004444:	f7fe ff83 	bl	800334e <follow_path>
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
 8004448:	b988      	cbnz	r0, 800446e <f_utime+0x48>
 800444a:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 800444e:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 8004452:	d10e      	bne.n	8004472 <f_utime+0x4c>
				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				res = store_xdir(&dj);
			} else
#endif
			{
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
 8004454:	88e3      	ldrh	r3, [r4, #6]
 8004456:	88a1      	ldrh	r1, [r4, #4]
 8004458:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800445a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800445e:	3016      	adds	r0, #22
 8004460:	f7fd ff44 	bl	80022ec <st_dword>
				fs->wflag = 1;
 8004464:	2301      	movs	r3, #1
 8004466:	9803      	ldr	r0, [sp, #12]
 8004468:	70c3      	strb	r3, [r0, #3]
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
 800446a:	f7fe ff25 	bl	80032b8 <sync_fs>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 800446e:	b010      	add	sp, #64	; 0x40
 8004470:	bd10      	pop	{r4, pc}
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
 8004472:	2006      	movs	r0, #6
 8004474:	e7fb      	b.n	800446e <f_utime+0x48>

08004476 <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Logical drive number */
	TCHAR* label,		/* Buffer to store the volume label */
	DWORD* vsn			/* Variable to store the volume serial number */
)
{
 8004476:	b570      	push	{r4, r5, r6, lr}
 8004478:	b090      	sub	sp, #64	; 0x40
 800447a:	9001      	str	r0, [sp, #4]
 800447c:	460d      	mov	r5, r1
 800447e:	4616      	mov	r6, r2
	FATFS *fs;
	UINT si, di;
	WCHAR wc;

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8004480:	a903      	add	r1, sp, #12
 8004482:	2200      	movs	r2, #0
 8004484:	a801      	add	r0, sp, #4
 8004486:	f7fe f849 	bl	800251c <find_volume>

	/* Get volume label */
	if (res == FR_OK && label) {
 800448a:	4604      	mov	r4, r0
 800448c:	2800      	cmp	r0, #0
 800448e:	d135      	bne.n	80044fc <f_getlabel+0x86>
 8004490:	b305      	cbz	r5, 80044d4 <f_getlabel+0x5e>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
 8004492:	9b03      	ldr	r3, [sp, #12]
 8004494:	9006      	str	r0, [sp, #24]
		res = dir_sdi(&dj, 0);
 8004496:	4601      	mov	r1, r0
 8004498:	a804      	add	r0, sp, #16
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
 800449a:	9304      	str	r3, [sp, #16]
		res = dir_sdi(&dj, 0);
 800449c:	f7fe fa66 	bl	800296c <dir_sdi>
		if (res == FR_OK) {
 80044a0:	bba0      	cbnz	r0, 800450c <f_getlabel+0x96>
		 	res = dir_read_label(&dj);		/* Find a volume label entry */
 80044a2:	2101      	movs	r1, #1
 80044a4:	a804      	add	r0, sp, #16
 80044a6:	f7fe fbec 	bl	8002c82 <dir_read>
		 	if (res == FR_OK) {
 80044aa:	bb78      	cbnz	r0, 800450c <f_getlabel+0x96>
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
						wc = dj.dir[si++];
 80044ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044ae:	1e69      	subs	r1, r5, #1
 80044b0:	1e5a      	subs	r2, r3, #1
 80044b2:	330a      	adds	r3, #10
 80044b4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
					while (si < 11) {
 80044b8:	4293      	cmp	r3, r2
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
						if (wc == 0) { di = 0; break; }
						di += wc;
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
 80044ba:	f801 0f01 	strb.w	r0, [r1, #1]!
					while (si < 11) {
 80044be:	d1f9      	bne.n	80044b4 <f_getlabel+0x3e>
#endif
					}
					do {				/* Truncate trailing spaces */
						label[di] = 0;
 80044c0:	2100      	movs	r1, #0
 80044c2:	f105 030b 	add.w	r3, r5, #11
						if (di == 0) break;
 80044c6:	429d      	cmp	r5, r3
						label[di] = 0;
 80044c8:	7019      	strb	r1, [r3, #0]
						if (di == 0) break;
 80044ca:	d003      	beq.n	80044d4 <f_getlabel+0x5e>
					} while (label[--di] == ' ');
 80044cc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80044d0:	2a20      	cmp	r2, #32
 80044d2:	d0f8      	beq.n	80044c6 <f_getlabel+0x50>
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
 80044d4:	b196      	cbz	r6, 80044fc <f_getlabel+0x86>
		res = move_window(fs, fs->volbase);
 80044d6:	9803      	ldr	r0, [sp, #12]
 80044d8:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80044da:	f7fd ffcc 	bl	8002476 <move_window>
		if (res == FR_OK) {
 80044de:	4604      	mov	r4, r0
 80044e0:	b960      	cbnz	r0, 80044fc <f_getlabel+0x86>
			switch (fs->fs_type) {
 80044e2:	9b03      	ldr	r3, [sp, #12]
 80044e4:	781a      	ldrb	r2, [r3, #0]
 80044e6:	2a03      	cmp	r2, #3
 80044e8:	d00e      	beq.n	8004508 <f_getlabel+0x92>

			case FS_FAT32:
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
 80044ea:	2a04      	cmp	r2, #4
 80044ec:	bf0c      	ite	eq
 80044ee:	2064      	moveq	r0, #100	; 0x64
 80044f0:	2027      	movne	r0, #39	; 0x27
			}
			*vsn = ld_dword(fs->win + di);
 80044f2:	3338      	adds	r3, #56	; 0x38
 80044f4:	4418      	add	r0, r3
 80044f6:	f7fd fef1 	bl	80022dc <ld_dword>
 80044fa:	6030      	str	r0, [r6, #0]
		}
	}

	LEAVE_FF(fs, res);
}
 80044fc:	4620      	mov	r0, r4
 80044fe:	b010      	add	sp, #64	; 0x40
 8004500:	bd70      	pop	{r4, r5, r6, pc}
			label[0] = 0;
 8004502:	2300      	movs	r3, #0
 8004504:	702b      	strb	r3, [r5, #0]
 8004506:	e7e5      	b.n	80044d4 <f_getlabel+0x5e>
				di = BS_VolID32; break;
 8004508:	2043      	movs	r0, #67	; 0x43
 800450a:	e7f2      	b.n	80044f2 <f_getlabel+0x7c>
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
 800450c:	2804      	cmp	r0, #4
 800450e:	d0f8      	beq.n	8004502 <f_getlabel+0x8c>
 8004510:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
 8004512:	e7f3      	b.n	80044fc <f_getlabel+0x86>

08004514 <f_setlabel>:
/*-----------------------------------------------------------------------*/

FRESULT f_setlabel (
	const TCHAR* label	/* Volume label to set with heading logical drive number */
)
{
 8004514:	b570      	push	{r4, r5, r6, lr}
 8004516:	b096      	sub	sp, #88	; 0x58
 8004518:	9001      	str	r0, [sp, #4]
#if FF_USE_LFN
	DWORD dc;
#endif

	/* Get logical drive */
	res = find_volume(&label, &fs, FA_WRITE);
 800451a:	2202      	movs	r2, #2
 800451c:	a903      	add	r1, sp, #12
 800451e:	a801      	add	r0, sp, #4
 8004520:	f7fd fffc 	bl	800251c <find_volume>
	if (res != FR_OK) LEAVE_FF(fs, res);
 8004524:	4605      	mov	r5, r0
 8004526:	bb78      	cbnz	r0, 8004588 <f_setlabel+0x74>
			st_word(dirvn + di * 2, (WCHAR)dc); di++;
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		mem_set(dirvn, ' ', 11);
 8004528:	ae04      	add	r6, sp, #16
 800452a:	220b      	movs	r2, #11
 800452c:	2120      	movs	r1, #32
 800452e:	4630      	mov	r0, r6
 8004530:	f7fd fee4 	bl	80022fc <mem_set>
		di = 0;
 8004534:	462c      	mov	r4, r5
		while ((UINT)*label >= ' ') {	/* Create volume label */
 8004536:	9b01      	ldr	r3, [sp, #4]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	2b1f      	cmp	r3, #31
 800453c:	d81d      	bhi.n	800457a <f_setlabel+0x66>
				LEAVE_FF(fs, FR_INVALID_NAME);
			}
			if (wc >= 0x100) dirvn[di++] = (BYTE)(wc >> 8);
			dirvn[di++] = (BYTE)wc;
		}
		if (dirvn[0] == DDEM) LEAVE_FF(fs, FR_INVALID_NAME);	/* Reject illegal name (heading DDEM) */
 800453e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8004542:	2be5      	cmp	r3, #229	; 0xe5
 8004544:	d01f      	beq.n	8004586 <f_setlabel+0x72>
		while (di && dirvn[di - 1] == ' ') di--;				/* Snip trailing spaces */
 8004546:	b11c      	cbz	r4, 8004550 <f_setlabel+0x3c>
 8004548:	1e63      	subs	r3, r4, #1
 800454a:	5cf2      	ldrb	r2, [r6, r3]
 800454c:	2a20      	cmp	r2, #32
 800454e:	d02d      	beq.n	80045ac <f_setlabel+0x98>
	}

	/* Set volume label */
	dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
 8004550:	2100      	movs	r1, #0
 8004552:	9b03      	ldr	r3, [sp, #12]
	res = dir_sdi(&dj, 0);
 8004554:	a80a      	add	r0, sp, #40	; 0x28
	dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
 8004556:	930a      	str	r3, [sp, #40]	; 0x28
 8004558:	910c      	str	r1, [sp, #48]	; 0x30
	res = dir_sdi(&dj, 0);
 800455a:	f7fe fa07 	bl	800296c <dir_sdi>
	if (res == FR_OK) {
 800455e:	4605      	mov	r5, r0
 8004560:	b990      	cbnz	r0, 8004588 <f_setlabel+0x74>
		res = dir_read_label(&dj);	/* Get volume label entry */
 8004562:	2101      	movs	r1, #1
 8004564:	a80a      	add	r0, sp, #40	; 0x28
 8004566:	f7fe fb8c 	bl	8002c82 <dir_read>
		if (res == FR_OK) {
 800456a:	bb50      	cbnz	r0, 80045c2 <f_setlabel+0xae>
 800456c:	9811      	ldr	r0, [sp, #68]	; 0x44
			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {
				dj.dir[XDIR_NumLabel] = (BYTE)di;	/* Change the volume label */
				mem_cpy(dj.dir + XDIR_Label, dirvn, 22);
			} else {
				if (di != 0) {
 800456e:	b1fc      	cbz	r4, 80045b0 <f_setlabel+0x9c>
 8004570:	220b      	movs	r2, #11
 8004572:	4631      	mov	r1, r6
 8004574:	f7fd ff3a 	bl	80023ec <mem_cpy.part.0>
 8004578:	e01c      	b.n	80045b4 <f_setlabel+0xa0>
			dc = tchar2uni(&label);
 800457a:	a801      	add	r0, sp, #4
 800457c:	f7fd ff26 	bl	80023cc <tchar2uni>
			wc = (dc < 0x10000) ? ff_uni2oem(ff_wtoupper(dc), CODEPAGE) : 0;
 8004580:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8004584:	d303      	bcc.n	800458e <f_setlabel+0x7a>
				LEAVE_FF(fs, FR_INVALID_NAME);
 8004586:	2506      	movs	r5, #6
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8004588:	4628      	mov	r0, r5
 800458a:	b016      	add	sp, #88	; 0x58
 800458c:	bd70      	pop	{r4, r5, r6, pc}
			wc = (dc < 0x10000) ? ff_uni2oem(ff_wtoupper(dc), CODEPAGE) : 0;
 800458e:	f000 fb2d 	bl	8004bec <ff_wtoupper>
 8004592:	f240 11b5 	movw	r1, #437	; 0x1b5
 8004596:	f000 faf5 	bl	8004b84 <ff_uni2oem>
			if (wc == 0 || chk_chr(badchr + 0, (int)wc) || di >= (UINT)((wc >= 0x100) ? 10 : 11)) {	/* Reject invalid characters for volume label */
 800459a:	2800      	cmp	r0, #0
 800459c:	d0f3      	beq.n	8004586 <f_setlabel+0x72>
 800459e:	4a1e      	ldr	r2, [pc, #120]	; (8004618 <f_setlabel+0x104>)
	while (*str && *str != chr) str++;
 80045a0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80045a4:	b393      	cbz	r3, 800460c <f_setlabel+0xf8>
 80045a6:	4283      	cmp	r3, r0
 80045a8:	d1fa      	bne.n	80045a0 <f_setlabel+0x8c>
 80045aa:	e7ec      	b.n	8004586 <f_setlabel+0x72>
		while (di && dirvn[di - 1] == ' ') di--;				/* Snip trailing spaces */
 80045ac:	461c      	mov	r4, r3
 80045ae:	e7ca      	b.n	8004546 <f_setlabel+0x32>
					dj.dir[DIR_Name] = DDEM;	/* Remove the volume label */
 80045b0:	23e5      	movs	r3, #229	; 0xe5
 80045b2:	7003      	strb	r3, [r0, #0]
						fs->wflag = 1;
 80045b4:	2301      	movs	r3, #1
 80045b6:	9803      	ldr	r0, [sp, #12]
 80045b8:	70c3      	strb	r3, [r0, #3]
						res = sync_fs(fs);
 80045ba:	f7fe fe7d 	bl	80032b8 <sync_fs>
 80045be:	4605      	mov	r5, r0
 80045c0:	e7e2      	b.n	8004588 <f_setlabel+0x74>
			if (res == FR_NO_FILE) {
 80045c2:	2804      	cmp	r0, #4
 80045c4:	d1fb      	bne.n	80045be <f_setlabel+0xaa>
				if (di != 0) {	/* Create a volume label entry */
 80045c6:	2c00      	cmp	r4, #0
 80045c8:	d0de      	beq.n	8004588 <f_setlabel+0x74>
					res = dir_alloc(&dj, 1);	/* Allocate an entry */
 80045ca:	2101      	movs	r1, #1
 80045cc:	a80a      	add	r0, sp, #40	; 0x28
 80045ce:	f7fe fb36 	bl	8002c3e <dir_alloc>
					if (res == FR_OK) {
 80045d2:	4605      	mov	r5, r0
 80045d4:	2800      	cmp	r0, #0
 80045d6:	d1d7      	bne.n	8004588 <f_setlabel+0x74>
						mem_set(dj.dir, 0, SZDIRE);	/* Clean the entry */
 80045d8:	4601      	mov	r1, r0
 80045da:	2220      	movs	r2, #32
 80045dc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80045de:	f7fd fe8d 	bl	80022fc <mem_set>
							dj.dir[DIR_Attr] = AM_VOL;		/* Create volume label entry */
 80045e2:	2208      	movs	r2, #8
 80045e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80045e6:	4631      	mov	r1, r6
 80045e8:	72da      	strb	r2, [r3, #11]
 80045ea:	9811      	ldr	r0, [sp, #68]	; 0x44
 80045ec:	220b      	movs	r2, #11
 80045ee:	e7c1      	b.n	8004574 <f_setlabel+0x60>
			if (wc == 0 || chk_chr(badchr + 0, (int)wc) || di >= (UINT)((wc >= 0x100) ? 10 : 11)) {	/* Reject invalid characters for volume label */
 80045f0:	2c09      	cmp	r4, #9
 80045f2:	d8c8      	bhi.n	8004586 <f_setlabel+0x72>
			if (wc >= 0x100) dirvn[di++] = (BYTE)(wc >> 8);
 80045f4:	ab16      	add	r3, sp, #88	; 0x58
 80045f6:	4423      	add	r3, r4
 80045f8:	0a02      	lsrs	r2, r0, #8
 80045fa:	f803 2c48 	strb.w	r2, [r3, #-72]
 80045fe:	3401      	adds	r4, #1
			dirvn[di++] = (BYTE)wc;
 8004600:	ab16      	add	r3, sp, #88	; 0x58
 8004602:	4423      	add	r3, r4
 8004604:	f803 0c48 	strb.w	r0, [r3, #-72]
 8004608:	3401      	adds	r4, #1
 800460a:	e794      	b.n	8004536 <f_setlabel+0x22>
			if (wc == 0 || chk_chr(badchr + 0, (int)wc) || di >= (UINT)((wc >= 0x100) ? 10 : 11)) {	/* Reject invalid characters for volume label */
 800460c:	28ff      	cmp	r0, #255	; 0xff
 800460e:	d8ef      	bhi.n	80045f0 <f_setlabel+0xdc>
 8004610:	2c0a      	cmp	r4, #10
 8004612:	d9f5      	bls.n	8004600 <f_setlabel+0xec>
 8004614:	e7b7      	b.n	8004586 <f_setlabel+0x72>
 8004616:	bf00      	nop
 8004618:	08005a82 	.word	0x08005a82

0800461c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer (null: use heap memory) */
	UINT len			/* Size of working buffer [byte] */
)
{
 800461c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004620:	b089      	sub	sp, #36	; 0x24
 8004622:	ae08      	add	r6, sp, #32
 8004624:	f846 0d0c 	str.w	r0, [r6, #-12]!
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8004628:	4630      	mov	r0, r6
{
 800462a:	460d      	mov	r5, r1
 800462c:	4617      	mov	r7, r2
 800462e:	461c      	mov	r4, r3
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8004630:	f7fd fe92 	bl	8002358 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004634:	2800      	cmp	r0, #0
 8004636:	f2c0 823c 	blt.w	8004ab2 <f_mkfs+0x496>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume if mounted */
 800463a:	4ba2      	ldr	r3, [pc, #648]	; (80048c4 <f_mkfs+0x2a8>)
 800463c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	b10b      	cbz	r3, 8004648 <f_mkfs+0x2c>
 8004644:	2200      	movs	r2, #0
 8004646:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8004648:	b2c6      	uxtb	r6, r0
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800464a:	4630      	mov	r0, r6
 800464c:	f7fd fbae 	bl	8001dac <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8004650:	07c2      	lsls	r2, r0, #31
 8004652:	f100 8230 	bmi.w	8004ab6 <f_mkfs+0x49a>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8004656:	0743      	lsls	r3, r0, #29
 8004658:	f100 822f 	bmi.w	8004aba <f_mkfs+0x49e>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800465c:	aa06      	add	r2, sp, #24
 800465e:	2103      	movs	r1, #3
 8004660:	4630      	mov	r0, r6
 8004662:	f7fd fd2f 	bl	80020c4 <disk_ioctl>
 8004666:	b930      	cbnz	r0, 8004676 <f_mkfs+0x5a>
 8004668:	9a06      	ldr	r2, [sp, #24]
 800466a:	1e53      	subs	r3, r2, #1
 800466c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004670:	d201      	bcs.n	8004676 <f_mkfs+0x5a>
 8004672:	421a      	tst	r2, r3
 8004674:	d001      	beq.n	800467a <f_mkfs+0x5e>
 8004676:	2301      	movs	r3, #1
 8004678:	9306      	str	r3, [sp, #24]
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = FF_MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800467a:	b147      	cbz	r7, 800468e <f_mkfs+0x72>
 800467c:	4b92      	ldr	r3, [pc, #584]	; (80048c8 <f_mkfs+0x2ac>)
 800467e:	f5a7 7200 	sub.w	r2, r7, #512	; 0x200
 8004682:	429a      	cmp	r2, r3
 8004684:	d903      	bls.n	800468e <f_mkfs+0x72>
 8004686:	2013      	movs	r0, #19
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);

	LEAVE_MKFS(FR_OK);
}
 8004688:	b009      	add	sp, #36	; 0x24
 800468a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800468e:	1e7b      	subs	r3, r7, #1
 8004690:	423b      	tst	r3, r7
 8004692:	d1f8      	bne.n	8004686 <f_mkfs+0x6a>
		sz_buf = len / ss;		/* Size of working buffer (sector) */
 8004694:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004696:	0a5b      	lsrs	r3, r3, #9
 8004698:	9304      	str	r3, [sp, #16]
	if (!buf || sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 800469a:	2c00      	cmp	r4, #0
 800469c:	f000 820f 	beq.w	8004abe <f_mkfs+0x4a2>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 820c 	beq.w	8004abe <f_mkfs+0x4a2>
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80046a6:	aa07      	add	r2, sp, #28
 80046a8:	2101      	movs	r1, #1
 80046aa:	4630      	mov	r0, r6
 80046ac:	f7fd fd0a 	bl	80020c4 <disk_ioctl>
 80046b0:	2800      	cmp	r0, #0
 80046b2:	f040 80e9 	bne.w	8004888 <f_mkfs+0x26c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 80046b6:	f015 0308 	ands.w	r3, r5, #8
 80046ba:	bf0c      	ite	eq
 80046bc:	f04f 093f 	moveq.w	r9, #63	; 0x3f
 80046c0:	f04f 0900 	movne.w	r9, #0
 80046c4:	9302      	str	r3, [sp, #8]
		if (sz_vol < b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);
 80046c6:	9b07      	ldr	r3, [sp, #28]
 80046c8:	454b      	cmp	r3, r9
 80046ca:	d201      	bcs.n	80046d0 <f_mkfs+0xb4>
 80046cc:	200e      	movs	r0, #14
 80046ce:	e7db      	b.n	8004688 <f_mkfs+0x6c>
		sz_vol -= b_vol;						/* Volume size */
 80046d0:	eba3 0309 	sub.w	r3, r3, r9
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 80046d4:	2b7f      	cmp	r3, #127	; 0x7f
		sz_vol -= b_vol;						/* Volume size */
 80046d6:	9307      	str	r3, [sp, #28]
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 80046d8:	d9f8      	bls.n	80046cc <f_mkfs+0xb0>
	au /= ss;	/* Cluster size in unit of sector */
 80046da:	0a7a      	lsrs	r2, r7, #9
		if (au > 128) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* Too large au for FAT/FAT32 */
 80046dc:	2a80      	cmp	r2, #128	; 0x80
 80046de:	d8d2      	bhi.n	8004686 <f_mkfs+0x6a>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 80046e0:	f015 0e02 	ands.w	lr, r5, #2
 80046e4:	d007      	beq.n	80046f6 <f_mkfs+0xda>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 80046e6:	f005 0107 	and.w	r1, r5, #7
 80046ea:	2902      	cmp	r1, #2
 80046ec:	f000 81ed 	beq.w	8004aca <f_mkfs+0x4ae>
 80046f0:	07e8      	lsls	r0, r5, #31
 80046f2:	f140 81ea 	bpl.w	8004aca <f_mkfs+0x4ae>
		if (!(opt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 80046f6:	07e9      	lsls	r1, r5, #31
 80046f8:	d5c5      	bpl.n	8004686 <f_mkfs+0x6a>
				if (pau == 0) {	/* au auto-selection */
 80046fa:	2a00      	cmp	r2, #0
 80046fc:	d13b      	bne.n	8004776 <f_mkfs+0x15a>
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80046fe:	f04f 0801 	mov.w	r8, #1
 8004702:	4872      	ldr	r0, [pc, #456]	; (80048cc <f_mkfs+0x2b0>)
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8004704:	0b1d      	lsrs	r5, r3, #12
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8004706:	f830 1f02 	ldrh.w	r1, [r0, #2]!
 800470a:	b109      	cbz	r1, 8004710 <f_mkfs+0xf4>
 800470c:	42a9      	cmp	r1, r5
 800470e:	d91b      	bls.n	8004748 <f_mkfs+0x12c>
				n_clst = sz_vol / pau;
 8004710:	fbb3 f5f8 	udiv	r5, r3, r8
				if (n_clst > MAX_FAT12) {
 8004714:	f640 71f5 	movw	r1, #4085	; 0xff5
 8004718:	428d      	cmp	r5, r1
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800471a:	f04f 0120 	mov.w	r1, #32
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800471e:	bf9b      	ittet	ls
 8004720:	eb05 0545 	addls.w	r5, r5, r5, lsl #1
 8004724:	3501      	addls	r5, #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8004726:	3502      	addhi	r5, #2
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8004728:	086d      	lsrls	r5, r5, #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800472a:	bf8c      	ite	hi
 800472c:	006d      	lslhi	r5, r5, #1
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800472e:	3503      	addls	r5, #3
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8004730:	f205 15ff 	addw	r5, r5, #511	; 0x1ff
 8004734:	bf8c      	ite	hi
 8004736:	2702      	movhi	r7, #2
					fmt = FS_FAT12;
 8004738:	2701      	movls	r7, #1
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800473a:	0a6d      	lsrs	r5, r5, #9
				sz_rsv = 1;						/* Number of reserved sectors */
 800473c:	f04f 0b01 	mov.w	fp, #1
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8004740:	9101      	str	r1, [sp, #4]
 8004742:	e1e3      	b.n	8004b0c <f_mkfs+0x4f0>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8004744:	0052      	lsls	r2, r2, #1
 8004746:	e1c5      	b.n	8004ad4 <f_mkfs+0x4b8>
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8004748:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800474c:	e7db      	b.n	8004706 <f_mkfs+0xea>
			if (fmt == FS_FAT16) {
 800474e:	2f02      	cmp	r7, #2
 8004750:	d11f      	bne.n	8004792 <f_mkfs+0x176>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8004752:	f64f 71f5 	movw	r1, #65525	; 0xfff5
 8004756:	9803      	ldr	r0, [sp, #12]
 8004758:	4288      	cmp	r0, r1
 800475a:	d90e      	bls.n	800477a <f_mkfs+0x15e>
					if (au == 0 && (pau * 2) <= 64) {
 800475c:	2a00      	cmp	r2, #0
 800475e:	f040 81b0 	bne.w	8004ac2 <f_mkfs+0x4a6>
 8004762:	ea4f 0248 	mov.w	r2, r8, lsl #1
 8004766:	2a40      	cmp	r2, #64	; 0x40
 8004768:	d9c7      	bls.n	80046fa <f_mkfs+0xde>
					if ((opt & FM_FAT32)) {
 800476a:	f1be 0f00 	cmp.w	lr, #0
 800476e:	f040 81ae 	bne.w	8004ace <f_mkfs+0x4b2>
					if (au == 0 && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8004772:	2a80      	cmp	r2, #128	; 0x80
 8004774:	d8aa      	bhi.n	80046cc <f_mkfs+0xb0>
 8004776:	4690      	mov	r8, r2
 8004778:	e7ca      	b.n	8004710 <f_mkfs+0xf4>
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800477a:	f640 71f5 	movw	r1, #4085	; 0xff5
 800477e:	9803      	ldr	r0, [sp, #12]
 8004780:	4288      	cmp	r0, r1
 8004782:	d80c      	bhi.n	800479e <f_mkfs+0x182>
					if (au == 0 && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8004784:	2a00      	cmp	r2, #0
 8004786:	d1a1      	bne.n	80046cc <f_mkfs+0xb0>
 8004788:	ea4f 0248 	mov.w	r2, r8, lsl #1
 800478c:	2a80      	cmp	r2, #128	; 0x80
 800478e:	d9b4      	bls.n	80046fa <f_mkfs+0xde>
 8004790:	e79c      	b.n	80046cc <f_mkfs+0xb0>
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 8004792:	f640 73f5 	movw	r3, #4085	; 0xff5
 8004796:	9a03      	ldr	r2, [sp, #12]
 8004798:	429a      	cmp	r2, r3
 800479a:	d897      	bhi.n	80046cc <f_mkfs+0xb0>
 800479c:	2701      	movs	r7, #1
		mem_set(buf, 0, ss);
 800479e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047a2:	2100      	movs	r1, #0
 80047a4:	4620      	mov	r0, r4
 80047a6:	f7fd fda9 	bl	80022fc <mem_set>
 80047aa:	220b      	movs	r2, #11
 80047ac:	4948      	ldr	r1, [pc, #288]	; (80048d0 <f_mkfs+0x2b4>)
 80047ae:	4620      	mov	r0, r4
 80047b0:	f7fd fe1c 	bl	80023ec <mem_cpy.part.0>
	*ptr++ = (BYTE)val; val >>= 8;
 80047b4:	2300      	movs	r3, #0
	*ptr++ = (BYTE)val;
 80047b6:	2202      	movs	r2, #2
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 80047b8:	2f03      	cmp	r7, #3
	*ptr++ = (BYTE)val; val >>= 8;
 80047ba:	72e3      	strb	r3, [r4, #11]
	*ptr++ = (BYTE)val;
 80047bc:	7322      	strb	r2, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 80047be:	7463      	strb	r3, [r4, #17]
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 80047c0:	f04f 0201 	mov.w	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80047c4:	bf18      	it	ne
 80047c6:	2302      	movne	r3, #2
		if (sz_vol < 0x10000) {
 80047c8:	9907      	ldr	r1, [sp, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 80047ca:	f884 b00e 	strb.w	fp, [r4, #14]
		if (sz_vol < 0x10000) {
 80047ce:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
	*ptr++ = (BYTE)val; val >>= 8;
 80047d2:	f3cb 2b07 	ubfx	fp, fp, #8, #8
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 80047d6:	f884 800d 	strb.w	r8, [r4, #13]
	*ptr++ = (BYTE)val;
 80047da:	f884 b00f 	strb.w	fp, [r4, #15]
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 80047de:	7422      	strb	r2, [r4, #16]
	*ptr++ = (BYTE)val;
 80047e0:	74a3      	strb	r3, [r4, #18]
		if (sz_vol < 0x10000) {
 80047e2:	d253      	bcs.n	800488c <f_mkfs+0x270>
	*ptr++ = (BYTE)val; val >>= 8;
 80047e4:	74e1      	strb	r1, [r4, #19]
 80047e6:	f3c1 2107 	ubfx	r1, r1, #8, #8
	*ptr++ = (BYTE)val;
 80047ea:	7521      	strb	r1, [r4, #20]
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 80047ec:	23f8      	movs	r3, #248	; 0xf8
 80047ee:	7563      	strb	r3, [r4, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 80047f0:	233f      	movs	r3, #63	; 0x3f
	*ptr++ = (BYTE)val;
 80047f2:	f04f 0b00 	mov.w	fp, #0
	*ptr++ = (BYTE)val; val >>= 8;
 80047f6:	7623      	strb	r3, [r4, #24]
 80047f8:	23ff      	movs	r3, #255	; 0xff
	*ptr++ = (BYTE)val;
 80047fa:	f884 b019 	strb.w	fp, [r4, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 80047fe:	76a3      	strb	r3, [r4, #26]
	*ptr++ = (BYTE)val;
 8004800:	f884 b01b 	strb.w	fp, [r4, #27]
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8004804:	4649      	mov	r1, r9
 8004806:	f104 001c 	add.w	r0, r4, #28
 800480a:	f7fd fd6f 	bl	80022ec <st_dword>
		if (fmt == FS_FAT32) {
 800480e:	2f03      	cmp	r7, #3
 8004810:	d141      	bne.n	8004896 <f_mkfs+0x27a>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8004812:	f7fb fd03 	bl	800021c <get_fattime>
 8004816:	4601      	mov	r1, r0
 8004818:	f104 0043 	add.w	r0, r4, #67	; 0x43
 800481c:	f7fd fd66 	bl	80022ec <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8004820:	4629      	mov	r1, r5
 8004822:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004826:	f7fd fd61 	bl	80022ec <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 800482a:	2302      	movs	r3, #2
 800482c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 8004830:	2301      	movs	r3, #1
 8004832:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8004836:	2306      	movs	r3, #6
 8004838:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800483c:	2380      	movs	r3, #128	; 0x80
 800483e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8004842:	2329      	movs	r3, #41	; 0x29
 8004844:	2213      	movs	r2, #19
 8004846:	4923      	ldr	r1, [pc, #140]	; (80048d4 <f_mkfs+0x2b8>)
	*ptr++ = (BYTE)val; val >>= 8;
 8004848:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
	*ptr++ = (BYTE)val; val >>= 8;
 800484c:	f884 b02e 	strb.w	fp, [r4, #46]	; 0x2e
	*ptr++ = (BYTE)val;
 8004850:	f884 b02f 	strb.w	fp, [r4, #47]	; 0x2f
	*ptr++ = (BYTE)val;
 8004854:	f884 b031 	strb.w	fp, [r4, #49]	; 0x31
 8004858:	f884 b033 	strb.w	fp, [r4, #51]	; 0x33
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800485c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004860:	f104 0047 	add.w	r0, r4, #71	; 0x47
 8004864:	f7fd fdc2 	bl	80023ec <mem_cpy.part.0>
	*ptr++ = (BYTE)val; val >>= 8;
 8004868:	f04f 0355 	mov.w	r3, #85	; 0x55
 800486c:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
 8004870:	f06f 0355 	mvn.w	r3, #85	; 0x55
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 8004874:	464a      	mov	r2, r9
	*ptr++ = (BYTE)val;
 8004876:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 800487a:	4621      	mov	r1, r4
 800487c:	2301      	movs	r3, #1
 800487e:	4630      	mov	r0, r6
 8004880:	f7fd fbbc 	bl	8001ffc <disk_write>
 8004884:	4683      	mov	fp, r0
 8004886:	b348      	cbz	r0, 80048dc <f_mkfs+0x2c0>
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8004888:	2001      	movs	r0, #1
 800488a:	e6fd      	b.n	8004688 <f_mkfs+0x6c>
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800488c:	f104 0020 	add.w	r0, r4, #32
 8004890:	f7fd fd2c 	bl	80022ec <st_dword>
 8004894:	e7aa      	b.n	80047ec <f_mkfs+0x1d0>
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8004896:	f7fb fcc1 	bl	800021c <get_fattime>
 800489a:	4601      	mov	r1, r0
 800489c:	f104 0027 	add.w	r0, r4, #39	; 0x27
 80048a0:	f7fd fd24 	bl	80022ec <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 80048a4:	f3c5 2307 	ubfx	r3, r5, #8, #8
	*ptr++ = (BYTE)val;
 80048a8:	75e3      	strb	r3, [r4, #23]
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 80048aa:	2380      	movs	r3, #128	; 0x80
 80048ac:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 80048b0:	2329      	movs	r3, #41	; 0x29
	*ptr++ = (BYTE)val; val >>= 8;
 80048b2:	75a5      	strb	r5, [r4, #22]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 80048b4:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
 80048b8:	2213      	movs	r2, #19
 80048ba:	4907      	ldr	r1, [pc, #28]	; (80048d8 <f_mkfs+0x2bc>)
 80048bc:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 80048c0:	e7d0      	b.n	8004864 <f_mkfs+0x248>
 80048c2:	bf00      	nop
 80048c4:	20000128 	.word	0x20000128
 80048c8:	00fffe00 	.word	0x00fffe00
 80048cc:	08005aa2 	.word	0x08005aa2
 80048d0:	08005ac2 	.word	0x08005ac2
 80048d4:	08005ace 	.word	0x08005ace
 80048d8:	08005ae2 	.word	0x08005ae2
		if (fmt == FS_FAT32) {
 80048dc:	2f03      	cmp	r7, #3
 80048de:	d141      	bne.n	8004964 <f_mkfs+0x348>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 80048e0:	2301      	movs	r3, #1
 80048e2:	f109 0206 	add.w	r2, r9, #6
 80048e6:	4621      	mov	r1, r4
 80048e8:	4630      	mov	r0, r6
 80048ea:	f7fd fb87 	bl	8001ffc <disk_write>
			mem_set(buf, 0, ss);
 80048ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048f2:	4659      	mov	r1, fp
 80048f4:	4620      	mov	r0, r4
 80048f6:	f7fd fd01 	bl	80022fc <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 80048fa:	2352      	movs	r3, #82	; 0x52
 80048fc:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80048fe:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8004900:	2361      	movs	r3, #97	; 0x61
	*ptr++ = (BYTE)val;
 8004902:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8004904:	2172      	movs	r1, #114	; 0x72
	*ptr++ = (BYTE)val; val >>= 8;
 8004906:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
 8004908:	f884 31e7 	strb.w	r3, [r4, #487]	; 0x1e7
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800490c:	9b03      	ldr	r3, [sp, #12]
	*ptr++ = (BYTE)val;
 800490e:	70e2      	strb	r2, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 8004910:	f884 11e4 	strb.w	r1, [r4, #484]	; 0x1e4
	*ptr++ = (BYTE)val; val >>= 8;
 8004914:	f884 11e5 	strb.w	r1, [r4, #485]	; 0x1e5
	*ptr++ = (BYTE)val; val >>= 8;
 8004918:	f884 21e6 	strb.w	r2, [r4, #486]	; 0x1e6
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800491c:	1e59      	subs	r1, r3, #1
 800491e:	f504 70f4 	add.w	r0, r4, #488	; 0x1e8
 8004922:	f7fd fce3 	bl	80022ec <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 8004926:	2302      	movs	r3, #2
 8004928:	f884 31ec 	strb.w	r3, [r4, #492]	; 0x1ec
	*ptr++ = (BYTE)val; val >>= 8;
 800492c:	f04f 0355 	mov.w	r3, #85	; 0x55
 8004930:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
 8004934:	f06f 0355 	mvn.w	r3, #85	; 0x55
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8004938:	f109 0207 	add.w	r2, r9, #7
	*ptr++ = (BYTE)val;
 800493c:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8004940:	4621      	mov	r1, r4
 8004942:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8004944:	f884 b1ed 	strb.w	fp, [r4, #493]	; 0x1ed
	*ptr++ = (BYTE)val; val >>= 8;
 8004948:	f884 b1ee 	strb.w	fp, [r4, #494]	; 0x1ee
	*ptr++ = (BYTE)val;
 800494c:	f884 b1ef 	strb.w	fp, [r4, #495]	; 0x1ef
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8004950:	4630      	mov	r0, r6
 8004952:	f7fd fb53 	bl	8001ffc <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8004956:	2301      	movs	r3, #1
 8004958:	4621      	mov	r1, r4
 800495a:	eb09 0203 	add.w	r2, r9, r3
 800495e:	4630      	mov	r0, r6
 8004960:	f7fd fb4c 	bl	8001ffc <disk_write>
		mem_set(buf, 0, (UINT)szb_buf);
 8004964:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004966:	2100      	movs	r1, #0
 8004968:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 800496c:	f022 0201 	bic.w	r2, r2, #1
 8004970:	4620      	mov	r0, r4
 8004972:	f7fd fcc3 	bl	80022fc <mem_set>
			if (fmt == FS_FAT32) {
 8004976:	2f03      	cmp	r7, #3
 8004978:	d152      	bne.n	8004a20 <f_mkfs+0x404>
	*ptr++ = (BYTE)val; val >>= 8;
 800497a:	23f8      	movs	r3, #248	; 0xf8
 800497c:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800497e:	23ff      	movs	r3, #255	; 0xff
 8004980:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8004982:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
 8004984:	70e3      	strb	r3, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 8004986:	7123      	strb	r3, [r4, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8004988:	7163      	strb	r3, [r4, #5]
	*ptr++ = (BYTE)val; val >>= 8;
 800498a:	71a3      	strb	r3, [r4, #6]
	*ptr++ = (BYTE)val;
 800498c:	71e3      	strb	r3, [r4, #7]
	*ptr++ = (BYTE)val; val >>= 8;
 800498e:	7223      	strb	r3, [r4, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8004990:	7263      	strb	r3, [r4, #9]
	*ptr++ = (BYTE)val; val >>= 8;
 8004992:	72a3      	strb	r3, [r4, #10]
	*ptr++ = (BYTE)val;
 8004994:	230f      	movs	r3, #15
 8004996:	72e3      	strb	r3, [r4, #11]
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8004998:	9b04      	ldr	r3, [sp, #16]
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800499a:	4621      	mov	r1, r4
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800499c:	42ab      	cmp	r3, r5
 800499e:	bf28      	it	cs
 80049a0:	462b      	movcs	r3, r5
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80049a2:	4652      	mov	r2, sl
 80049a4:	4630      	mov	r0, r6
				n = (nsect > sz_buf) ? sz_buf : nsect;
 80049a6:	469b      	mov	fp, r3
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80049a8:	f7fd fb28 	bl	8001ffc <disk_write>
 80049ac:	4601      	mov	r1, r0
 80049ae:	2800      	cmp	r0, #0
 80049b0:	f47f af6a 	bne.w	8004888 <f_mkfs+0x26c>
				mem_set(buf, 0, ss);
 80049b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049b8:	4620      	mov	r0, r4
 80049ba:	f7fd fc9f 	bl	80022fc <mem_set>
			} while (nsect);
 80049be:	ebb5 050b 	subs.w	r5, r5, fp
				sect += n; nsect -= n;
 80049c2:	44da      	add	sl, fp
			} while (nsect);
 80049c4:	d1e8      	bne.n	8004998 <f_mkfs+0x37c>
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 80049c6:	9b01      	ldr	r3, [sp, #4]
 80049c8:	2f03      	cmp	r7, #3
 80049ca:	bf08      	it	eq
 80049cc:	4643      	moveq	r3, r8
 80049ce:	9301      	str	r3, [sp, #4]
			n = (nsect > sz_buf) ? sz_buf : nsect;
 80049d0:	9b01      	ldr	r3, [sp, #4]
 80049d2:	9a04      	ldr	r2, [sp, #16]
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80049d4:	4621      	mov	r1, r4
			n = (nsect > sz_buf) ? sz_buf : nsect;
 80049d6:	4293      	cmp	r3, r2
 80049d8:	bf28      	it	cs
 80049da:	4613      	movcs	r3, r2
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80049dc:	4630      	mov	r0, r6
 80049de:	4652      	mov	r2, sl
			n = (nsect > sz_buf) ? sz_buf : nsect;
 80049e0:	461d      	mov	r5, r3
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80049e2:	f7fd fb0b 	bl	8001ffc <disk_write>
 80049e6:	2800      	cmp	r0, #0
 80049e8:	f47f af4e 	bne.w	8004888 <f_mkfs+0x26c>
		} while (nsect);
 80049ec:	9b01      	ldr	r3, [sp, #4]
			sect += n; nsect -= n;
 80049ee:	44aa      	add	sl, r5
		} while (nsect);
 80049f0:	1b5b      	subs	r3, r3, r5
 80049f2:	9301      	str	r3, [sp, #4]
 80049f4:	d1ec      	bne.n	80049d0 <f_mkfs+0x3b4>
		if (fmt == FS_FAT32) {
 80049f6:	2f03      	cmp	r7, #3
 80049f8:	d01b      	beq.n	8004a32 <f_mkfs+0x416>
			if (sz_vol >= 0x10000) {
 80049fa:	9b07      	ldr	r3, [sp, #28]
 80049fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a00:	d219      	bcs.n	8004a36 <f_mkfs+0x41a>
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 : FAT12 */
 8004a02:	2f02      	cmp	r7, #2
 8004a04:	bf14      	ite	ne
 8004a06:	2301      	movne	r3, #1
 8004a08:	2304      	moveq	r3, #4
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8004a0a:	9a02      	ldr	r2, [sp, #8]
 8004a0c:	b1aa      	cbz	r2, 8004a3a <f_mkfs+0x41e>
	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8004a0e:	2200      	movs	r2, #0
 8004a10:	4630      	mov	r0, r6
 8004a12:	4611      	mov	r1, r2
 8004a14:	f7fd fb56 	bl	80020c4 <disk_ioctl>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004a18:	3000      	adds	r0, #0
 8004a1a:	bf18      	it	ne
 8004a1c:	2001      	movne	r0, #1
 8004a1e:	e633      	b.n	8004688 <f_mkfs+0x6c>
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8004a20:	2f01      	cmp	r7, #1
 8004a22:	4955      	ldr	r1, [pc, #340]	; (8004b78 <f_mkfs+0x55c>)
 8004a24:	4620      	mov	r0, r4
 8004a26:	bf18      	it	ne
 8004a28:	f06f 0107 	mvnne.w	r1, #7
 8004a2c:	f7fd fc5e 	bl	80022ec <st_dword>
 8004a30:	e7b2      	b.n	8004998 <f_mkfs+0x37c>
			sys = 0x0C;		/* FAT32X */
 8004a32:	230c      	movs	r3, #12
 8004a34:	e7e9      	b.n	8004a0a <f_mkfs+0x3ee>
				sys = 0x06;	/* FAT12/16 (large) */
 8004a36:	2306      	movs	r3, #6
 8004a38:	e7e7      	b.n	8004a0a <f_mkfs+0x3ee>
			mem_set(buf, 0, ss);
 8004a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a3e:	9902      	ldr	r1, [sp, #8]
 8004a40:	4620      	mov	r0, r4
 8004a42:	f7fd fc5b 	bl	80022fc <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8004a46:	2255      	movs	r2, #85	; 0x55
 8004a48:	f884 21fe 	strb.w	r2, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
 8004a4c:	22aa      	movs	r2, #170	; 0xaa
			pte[PTE_System] = sys;				/* System type */
 8004a4e:	f884 31c2 	strb.w	r3, [r4, #450]	; 0x1c2
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8004a52:	f643 63c1 	movw	r3, #16065	; 0x3ec1
	*ptr++ = (BYTE)val;
 8004a56:	f884 21ff 	strb.w	r2, [r4, #511]	; 0x1ff
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8004a5a:	f89d 2008 	ldrb.w	r2, [sp, #8]
			pte[PTE_StHead] = 1;				/* Start head */
 8004a5e:	2501      	movs	r5, #1
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8004a60:	f884 21be 	strb.w	r2, [r4, #446]	; 0x1be
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8004a64:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8004a68:	9a07      	ldr	r2, [sp, #28]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8004a6a:	4649      	mov	r1, r9
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8004a6c:	444a      	add	r2, r9
 8004a6e:	fbb2 f2f3 	udiv	r2, r2, r3
			pte[PTE_EdHead] = 254;				/* End head */
 8004a72:	23fe      	movs	r3, #254	; 0xfe
 8004a74:	f884 31c3 	strb.w	r3, [r4, #451]	; 0x1c3
			pte[PTE_EdSec] = (BYTE)(((n >> 2) & 0xC0) | 63);	/* End sector */
 8004a78:	0893      	lsrs	r3, r2, #2
 8004a7a:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8004a7e:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8004a82:	f884 21c5 	strb.w	r2, [r4, #453]	; 0x1c5
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8004a86:	f504 70e3 	add.w	r0, r4, #454	; 0x1c6
			pte[PTE_StHead] = 1;				/* Start head */
 8004a8a:	f884 51bf 	strb.w	r5, [r4, #447]	; 0x1bf
			pte[PTE_StSec] = 1;					/* Start sector */
 8004a8e:	f884 51c0 	strb.w	r5, [r4, #448]	; 0x1c0
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8004a92:	f7fd fc2b 	bl	80022ec <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8004a96:	9907      	ldr	r1, [sp, #28]
 8004a98:	f504 70e5 	add.w	r0, r4, #458	; 0x1ca
 8004a9c:	f7fd fc26 	bl	80022ec <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the MBR */
 8004aa0:	462b      	mov	r3, r5
 8004aa2:	9a02      	ldr	r2, [sp, #8]
 8004aa4:	4621      	mov	r1, r4
 8004aa6:	4630      	mov	r0, r6
 8004aa8:	f7fd faa8 	bl	8001ffc <disk_write>
 8004aac:	2800      	cmp	r0, #0
 8004aae:	d0ae      	beq.n	8004a0e <f_mkfs+0x3f2>
 8004ab0:	e6ea      	b.n	8004888 <f_mkfs+0x26c>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004ab2:	200b      	movs	r0, #11
 8004ab4:	e5e8      	b.n	8004688 <f_mkfs+0x6c>
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8004ab6:	2003      	movs	r0, #3
 8004ab8:	e5e6      	b.n	8004688 <f_mkfs+0x6c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8004aba:	200a      	movs	r0, #10
 8004abc:	e5e4      	b.n	8004688 <f_mkfs+0x6c>
	if (!buf || sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 8004abe:	2011      	movs	r0, #17
 8004ac0:	e5e2      	b.n	8004688 <f_mkfs+0x6c>
					if ((opt & FM_FAT32)) {
 8004ac2:	f1be 0f00 	cmp.w	lr, #0
 8004ac6:	f43f ae01 	beq.w	80046cc <f_mkfs+0xb0>
				if (pau == 0) {	/* au auto-selection */
 8004aca:	2a00      	cmp	r2, #0
 8004acc:	d151      	bne.n	8004b72 <f_mkfs+0x556>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8004ace:	2201      	movs	r2, #1
 8004ad0:	482a      	ldr	r0, [pc, #168]	; (8004b7c <f_mkfs+0x560>)
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8004ad2:	0c5d      	lsrs	r5, r3, #17
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8004ad4:	f830 1f02 	ldrh.w	r1, [r0, #2]!
 8004ad8:	b119      	cbz	r1, 8004ae2 <f_mkfs+0x4c6>
 8004ada:	42a9      	cmp	r1, r5
 8004adc:	f67f ae32 	bls.w	8004744 <f_mkfs+0x128>
 8004ae0:	2100      	movs	r1, #0
				n_clst = sz_vol / pau;	/* Number of clusters */
 8004ae2:	fbb3 f0f2 	udiv	r0, r3, r2
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 8004ae6:	4f26      	ldr	r7, [pc, #152]	; (8004b80 <f_mkfs+0x564>)
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8004ae8:	0085      	lsls	r5, r0, #2
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 8004aea:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
 8004aee:	38f6      	subs	r0, #246	; 0xf6
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8004af0:	f205 2507 	addw	r5, r5, #519	; 0x207
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 8004af4:	42b8      	cmp	r0, r7
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8004af6:	ea4f 2555 	mov.w	r5, r5, lsr #9
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 8004afa:	f63f ade7 	bhi.w	80046cc <f_mkfs+0xb0>
 8004afe:	4690      	mov	r8, r2
 8004b00:	460a      	mov	r2, r1
				sz_dir = 0;		/* No static directory */
 8004b02:	2100      	movs	r1, #0
				sz_rsv = 32;	/* Number of reserved sectors */
 8004b04:	f04f 0b20 	mov.w	fp, #32
 8004b08:	2703      	movs	r7, #3
				sz_dir = 0;		/* No static directory */
 8004b0a:	9101      	str	r1, [sp, #4]
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8004b0c:	9901      	ldr	r1, [sp, #4]
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8004b0e:	f8dd c018 	ldr.w	ip, [sp, #24]
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8004b12:	eb0b 0a09 	add.w	sl, fp, r9
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8004b16:	1868      	adds	r0, r5, r1
 8004b18:	4450      	add	r0, sl
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8004b1a:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8004b1e:	4401      	add	r1, r0
 8004b20:	f1cc 0c00 	rsb	ip, ip, #0
 8004b24:	ea01 0c0c 	and.w	ip, r1, ip
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume */
 8004b28:	ebc9 1108 	rsb	r1, r9, r8, lsl #4
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8004b2c:	ebac 0c00 	sub.w	ip, ip, r0
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8004b30:	2f03      	cmp	r7, #3
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume */
 8004b32:	4408      	add	r0, r1
				sz_rsv += n; b_fat += n;
 8004b34:	bf06      	itte	eq
 8004b36:	44e3      	addeq	fp, ip
 8004b38:	44e2      	addeq	sl, ip
				sz_fat += n / n_fats;
 8004b3a:	4465      	addne	r5, ip
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume */
 8004b3c:	4283      	cmp	r3, r0
 8004b3e:	f4ff adc5 	bcc.w	80046cc <f_mkfs+0xb0>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8004b42:	eba3 010b 	sub.w	r1, r3, fp
 8004b46:	9801      	ldr	r0, [sp, #4]
 8004b48:	1b49      	subs	r1, r1, r5
 8004b4a:	1a09      	subs	r1, r1, r0
 8004b4c:	fbb1 f1f8 	udiv	r1, r1, r8
			if (fmt == FS_FAT32) {
 8004b50:	2f03      	cmp	r7, #3
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8004b52:	9103      	str	r1, [sp, #12]
			if (fmt == FS_FAT32) {
 8004b54:	f47f adfb 	bne.w	800474e <f_mkfs+0x132>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8004b58:	f64f 71f5 	movw	r1, #65525	; 0xfff5
 8004b5c:	9803      	ldr	r0, [sp, #12]
 8004b5e:	4288      	cmp	r0, r1
 8004b60:	f63f ae1d 	bhi.w	800479e <f_mkfs+0x182>
					if (au == 0 && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8004b64:	2a00      	cmp	r2, #0
 8004b66:	f47f adb1 	bne.w	80046cc <f_mkfs+0xb0>
 8004b6a:	ea5f 0258 	movs.w	r2, r8, lsr #1
 8004b6e:	f43f adad 	beq.w	80046cc <f_mkfs+0xb0>
 8004b72:	4611      	mov	r1, r2
 8004b74:	e7b5      	b.n	8004ae2 <f_mkfs+0x4c6>
 8004b76:	bf00      	nop
 8004b78:	00fffff8 	.word	0x00fffff8
 8004b7c:	08005a94 	.word	0x08005a94
 8004b80:	0ffeffff 	.word	0x0ffeffff

08004b84 <ff_uni2oem>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
 8004b84:	287f      	cmp	r0, #127	; 0x7f
{
 8004b86:	b510      	push	{r4, lr}
	if (uni < 0x80) {	/* ASCII? */
 8004b88:	d801      	bhi.n	8004b8e <ff_uni2oem+0xa>
		c = (WCHAR)uni;
 8004b8a:	b280      	uxth	r0, r0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 8004b8c:	bd10      	pop	{r4, pc}
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
 8004b8e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8004b92:	d203      	bcs.n	8004b9c <ff_uni2oem+0x18>
 8004b94:	f240 13b5 	movw	r3, #437	; 0x1b5
 8004b98:	4299      	cmp	r1, r3
 8004b9a:	d006      	beq.n	8004baa <ff_uni2oem+0x26>
	WCHAR c = 0;
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	e7f5      	b.n	8004b8c <ff_uni2oem+0x8>
 8004ba0:	3201      	adds	r2, #1
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
 8004ba2:	2a80      	cmp	r2, #128	; 0x80
 8004ba4:	d103      	bne.n	8004bae <ff_uni2oem+0x2a>
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	e006      	b.n	8004bb8 <ff_uni2oem+0x34>
 8004baa:	2200      	movs	r2, #0
 8004bac:	4c04      	ldr	r4, [pc, #16]	; (8004bc0 <ff_uni2oem+0x3c>)
 8004bae:	f834 1012 	ldrh.w	r1, [r4, r2, lsl #1]
 8004bb2:	b293      	uxth	r3, r2
 8004bb4:	4281      	cmp	r1, r0
 8004bb6:	d1f3      	bne.n	8004ba0 <ff_uni2oem+0x1c>
			c = (c + 0x80) & 0xFF;
 8004bb8:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8004bbc:	b2c0      	uxtb	r0, r0
 8004bbe:	e7e5      	b.n	8004b8c <ff_uni2oem+0x8>
 8004bc0:	08005af6 	.word	0x08005af6

08004bc4 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
 8004bc4:	287f      	cmp	r0, #127	; 0x7f
 8004bc6:	d90d      	bls.n	8004be4 <ff_oem2uni+0x20>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
 8004bc8:	f240 13b5 	movw	r3, #437	; 0x1b5
 8004bcc:	4299      	cmp	r1, r3
 8004bce:	d108      	bne.n	8004be2 <ff_oem2uni+0x1e>
			if (oem < 0x100) c = p[oem - 0x80];
 8004bd0:	28ff      	cmp	r0, #255	; 0xff
 8004bd2:	d806      	bhi.n	8004be2 <ff_oem2uni+0x1e>
 8004bd4:	4b04      	ldr	r3, [pc, #16]	; (8004be8 <ff_oem2uni+0x24>)
 8004bd6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004bda:	3880      	subs	r0, #128	; 0x80
 8004bdc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8004be0:	4770      	bx	lr
	WCHAR c = 0;
 8004be2:	2000      	movs	r0, #0
		}
	}

	return c;
}
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	08005af6 	.word	0x08005af6

08004bec <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
 8004bec:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
{
 8004bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (uni < 0x10000) {	/* Is it in BMP? */
 8004bf2:	d222      	bcs.n	8004c3a <ff_wtoupper+0x4e>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
 8004bf4:	4a1f      	ldr	r2, [pc, #124]	; (8004c74 <ff_wtoupper+0x88>)
		uc = (WORD)uni;
 8004bf6:	b283      	uxth	r3, r0
		p = uc < 0x1000 ? cvt1 : cvt2;
 8004bf8:	f1a2 01bc 	sub.w	r1, r2, #188	; 0xbc
 8004bfc:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8004c00:	bf28      	it	cs
 8004c02:	460a      	movcs	r2, r1
 8004c04:	1d14      	adds	r4, r2, #4
		for (;;) {
			bc = *p++;								/* Get the block base */
 8004c06:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8004c0a:	4621      	mov	r1, r4
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 8004c0c:	b1a2      	cbz	r2, 8004c38 <ff_wtoupper+0x4c>
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d312      	bcc.n	8004c38 <ff_wtoupper+0x4c>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8004c12:	f834 5c02 	ldrh.w	r5, [r4, #-2]
 8004c16:	0a2e      	lsrs	r6, r5, #8
 8004c18:	b2ed      	uxtb	r5, r5
			if (uc < bc + nc) {	/* In the block? */
 8004c1a:	18af      	adds	r7, r5, r2
 8004c1c:	42b8      	cmp	r0, r7
 8004c1e:	da22      	bge.n	8004c66 <ff_wtoupper+0x7a>
				switch (cmd) {
 8004c20:	2e08      	cmp	r6, #8
 8004c22:	d809      	bhi.n	8004c38 <ff_wtoupper+0x4c>
 8004c24:	e8df f006 	tbb	[pc, r6]
 8004c28:	12100a05 	.word	0x12100a05
 8004c2c:	1a181614 	.word	0x1a181614
 8004c30:	1c          	.byte	0x1c
 8004c31:	00          	.byte	0x00
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 8004c32:	1a80      	subs	r0, r0, r2
 8004c34:	f834 3010 	ldrh.w	r3, [r4, r0, lsl #1]
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
		}
		uni = uc;
 8004c38:	4618      	mov	r0, r3
	}

	return uni;
}
 8004c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 8004c3c:	1a98      	subs	r0, r3, r2
 8004c3e:	f000 0001 	and.w	r0, r0, #1
 8004c42:	1a1b      	subs	r3, r3, r0
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	e7f7      	b.n	8004c38 <ff_wtoupper+0x4c>
				case 2: uc -= 16; break;			/* Shift -16 */
 8004c48:	3b10      	subs	r3, #16
 8004c4a:	e7fb      	b.n	8004c44 <ff_wtoupper+0x58>
				case 3:	uc -= 32; break;			/* Shift -32 */
 8004c4c:	3b20      	subs	r3, #32
 8004c4e:	e7f9      	b.n	8004c44 <ff_wtoupper+0x58>
				case 4:	uc -= 48; break;			/* Shift -48 */
 8004c50:	3b30      	subs	r3, #48	; 0x30
 8004c52:	e7f7      	b.n	8004c44 <ff_wtoupper+0x58>
				case 5:	uc -= 26; break;			/* Shift -26 */
 8004c54:	3b1a      	subs	r3, #26
 8004c56:	e7f5      	b.n	8004c44 <ff_wtoupper+0x58>
				case 6:	uc += 8; break;				/* Shift +8 */
 8004c58:	3308      	adds	r3, #8
 8004c5a:	e7f3      	b.n	8004c44 <ff_wtoupper+0x58>
				case 7: uc -= 80; break;			/* Shift -80 */
 8004c5c:	3b50      	subs	r3, #80	; 0x50
 8004c5e:	e7f1      	b.n	8004c44 <ff_wtoupper+0x58>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 8004c60:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8004c64:	e7ee      	b.n	8004c44 <ff_wtoupper+0x58>
 8004c66:	3404      	adds	r4, #4
			if (cmd == 0) p += nc;	/* Skip table if needed */
 8004c68:	2e00      	cmp	r6, #0
 8004c6a:	d1cc      	bne.n	8004c06 <ff_wtoupper+0x1a>
 8004c6c:	eb01 0245 	add.w	r2, r1, r5, lsl #1
 8004c70:	e7c8      	b.n	8004c04 <ff_wtoupper+0x18>
 8004c72:	bf00      	nop
 8004c74:	08005cb2 	.word	0x08005cb2

08004c78 <memset>:
 8004c78:	b4f0      	push	{r4, r5, r6, r7}
 8004c7a:	0786      	lsls	r6, r0, #30
 8004c7c:	d043      	beq.n	8004d06 <memset+0x8e>
 8004c7e:	1e54      	subs	r4, r2, #1
 8004c80:	2a00      	cmp	r2, #0
 8004c82:	d03e      	beq.n	8004d02 <memset+0x8a>
 8004c84:	b2ca      	uxtb	r2, r1
 8004c86:	4603      	mov	r3, r0
 8004c88:	e002      	b.n	8004c90 <memset+0x18>
 8004c8a:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8004c8e:	d338      	bcc.n	8004d02 <memset+0x8a>
 8004c90:	f803 2b01 	strb.w	r2, [r3], #1
 8004c94:	079d      	lsls	r5, r3, #30
 8004c96:	d1f8      	bne.n	8004c8a <memset+0x12>
 8004c98:	2c03      	cmp	r4, #3
 8004c9a:	d92b      	bls.n	8004cf4 <memset+0x7c>
 8004c9c:	b2cd      	uxtb	r5, r1
 8004c9e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8004ca2:	2c0f      	cmp	r4, #15
 8004ca4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8004ca8:	d916      	bls.n	8004cd8 <memset+0x60>
 8004caa:	f1a4 0710 	sub.w	r7, r4, #16
 8004cae:	093f      	lsrs	r7, r7, #4
 8004cb0:	f103 0620 	add.w	r6, r3, #32
 8004cb4:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8004cb8:	f103 0210 	add.w	r2, r3, #16
 8004cbc:	e942 5504 	strd	r5, r5, [r2, #-16]
 8004cc0:	e942 5502 	strd	r5, r5, [r2, #-8]
 8004cc4:	3210      	adds	r2, #16
 8004cc6:	42b2      	cmp	r2, r6
 8004cc8:	d1f8      	bne.n	8004cbc <memset+0x44>
 8004cca:	f004 040f 	and.w	r4, r4, #15
 8004cce:	3701      	adds	r7, #1
 8004cd0:	2c03      	cmp	r4, #3
 8004cd2:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8004cd6:	d90d      	bls.n	8004cf4 <memset+0x7c>
 8004cd8:	461e      	mov	r6, r3
 8004cda:	4622      	mov	r2, r4
 8004cdc:	3a04      	subs	r2, #4
 8004cde:	2a03      	cmp	r2, #3
 8004ce0:	f846 5b04 	str.w	r5, [r6], #4
 8004ce4:	d8fa      	bhi.n	8004cdc <memset+0x64>
 8004ce6:	1f22      	subs	r2, r4, #4
 8004ce8:	f022 0203 	bic.w	r2, r2, #3
 8004cec:	3204      	adds	r2, #4
 8004cee:	4413      	add	r3, r2
 8004cf0:	f004 0403 	and.w	r4, r4, #3
 8004cf4:	b12c      	cbz	r4, 8004d02 <memset+0x8a>
 8004cf6:	b2c9      	uxtb	r1, r1
 8004cf8:	441c      	add	r4, r3
 8004cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8004cfe:	429c      	cmp	r4, r3
 8004d00:	d1fb      	bne.n	8004cfa <memset+0x82>
 8004d02:	bcf0      	pop	{r4, r5, r6, r7}
 8004d04:	4770      	bx	lr
 8004d06:	4614      	mov	r4, r2
 8004d08:	4603      	mov	r3, r0
 8004d0a:	e7c5      	b.n	8004c98 <memset+0x20>

08004d0c <strchr>:
 8004d0c:	b2c9      	uxtb	r1, r1
 8004d0e:	f000 0303 	and.w	r3, r0, #3
 8004d12:	2900      	cmp	r1, #0
 8004d14:	d043      	beq.n	8004d9e <strchr+0x92>
 8004d16:	b17b      	cbz	r3, 8004d38 <strchr+0x2c>
 8004d18:	7803      	ldrb	r3, [r0, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d067      	beq.n	8004dee <strchr+0xe2>
 8004d1e:	4299      	cmp	r1, r3
 8004d20:	d03c      	beq.n	8004d9c <strchr+0x90>
 8004d22:	1c43      	adds	r3, r0, #1
 8004d24:	e005      	b.n	8004d32 <strchr+0x26>
 8004d26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d2a:	2a00      	cmp	r2, #0
 8004d2c:	d05d      	beq.n	8004dea <strchr+0xde>
 8004d2e:	428a      	cmp	r2, r1
 8004d30:	d034      	beq.n	8004d9c <strchr+0x90>
 8004d32:	079a      	lsls	r2, r3, #30
 8004d34:	4618      	mov	r0, r3
 8004d36:	d1f6      	bne.n	8004d26 <strchr+0x1a>
 8004d38:	b470      	push	{r4, r5, r6}
 8004d3a:	6804      	ldr	r4, [r0, #0]
 8004d3c:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8004d40:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8004d44:	ea86 0504 	eor.w	r5, r6, r4
 8004d48:	f1a5 3301 	sub.w	r3, r5, #16843009	; 0x1010101
 8004d4c:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8004d50:	ea23 0305 	bic.w	r3, r3, r5
 8004d54:	ea22 0204 	bic.w	r2, r2, r4
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8004d5e:	d10f      	bne.n	8004d80 <strchr+0x74>
 8004d60:	f850 4f04 	ldr.w	r4, [r0, #4]!
 8004d64:	ea84 0506 	eor.w	r5, r4, r6
 8004d68:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 8004d6c:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 8004d70:	ea22 0205 	bic.w	r2, r2, r5
 8004d74:	ea23 0304 	bic.w	r3, r3, r4
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8004d7e:	d0ef      	beq.n	8004d60 <strchr+0x54>
 8004d80:	7803      	ldrb	r3, [r0, #0]
 8004d82:	b143      	cbz	r3, 8004d96 <strchr+0x8a>
 8004d84:	4299      	cmp	r1, r3
 8004d86:	d102      	bne.n	8004d8e <strchr+0x82>
 8004d88:	e006      	b.n	8004d98 <strchr+0x8c>
 8004d8a:	428b      	cmp	r3, r1
 8004d8c:	d004      	beq.n	8004d98 <strchr+0x8c>
 8004d8e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1f9      	bne.n	8004d8a <strchr+0x7e>
 8004d96:	4618      	mov	r0, r3
 8004d98:	bc70      	pop	{r4, r5, r6}
 8004d9a:	4770      	bx	lr
 8004d9c:	4770      	bx	lr
 8004d9e:	b15b      	cbz	r3, 8004db8 <strchr+0xac>
 8004da0:	7803      	ldrb	r3, [r0, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0fa      	beq.n	8004d9c <strchr+0x90>
 8004da6:	1c43      	adds	r3, r0, #1
 8004da8:	e003      	b.n	8004db2 <strchr+0xa6>
 8004daa:	7802      	ldrb	r2, [r0, #0]
 8004dac:	3301      	adds	r3, #1
 8004dae:	2a00      	cmp	r2, #0
 8004db0:	d0f4      	beq.n	8004d9c <strchr+0x90>
 8004db2:	0799      	lsls	r1, r3, #30
 8004db4:	4618      	mov	r0, r3
 8004db6:	d1f8      	bne.n	8004daa <strchr+0x9e>
 8004db8:	6802      	ldr	r2, [r0, #0]
 8004dba:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8004dbe:	ea23 0302 	bic.w	r3, r3, r2
 8004dc2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8004dc6:	d108      	bne.n	8004dda <strchr+0xce>
 8004dc8:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8004dcc:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8004dd0:	ea23 0302 	bic.w	r3, r3, r2
 8004dd4:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8004dd8:	d0f6      	beq.n	8004dc8 <strchr+0xbc>
 8004dda:	7803      	ldrb	r3, [r0, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0dd      	beq.n	8004d9c <strchr+0x90>
 8004de0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1fb      	bne.n	8004de0 <strchr+0xd4>
 8004de8:	4770      	bx	lr
 8004dea:	4610      	mov	r0, r2
 8004dec:	4770      	bx	lr
 8004dee:	4618      	mov	r0, r3
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop

08004df4 <strcpy>:
 8004df4:	ea80 0201 	eor.w	r2, r0, r1
 8004df8:	4684      	mov	ip, r0
 8004dfa:	f012 0f03 	tst.w	r2, #3
 8004dfe:	d14f      	bne.n	8004ea0 <strcpy+0xac>
 8004e00:	f011 0f03 	tst.w	r1, #3
 8004e04:	d132      	bne.n	8004e6c <strcpy+0x78>
 8004e06:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8004e0a:	f011 0f04 	tst.w	r1, #4
 8004e0e:	f851 3b04 	ldr.w	r3, [r1], #4
 8004e12:	d00b      	beq.n	8004e2c <strcpy+0x38>
 8004e14:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8004e18:	439a      	bics	r2, r3
 8004e1a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8004e1e:	bf04      	itt	eq
 8004e20:	f84c 3b04 	streq.w	r3, [ip], #4
 8004e24:	f851 3b04 	ldreq.w	r3, [r1], #4
 8004e28:	d116      	bne.n	8004e58 <strcpy+0x64>
 8004e2a:	bf00      	nop
 8004e2c:	f851 4b04 	ldr.w	r4, [r1], #4
 8004e30:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8004e34:	439a      	bics	r2, r3
 8004e36:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8004e3a:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8004e3e:	d10b      	bne.n	8004e58 <strcpy+0x64>
 8004e40:	f84c 3b04 	str.w	r3, [ip], #4
 8004e44:	43a2      	bics	r2, r4
 8004e46:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8004e4a:	bf04      	itt	eq
 8004e4c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8004e50:	f84c 4b04 	streq.w	r4, [ip], #4
 8004e54:	d0ea      	beq.n	8004e2c <strcpy+0x38>
 8004e56:	4623      	mov	r3, r4
 8004e58:	f80c 3b01 	strb.w	r3, [ip], #1
 8004e5c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004e60:	ea4f 2333 	mov.w	r3, r3, ror #8
 8004e64:	d1f8      	bne.n	8004e58 <strcpy+0x64>
 8004e66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e6a:	4770      	bx	lr
 8004e6c:	f011 0f01 	tst.w	r1, #1
 8004e70:	d006      	beq.n	8004e80 <strcpy+0x8c>
 8004e72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e76:	f80c 2b01 	strb.w	r2, [ip], #1
 8004e7a:	2a00      	cmp	r2, #0
 8004e7c:	bf08      	it	eq
 8004e7e:	4770      	bxeq	lr
 8004e80:	f011 0f02 	tst.w	r1, #2
 8004e84:	d0bf      	beq.n	8004e06 <strcpy+0x12>
 8004e86:	f831 2b02 	ldrh.w	r2, [r1], #2
 8004e8a:	f012 0fff 	tst.w	r2, #255	; 0xff
 8004e8e:	bf16      	itet	ne
 8004e90:	f82c 2b02 	strhne.w	r2, [ip], #2
 8004e94:	f88c 2000 	strbeq.w	r2, [ip]
 8004e98:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8004e9c:	d1b3      	bne.n	8004e06 <strcpy+0x12>
 8004e9e:	4770      	bx	lr
 8004ea0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ea4:	f80c 2b01 	strb.w	r2, [ip], #1
 8004ea8:	2a00      	cmp	r2, #0
 8004eaa:	d1f9      	bne.n	8004ea0 <strcpy+0xac>
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop

08004eb0 <strlen>:
 8004eb0:	f020 0103 	bic.w	r1, r0, #3
 8004eb4:	f010 0003 	ands.w	r0, r0, #3
 8004eb8:	f1c0 0000 	rsb	r0, r0, #0
 8004ebc:	f851 3b04 	ldr.w	r3, [r1], #4
 8004ec0:	f100 0c04 	add.w	ip, r0, #4
 8004ec4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8004ec8:	f06f 0200 	mvn.w	r2, #0
 8004ecc:	bf1c      	itt	ne
 8004ece:	fa22 f20c 	lsrne.w	r2, r2, ip
 8004ed2:	4313      	orrne	r3, r2
 8004ed4:	f04f 0c01 	mov.w	ip, #1
 8004ed8:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8004edc:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8004ee0:	eba3 020c 	sub.w	r2, r3, ip
 8004ee4:	ea22 0203 	bic.w	r2, r2, r3
 8004ee8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8004eec:	bf04      	itt	eq
 8004eee:	f851 3b04 	ldreq.w	r3, [r1], #4
 8004ef2:	3004      	addeq	r0, #4
 8004ef4:	d0f4      	beq.n	8004ee0 <strlen+0x30>
 8004ef6:	f1c2 0100 	rsb	r1, r2, #0
 8004efa:	ea02 0201 	and.w	r2, r2, r1
 8004efe:	fab2 f282 	clz	r2, r2
 8004f02:	f1c2 021f 	rsb	r2, r2, #31
 8004f06:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8004f0a:	4770      	bx	lr
 8004f0c:	44004b4f 	.word	0x44004b4f
 8004f10:	5f4b5349 	.word	0x5f4b5349
 8004f14:	00525245 	.word	0x00525245
 8004f18:	5f544e49 	.word	0x5f544e49
 8004f1c:	00525245 	.word	0x00525245
 8004f20:	5f544f4e 	.word	0x5f544f4e
 8004f24:	44414552 	.word	0x44414552
 8004f28:	4f4e0059 	.word	0x4f4e0059
 8004f2c:	4c49465f 	.word	0x4c49465f
 8004f30:	4f4e0045 	.word	0x4f4e0045
 8004f34:	5441505f 	.word	0x5441505f
 8004f38:	4e490048 	.word	0x4e490048
 8004f3c:	494c4156 	.word	0x494c4156
 8004f40:	414e5f44 	.word	0x414e5f44
 8004f44:	4400454d 	.word	0x4400454d
 8004f48:	45494e45 	.word	0x45494e45
 8004f4c:	58450044 	.word	0x58450044
 8004f50:	00545349 	.word	0x00545349
 8004f54:	41564e49 	.word	0x41564e49
 8004f58:	5f44494c 	.word	0x5f44494c
 8004f5c:	454a424f 	.word	0x454a424f
 8004f60:	57005443 	.word	0x57005443
 8004f64:	45544952 	.word	0x45544952
 8004f68:	4f52505f 	.word	0x4f52505f
 8004f6c:	54434554 	.word	0x54434554
 8004f70:	49004445 	.word	0x49004445
 8004f74:	4c41564e 	.word	0x4c41564e
 8004f78:	445f4449 	.word	0x445f4449
 8004f7c:	45564952 	.word	0x45564952
 8004f80:	544f4e00 	.word	0x544f4e00
 8004f84:	414e455f 	.word	0x414e455f
 8004f88:	44454c42 	.word	0x44454c42
 8004f8c:	5f4f4e00 	.word	0x5f4f4e00
 8004f90:	454c4946 	.word	0x454c4946
 8004f94:	5359535f 	.word	0x5359535f
 8004f98:	004d4554 	.word	0x004d4554
 8004f9c:	53464b4d 	.word	0x53464b4d
 8004fa0:	4f42415f 	.word	0x4f42415f
 8004fa4:	44455452 	.word	0x44455452
 8004fa8:	4d495400 	.word	0x4d495400
 8004fac:	54554f45 	.word	0x54554f45
 8004fb0:	434f4c00 	.word	0x434f4c00
 8004fb4:	0044454b 	.word	0x0044454b
 8004fb8:	5f544f4e 	.word	0x5f544f4e
 8004fbc:	554f4e45 	.word	0x554f4e45
 8004fc0:	435f4847 	.word	0x435f4847
 8004fc4:	0045524f 	.word	0x0045524f
 8004fc8:	5f4f4f54 	.word	0x5f4f4f54
 8004fcc:	594e414d 	.word	0x594e414d
 8004fd0:	45504f5f 	.word	0x45504f5f
 8004fd4:	49465f4e 	.word	0x49465f4e
 8004fd8:	0053454c 	.word	0x0053454c
 8004fdc:	41564e49 	.word	0x41564e49
 8004fe0:	5f44494c 	.word	0x5f44494c
 8004fe4:	41524150 	.word	0x41524150
 8004fe8:	4554454d 	.word	0x4554454d
 8004fec:	0052      	.short	0x0052
	...

08004fef <HelpMsg>:
 8004fef:	445b 7369 206b 6f63 746e 726f 736c 0a5d     [Disk contorls].
 8004fff:	6420 2069 703c 2364 203e 202d 6e49 7469      di <pd#> - Init
 800500f:	6169 696c 657a 6420 7369 0a6b 6420 2064     ialize disk. dd 
 800501f:	3c5b 6470 3e23 3c20 626c 3e61 205d 202d     [<pd#> <lba>] - 
 800502f:	7544 706d 6120 7320 6365 7472 726f 200a     Dump a secrtor. 
 800503f:	7364 3c20 6470 3e23 2d20 5320 6f68 2077     ds <pd#> - Show 
 800504f:	6964 6b73 7320 6174 7574 0a73 425b 6675     disk status.[Buf
 800505f:	6566 2072 6f63 746e 6f72 736c 0a5d 6220     fer controls]. b
 800506f:	2064 6f3c 7366 203e 202d 7544 706d 7720     d <ofs> - Dump w
 800507f:	726f 696b 676e 6220 6675 6566 0a72 6220     orking buffer. b
 800508f:	2065 6f3c 7366 203e 3c5b 6164 6174 5d3e     e <ofs> [<data>]
 800509f:	2e20 2e2e 2d20 4520 6964 2074 6f77 6b72      ... - Edit work
 80050af:	6e69 2067 7562 6666 7265 200a 7262 3c20     ing buffer. br <
 80050bf:	6470 3e23 3c20 626c 3e61 5b20 633c 756f     pd#> <lba> [<cou
 80050cf:	746e 5d3e 2d20 5220 6165 2064 6964 6b73     nt>] - Read disk
 80050df:	6920 746e 206f 6f77 6b72 6e69 2067 7562      into working bu
 80050ef:	6666 7265 200a 7762 3c20 6470 3e23 3c20     ffer. bw <pd#> <
 80050ff:	626c 3e61 5b20 633c 756f 746e 5d3e 2d20     lba> [<count>] -
 800510f:	5720 6972 6574 7720 726f 696b 676e 6220      Write working b
 800511f:	6675 6566 2072 6e69 6f74 6420 7369 0a6b     uffer into disk.
 800512f:	6220 2066 763c 6c61 203e 202d 6946 6c6c      bf <val> - Fill
 800513f:	7720 726f 696b 676e 6220 6675 6566 0a72      working buffer.
 800514f:	465b 6c69 2065 7973 7473 6d65 6320 6e6f     [File system con
 800515f:	7274 6c6f 5d73 200a 6966 3c20 646c 3e23     trols]. fi <ld#>
 800516f:	5b20 6d3c 756f 746e 5d3e 202d 6f46 6372      [<mount>]- Forc
 800517f:	2065 6e69 7469 6169 696c 657a 2064 6874     e initialized th
 800518f:	2065 6f76 756c 656d 200a 7366 5b20 703c     e volume. fs [<p
 800519f:	7461 3e68 205d 202d 6853 776f 7620 6c6f     ath>] - Show vol
 80051af:	6d75 2065 7473 7461 7375 200a 6c66 5b20     ume status. fl [
 80051bf:	703c 7461 3e68 205d 202d 6853 776f 6120     <path>] - Show a
 80051cf:	6420 7269 6365 6f74 7972 200a 6f66 3c20      directory. fo <
 80051df:	6f6d 6564 203e 663c 6c69 3e65 2d20 4f20     mode> <file> - O
 80051ef:	6570 206e 2061 6966 656c 200a 6366 2d20     pen a file. fc -
 80051ff:	4320 6f6c 6573 7420 6568 6620 6c69 0a65      Close the file.
 800520f:	6620 2065 6f3c 7366 203e 202d 6f4d 6576      fe <ofs> - Move
 800521f:	6620 2070 6e69 6e20 726f 616d 206c 6573      fp in normal se
 800522f:	6b65 200a 6466 3c20 656c 3e6e 2d20 5220     ek. fd <len> - R
 800523f:	6165 2064 6e61 2064 7564 706d 7420 6568     ead and dump the
 800524f:	6620 6c69 0a65 6620 2072 6c3c 6e65 203e      file. fr <len> 
 800525f:	202d 6552 6461 7420 6568 6620 6c69 0a65     - Read the file.
 800526f:	6620 2077 6c3c 6e65 203e 763c 6c61 203e      fw <len> <val> 
 800527f:	202d 7257 7469 2065 6f74 7420 6568 6620     - Write to the f
 800528f:	6c69 0a65 6620 206e 6f3c 6772 6e2e 6d61     ile. fn <org.nam
 800529f:	3e65 3c20 656e 2e77 616e 656d 203e 202d     e> <new.name> - 
 80052af:	6552 616e 656d 6120 206e 626f 656a 7463     Rename an object
 80052bf:	200a 7566 3c20 616e 656d 203e 202d 6e55     . fu <name> - Un
 80052cf:	696c 6b6e 6120 206e 626f 656a 7463 200a     link an object. 
 80052df:	7666 2d20 5420 7572 636e 7461 2065 6874     fv - Truncate th
 80052ef:	2065 6966 656c 6120 2074 7563 7272 6e65     e file at curren
 80052ff:	2074 7066 200a 6b66 3c20 616e 656d 203e     t fp. fk <name> 
 800530f:	202d 7243 6165 6574 6120 6420 7269 6365     - Create a direc
 800531f:	6f74 7972 200a 6166 3c20 7461 7272 203e     tory. fa <atrr> 
 800532f:	6d3c 7361 3e6b 3c20 626f 656a 7463 6e20     <mask> <object n
 800533f:	6d61 3e65 2d20 4320 6168 676e 2065 7461     ame> - Change at
 800534f:	7274 6269 7475 2065 666f 6120 206e 626f     tribute of an ob
 800535f:	656a 7463 200a 7466 3c20 6579 7261 203e     ject. ft <year> 
 800536f:	6d3c 6e6f 6874 203e 643c 7961 203e 683c     <month> <day> <h
 800537f:	756f 3e72 3c20 696d 3e6e 3c20 6573 3e63     our> <min> <sec>
 800538f:	3c20 616e 656d 203e 202d 6843 6e61 6567      <name> - Change
 800539f:	7420 6d69 7365 6174 706d 6f20 2066 6e61      timestamp of an
 80053af:	6f20 6a62 6365 0a74 6620 2078 733c 6372      object. fx <src
 80053bf:	662e 6c69 3e65 3c20 7364 2e74 6966 656c     .file> <dst.file
 80053cf:	203e 202d 6f43 7970 6120 6620 6c69 0a65     > - Copy a file.
 80053df:	6620 2067 703c 7461 3e68 2d20 4320 6168      fg <path> - Cha
 80053ef:	676e 2065 7563 7272 6e65 2074 6964 6572     nge current dire
 80053ff:	7463 726f 0a79 6620 2071 202d 6853 776f     ctory. fq - Show
 800540f:	6320 7275 6572 746e 6420 7269 6365 6f74      current directo
 800541f:	7972 200a 6266 3c20 616e 656d 203e 202d     ry. fb <name> - 
 800542f:	6553 2074 6f76 756c 656d 6c20 6261 6c65     Set volume label
 800543f:	200a 6d66 3c20 646c 3e23 3c20 7974 6570     . fm <ld#> <type
 800544f:	203e 633c 6973 657a 203e 202d 7243 6165     > <csize> - Crea
 800545f:	6574 6620 6c69 2065 7973 7473 6d65 200a     te file system. 
 800546f:	7a66 5b20 6c3c 6e65 5d3e 2d20 4320 6168     fz [<len>] - Cha
 800547f:	676e 2f65 6853 776f 5220 572f 6c20 6e65     nge/Show R/W len
 800548f:	7467 2068 6f66 2072 7266 662f 2f77 7866     gth for fr/fw/fx
 800549f:	6320 6d6f 616d 646e 5b0a 694d 6373 6320      command.[Misc c
 80054af:	6d6f 616d 646e 5d73 200a 646d 625b 687c     ommands]. md[b|h
 80054bf:	777c 205d 613c 6464 3e72 5b20 633c 756f     |w] <addr> [<cou
 80054cf:	746e 5d3e 2d20 4420 6d75 2070 656d 6f6d     nt>] - Dump memo
 80054df:	7972 200a 666d 3c20 6461 7264 203e 763c     ry. mf <addr> <v
 80054ef:	6c61 6575 203e 633c 756f 746e 203e 202d     alue> <count> - 
 80054ff:	6946 6c6c 6d20 6d65 726f 0a79 6d20 5b65     Fill memory. me[
 800550f:	7c62 7c68 5d77 3c20 6461 7264 203e 3c5b     b|h|w] <addr> [<
 800551f:	6176 756c 3e65 2e20 2e2e 205d 202d 6445     value> ...] - Ed
 800552f:	7469 6d20 6d65 726f 0a79 7420 5b20 793c     it memory. t [<y
 800553f:	6165 3e72 3c20 6f6d 3e6e 3c20 646d 7961     ear> <mon> <mday
 800554f:	203e 683c 756f 3e72 3c20 696d 3e6e 3c20     > <hour> <min> <
 800555f:	6573 3e63 205d 202d 6553 2f74 6853 776f     sec>] - Set/Show
 800556f:	5220 4354 0a0a 0000 e800                          RTC.....

08005578 <ft.4867>:
 8005578:	57e8 0800 59b8 0800 59be 0800 59c4 0800     .W...Y...Y...Y..
 8005588:	59ca 0800                                   .Y..

0800558c <days.4868>:
 800558c:	7553 006e 6f4d 006e 7554 0065 6557 0064     Sun.Mon.Tue.Wed.
 800559c:	6854 0075 7246 0069 6153 0074 6372 253d     Thu.Fri.Sat.rc=%
 80055ac:	2075 5246 255f 0a73 5600 6c6f 6d75 2065     u FR_%s..Volume 
 80055bc:	616e 656d 6920 2073 7325 000a 6f4e 7620     name is %s..No v
 80055cc:	6c6f 6d75 2065 616c 6562 0a6c 5300 4d54     olume label..STM
 80055dc:	3233 3146 3030 7420 7365 2074 6f6d 696e     32F100 test moni
 80055ec:	6f74 0a72 4c00 4e46 4520 616e 6c62 6465     tor..LFN Enabled
 80055fc:	2c00 4320 646f 2065 6170 6567 203a 7525     ., Code page: %u
 800560c:	000a 7543 7272 6e65 2074 6974 656d 6920     ..Current time i
 800561c:	2073 7525 252f 2f75 7525 2520 7532 253a     s %u/%u/%u %2u:%
 800562c:	3230 3a75 3025 7532 0a2e 5200 4354 6920     02u:%02u...RTC i
 800563c:	2073 6f6e 2074 7661 6961 616c 6c62 2e65     s not available.
 800564c:	000a 3025 5838 3020 2578 3830 2d58 2500     ..%08X 0x%08X-.%
 800565c:	3830 2058 7830 3025 5834 002d 3025 5838     08X 0x%04X-.%08X
 800566c:	3020 2578 3230 2d58 7200 3d63 6425 000a      0x%02X-.rc=%d..
 800567c:	4450 3a23 7525 4c20 4142 253a 756c 000a     PD#:%u LBA:%lu..
 800568c:	7244 7669 2065 6973 657a 203a 6c25 2075     Drive size: %lu 
 800569c:	6573 7463 726f 0a73 4200 6f6c 6b63 7320     sectors..Block s
 80056ac:	7a69 3a65 2520 756c 7320 6365 6f74 7372     ize: %lu sectors
 80056bc:	000a 654d 6964 2061 7974 6570 203a 7525     ..Media type: %u
 80056cc:	000a 5343 3a44 000a 4943 3a44 000a 434f     ..CSD:..CID:..OC
 80056dc:	3a52 000a 4453 5320 6174 7574 3a73 000a     R:..SD Status:..
 80056ec:	3025 5834 2520 3230 2d58 3f00 3f3f 000a     %04X %02X-.???..
 80056fc:	6372 253d 0a75 4600 5441 7420 7079 2065     rc=%u..FAT type 
 800570c:	203d 7325 000a 7942 6574 2f73 6c43 7375     = %s..Bytes/Clus
 800571c:	6574 2072 203d 6c25 0a75 4e00 6d75 6562     ter = %lu..Numbe
 800572c:	2072 666f 4620 5441 2073 203d 7525 000a     r of FATs = %u..
 800573c:	6f52 746f 4420 5249 6520 746e 6972 7365     Root DIR entries
 800574c:	3d20 2520 0a75 5300 6365 6f74 7372 462f      = %u..Sectors/F
 800575c:	5441 3d20 2520 756c 000a 754e 626d 7265     AT = %lu..Number
 800576c:	6f20 2066 6c63 7375 6574 7372 3d20 2520      of clusters = %
 800577c:	756c 000a 6f56 756c 656d 7320 6174 7472     lu..Volume start
 800578c:	2820 626c 2961 3d20 2520 756c 000a 4146      (lba) = %lu..FA
 800579c:	2054 7473 7261 2074 6c28 6162 2029 203d     T start (lba) = 
 80057ac:	6c25 0a75 4400 5249 7320 6174 7472 2820     %lu..DIR start (
 80057bc:	626c 2c61 6c63 7375 6f74 2972 3d20 2520     lba,clustor) = %
 80057cc:	756c 000a 6144 6174 7320 6174 7472 2820     lu..Data start (
 80057dc:	626c 2961 3d20 2520 756c 0a0a 5600 6c6f     lba) = %lu...Vol
 80057ec:	6d75 2065 2f53 204e 7369 2520 3430 2d58     ume S/N is %04X-
 80057fc:	3025 5834 000a 250d 2075 6966 656c 2c73     %04X...%u files,
 800580c:	2520 756c 6220 7479 7365 0a2e 7525 6620      %lu bytes..%u f
 800581c:	6c6f 6564 7372 0a2e 6c25 2075 694b 2042     olders..%lu KiB 
 800582c:	6f74 6174 206c 6964 6b73 7320 6170 6563     total disk space
 800583c:	0a2e 6c25 2075 694b 2042 7661 6961 616c     ..%lu KiB availa
 800584c:	6c62 2e65 000a 6325 6325 6325 6325 6325     ble...%c%c%c%c%c
 800585c:	2520 2f75 3025 7532 252f 3230 2075 3025      %u/%02u/%02u %0
 800586c:	7532 253a 3230 2075 3925 756c 2020 7325     2u:%02u %9lu  %s
 800587c:	000a 3425 2075 6946 656c 7328 2c29 3125     ..%4u File(s),%1
 800588c:	6c30 2075 7962 6574 2073 6f74 6174 0a6c     0lu bytes total.
 800589c:	3425 2075 6944 2872 2973 2c00 2520 3031     %4u Dir(s)., %10
 80058ac:	756c 6220 7479 7365 6620 6572 0a65 6600     lu bytes free..f
 80058bc:	7470 3d72 6c25 2875 7830 6c25 2958 000a     ptr=%lu(0x%lX)..
 80058cc:	6c25 2075 7962 6574 2073 6572 6461 7720     %lu bytes read w
 80058dc:	7469 2068 6c25 2075 426b 732f 6365 0a2e     ith %lu kB/sec..
 80058ec:	2500 756c 6220 7479 7365 7720 6972 7474     .%lu bytes writt
 80058fc:	6e65 7720 7469 2068 6c25 2075 426b 732f     en with %lu kB/s
 800590c:	6365 0a2e 4f00 6570 696e 676e 2220 7325     ec...Opening "%s
 800591c:	0022 7243 6165 6974 676e 2220 7325 0022     ".Creating "%s".
 800592c:	6f43 7970 6e69 2067 6966 656c 2e2e 002e     Copying file....
 800593c:	250a 756c 6220 7479 7365 6320 706f 6569     .%lu bytes copie
 800594c:	2064 6977 6874 2520 756c 6b20 2f42 6573     d with %lu kB/se
 800595c:	2e63 000a 6854 2065 6f76 756c 656d 7720     c...The volume w
 800596c:	6c69 206c 6562 6620 726f 616d 7474 6465     ill be formatted
 800597c:	202e 7241 2065 6f79 2075 7573 6572 203f     . Are you sure? 
 800598c:	5928 6e2f 3d29 6200 656c 3d6e 7525 000a     (Y/n)=.blen=%u..
 800599c:	7525 252f 2f75 7525 2520 2073 3025 7532     %u/%u/%u %s %02u
 80059ac:	253a 3230 3a75 3025 7532 000a 4146 3154     :%02u:%02u..FAT1
 80059bc:	0032 4146 3154 0036 4146 3354 0032 7865     2.FAT16.FAT32.ex
 80059cc:	4146 0054 3025 6c38 3a58 2000 3025 5832     FAT.%08lX:. %02X
 80059dc:	2000 3025 5834 2000 3025 4c38 0058          . %04X. %08LX.

080059ea <samurai>:
 80059ea:	1c1f 1e1f 1e1f 1f1f 1f1e 1f1e               ............

080059f6 <LfnOfs>:
 80059f6:	0301 0705 0e09 1210 1614 1c18 801e               .............

08005a03 <ExCvt>:
 8005a03:	9a80 4145 418e 808f 4545 4945 4949 8f8e     ..EA.A..EEEIII..
 8005a13:	9290 4f92 4f99 5555 9959 9b9a 9d9c 9f9e     ...O.OUUY.......
 8005a23:	4941 554f a5a5 a7a6 a9a8 abaa adac afae     AIOU............
 8005a33:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
 8005a43:	c1c0 c3c2 c5c4 c7c6 c9c8 cbca cdcc cfce     ................
 8005a53:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
 8005a63:	e1e0 e3e2 e5e4 e7e6 e9e8 ebea edec efee     ................
 8005a73:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

08005a83 <badchr.4988>:
 8005a83:	2e2b 3b2c 5b3d 2f5d 225c 3a2a 3e3c 7c3f     +.,;=[]/\"*:<>?|
 8005a93:	007f 0100                                        ...

08005a96 <cst32.5006>:
 8005a96:	0001 0002 0004 0008 0010 0020 0000          .......... ...

08005aa4 <cst.5005>:
 8005aa4:	0001 0004 0010 0040 0100 0200 0000 2a22     ......@......."*
 8005ab4:	3c3a 3f3e 7f7c 2b00 3b2c 5b3d 005d feeb     :<>?|..+,;=[]...
 8005ac4:	4d90 4453 534f 2e35 0030 4f4e 4e20 4d41     .MSDOS5.0.NO NAM
 8005ad4:	2045 2020 4620 5441 3233 2020 0020 4f4e     E    FAT32   .NO
 8005ae4:	4e20 4d41 2045 2020 4620 5441 2020 2020      NAME    FAT    
 8005af4:	0020                                         .

08005af6 <uc437>:
 8005af6:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
 8005b06:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
 8005b16:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
 8005b26:	00ff 00d6 00dc 00a2 00a3 00a5 20a7 0192     ............. ..
 8005b36:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
 8005b46:	00bf 2310 00ac 00bd 00bc 00a1 00ab 00bb     ...#............
 8005b56:	2591 2592 2593 2502 2524 2561 2562 2556     .%.%.%.%$%a%b%V%
 8005b66:	2555 2563 2551 2557 255d 255c 255b 2510     U%c%Q%W%]%\%[%.%
 8005b76:	2514 2534 252c 251c 2500 253c 255e 255f     .%4%,%.%.%<%^%_%
 8005b86:	255a 2554 2569 2566 2560 2550 256c 2567     Z%T%i%f%`%P%l%g%
 8005b96:	2568 2564 2565 2559 2558 2552 2553 256b     h%d%e%Y%X%R%S%k%
 8005ba6:	256a 2518 250c 2588 2584 258c 2590 2580     j%.%.%.%.%.%.%.%
 8005bb6:	03b1 00df 0393 03c0 03a3 03c3 00b5 03c4     ................
 8005bc6:	03a6 0398 03a9 03b4 221e 03c6 03b5 2229     ........."....)"
 8005bd6:	2261 00b1 2265 2264 2320 2321 00f7 2248     a"..e"d" #!#..H"
 8005be6:	00b0 2219 00b7 221a 207f 00b2 25a0 00a0     ..."...". ...%..

08005bf6 <cvt2.4337>:
 8005bf6:	1d7d 0001 2c63 1e00 0196 1ea0 015a 1f00     }...c,......Z...
 8005c06:	0608 1f10 0606 1f20 0608 1f30 0608 1f40     ...... ...0...@.
 8005c16:	0606 1f51 0007 1f59 1f52 1f5b 1f54 1f5d     ..Q...Y.R.[.T.].
 8005c26:	1f56 1f5f 1f60 0608 1f70 000e 1fba 1fbb     V._.`...p.......
 8005c36:	1fc8 1fc9 1fca 1fcb 1fda 1fdb 1ff8 1ff9     ................
 8005c46:	1fea 1feb 1ffa 1ffb 1f80 0608 1f90 0608     ................
 8005c56:	1fa0 0608 1fb0 0004 1fb8 1fb9 1fb2 1fbc     ................
 8005c66:	1fcc 0001 1fc3 1fd0 0602 1fe0 0602 1fe5     ................
 8005c76:	0001 1fec 1ff3 0001 1ffc 214e 0001 2132     ..........N!..2!
 8005c86:	2170 0210 2184 0001 2183 24d0 051a 2c30     p!...!...!.$..0,
 8005c96:	042f 2c60 0102 2c67 0106 2c75 0102 2c80     /.`,..g,..u,...,
 8005ca6:	0164 2d00 0826 ff41 031a 0000               d..-&.A.....

08005cb2 <cvt1.4336>:
 8005cb2:	0061 031a 00e0 0317 00f8 0307 00ff 0001     a...............
 8005cc2:	0178 0100 0130 0132 0106 0139 0110 014a     x...0.2...9...J.
 8005cd2:	012e 0179 0106 0180 004d 0243 0181 0182     ..y.....M.C.....
 8005ce2:	0182 0184 0184 0186 0187 0187 0189 018a     ................
 8005cf2:	018b 018b 018d 018e 018f 0190 0191 0191     ................
 8005d02:	0193 0194 01f6 0196 0197 0198 0198 023d     ..............=.
 8005d12:	019b 019c 019d 0220 019f 01a0 01a0 01a2     ...... .........
 8005d22:	01a2 01a4 01a4 01a6 01a7 01a7 01a9 01aa     ................
 8005d32:	01ab 01ac 01ac 01ae 01af 01af 01b1 01b2     ................
 8005d42:	01b3 01b3 01b5 01b5 01b7 01b8 01b8 01ba     ................
 8005d52:	01bb 01bc 01bc 01be 01f7 01c0 01c1 01c2     ................
 8005d62:	01c3 01c4 01c5 01c4 01c7 01c8 01c7 01ca     ................
 8005d72:	01cb 01ca 01cd 0110 01dd 0001 018e 01de     ................
 8005d82:	0112 01f3 0003 01f1 01f4 01f4 01f8 0128     ..............(.
 8005d92:	0222 0112 023a 0009 2c65 023b 023b 023d     "...:...e,;.;.=.
 8005da2:	2c66 023f 0240 0241 0241 0246 010a 0253     f,?.@.A.A.F...S.
 8005db2:	0040 0181 0186 0255 0189 018a 0258 018f     @.....U.....X...
 8005dc2:	025a 0190 025c 025d 025e 025f 0193 0261     Z...\.].^._...a.
 8005dd2:	0262 0194 0264 0265 0266 0267 0197 0196     b...d.e.f.g.....
 8005de2:	026a 2c62 026c 026d 026e 019c 0270 0271     j.b,l.m.n...p.q.
 8005df2:	019d 0273 0274 019f 0276 0277 0278 0279     ..s.t...v.w.x.y.
 8005e02:	027a 027b 027c 2c64 027e 027f 01a6 0281     z.{.|.d,~.......
 8005e12:	0282 01a9 0284 0285 0286 0287 01ae 0244     ..............D.
 8005e22:	01b1 01b2 0245 028d 028e 028f 0290 0291     ....E...........
 8005e32:	01b7 037b 0003 03fd 03fe 03ff 03ac 0004     ..{.............
 8005e42:	0386 0388 0389 038a 03b1 0311 03c2 0002     ................
 8005e52:	03a3 03a3 03c4 0308 03cc 0003 038c 038e     ................
 8005e62:	038f 03d8 0118 03f2 000a 03f9 03f3 03f4     ................
 8005e72:	03f5 03f6 03f7 03f7 03f9 03fa 03fa 0430     ..............0.
 8005e82:	0320 0450 0710 0460 0122 048a 0136 04c1      .P...`."...6...
 8005e92:	010e 04cf 0001 04c0 04d0 0144 0561 0426     ..........D.a.&.
	...
